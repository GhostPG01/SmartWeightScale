
ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7d4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bbc  0800a8e8  0800a8e8  0000b8e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4a4  0800b4a4  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b4a4  0800b4a4  0000c4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4ac  0800b4ac  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4ac  0800b4ac  0000c4ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b4b0  0800b4b0  0000c4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b4b4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  200001d4  0800b688  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a58  0800b688  0000da58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127e4  00000000  00000000  0000d1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037f3  00000000  00000000  0001f9e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  000231d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d5f  00000000  00000000  000242a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b656  00000000  00000000  00024fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177ac  00000000  00000000  00040655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ed6a  00000000  00000000  00057e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6b6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055f4  00000000  00000000  000e6bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00000292  00000000  00000000  000ec1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003b  00000000  00000000  000ec436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a8cc 	.word	0x0800a8cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800a8cc 	.word	0x0800a8cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010e0:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <MX_ADC1_Init+0x74>)
 80010e2:	4a19      	ldr	r2, [pc, #100]	@ (8001148 <MX_ADC1_Init+0x78>)
 80010e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010e6:	4b17      	ldr	r3, [pc, #92]	@ (8001144 <MX_ADC1_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010ec:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <MX_ADC1_Init+0x74>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f2:	4b14      	ldr	r3, [pc, #80]	@ (8001144 <MX_ADC1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010f8:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <MX_ADC1_Init+0x74>)
 80010fa:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80010fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001100:	4b10      	ldr	r3, [pc, #64]	@ (8001144 <MX_ADC1_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001106:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <MX_ADC1_Init+0x74>)
 8001108:	2201      	movs	r2, #1
 800110a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800110c:	480d      	ldr	r0, [pc, #52]	@ (8001144 <MX_ADC1_Init+0x74>)
 800110e:	f001 fe01 	bl	8002d14 <HAL_ADC_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001118:	f000 fe10 	bl	8001d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800111c:	2302      	movs	r3, #2
 800111e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001120:	2301      	movs	r3, #1
 8001122:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	@ (8001144 <MX_ADC1_Init+0x74>)
 800112e:	f002 f987 	bl	8003440 <HAL_ADC_ConfigChannel>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001138:	f000 fe00 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200001f0 	.word	0x200001f0
 8001148:	40012400 	.word	0x40012400

0800114c <ADC_Init>:

void ADC_Init(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
    // 如果CubeIDE已自动调用 MX_ADC1_Init()，此处可做其他配置（例如校准）
    // 暂时留空或加入自定义扩展代码
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	@ 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0318 	add.w	r3, r7, #24
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a23      	ldr	r2, [pc, #140]	@ (8001200 <HAL_ADC_MspInit+0xa8>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d13f      	bne.n	80011f8 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001178:	4b22      	ldr	r3, [pc, #136]	@ (8001204 <HAL_ADC_MspInit+0xac>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a21      	ldr	r2, [pc, #132]	@ (8001204 <HAL_ADC_MspInit+0xac>)
 800117e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b1f      	ldr	r3, [pc, #124]	@ (8001204 <HAL_ADC_MspInit+0xac>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <HAL_ADC_MspInit+0xac>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a1b      	ldr	r2, [pc, #108]	@ (8001204 <HAL_ADC_MspInit+0xac>)
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <HAL_ADC_MspInit+0xac>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a8:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <HAL_ADC_MspInit+0xac>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a15      	ldr	r2, [pc, #84]	@ (8001204 <HAL_ADC_MspInit+0xac>)
 80011ae:	f043 0308 	orr.w	r3, r3, #8
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <HAL_ADC_MspInit+0xac>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011c0:	2304      	movs	r3, #4
 80011c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c4:	2303      	movs	r3, #3
 80011c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 0318 	add.w	r3, r7, #24
 80011cc:	4619      	mov	r1, r3
 80011ce:	480e      	ldr	r0, [pc, #56]	@ (8001208 <HAL_ADC_MspInit+0xb0>)
 80011d0:	f002 fe82 	bl	8003ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011d4:	2302      	movs	r3, #2
 80011d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d8:	2303      	movs	r3, #3
 80011da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	f107 0318 	add.w	r3, r7, #24
 80011e0:	4619      	mov	r1, r3
 80011e2:	480a      	ldr	r0, [pc, #40]	@ (800120c <HAL_ADC_MspInit+0xb4>)
 80011e4:	f002 fe78 	bl	8003ed8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	2012      	movs	r0, #18
 80011ee:	f002 fb9a 	bl	8003926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011f2:	2012      	movs	r0, #18
 80011f4:	f002 fbb3 	bl	800395e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	@ 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40012400 	.word	0x40012400
 8001204:	40021000 	.word	0x40021000
 8001208:	40010800 	.word	0x40010800
 800120c:	40010c00 	.word	0x40010c00

08001210 <ADC_ReadValue>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

uint32_t ADC_ReadValue(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]

    HAL_ADC_Start(&hadc1);
 800121a:	480b      	ldr	r0, [pc, #44]	@ (8001248 <ADC_ReadValue+0x38>)
 800121c:	f001 fe52 	bl	8002ec4 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8001220:	2164      	movs	r1, #100	@ 0x64
 8001222:	4809      	ldr	r0, [pc, #36]	@ (8001248 <ADC_ReadValue+0x38>)
 8001224:	f001 ff28 	bl	8003078 <HAL_ADC_PollForConversion>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d103      	bne.n	8001236 <ADC_ReadValue+0x26>
    {
        adcValue = HAL_ADC_GetValue(&hadc1);
 800122e:	4806      	ldr	r0, [pc, #24]	@ (8001248 <ADC_ReadValue+0x38>)
 8001230:	f002 f828 	bl	8003284 <HAL_ADC_GetValue>
 8001234:	6078      	str	r0, [r7, #4]
    }
    HAL_ADC_Stop(&hadc1);
 8001236:	4804      	ldr	r0, [pc, #16]	@ (8001248 <ADC_ReadValue+0x38>)
 8001238:	f001 fef2 	bl	8003020 <HAL_ADC_Stop>

    return adcValue;
 800123c:	687b      	ldr	r3, [r7, #4]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200001f0 	.word	0x200001f0

0800124c <ADC_ConvertToVoltage>:

// 将 ADC 采样数据转换为对应的电压值
float ADC_ConvertToVoltage(uint32_t adcValue)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
    return ((float)adcValue / ADC_RESOLUTION) * VREF;
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff fd1d 	bl	8000c94 <__aeabi_ui2f>
 800125a:	4603      	mov	r3, r0
 800125c:	4906      	ldr	r1, [pc, #24]	@ (8001278 <ADC_ConvertToVoltage+0x2c>)
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fe24 	bl	8000eac <__aeabi_fdiv>
 8001264:	4603      	mov	r3, r0
 8001266:	4905      	ldr	r1, [pc, #20]	@ (800127c <ADC_ConvertToVoltage+0x30>)
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fd6b 	bl	8000d44 <__aeabi_fmul>
 800126e:	4603      	mov	r3, r0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	457ff000 	.word	0x457ff000
 800127c:	40533333 	.word	0x40533333

08001280 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <MX_DMA_Init+0x48>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	4a0f      	ldr	r2, [pc, #60]	@ (80012c8 <MX_DMA_Init+0x48>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6153      	str	r3, [r2, #20]
 8001292:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <MX_DMA_Init+0x48>)
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	200e      	movs	r0, #14
 80012a4:	f002 fb3f 	bl	8003926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80012a8:	200e      	movs	r0, #14
 80012aa:	f002 fb58 	bl	800395e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	200f      	movs	r0, #15
 80012b4:	f002 fb37 	bl	8003926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80012b8:	200f      	movs	r0, #15
 80012ba:	f002 fb50 	bl	800395e <HAL_NVIC_EnableIRQ>

}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000

080012cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001410 <MX_GPIO_Init+0x144>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a4a      	ldr	r2, [pc, #296]	@ (8001410 <MX_GPIO_Init+0x144>)
 80012e6:	f043 0310 	orr.w	r3, r3, #16
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b48      	ldr	r3, [pc, #288]	@ (8001410 <MX_GPIO_Init+0x144>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0310 	and.w	r3, r3, #16
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f8:	4b45      	ldr	r3, [pc, #276]	@ (8001410 <MX_GPIO_Init+0x144>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a44      	ldr	r2, [pc, #272]	@ (8001410 <MX_GPIO_Init+0x144>)
 80012fe:	f043 0320 	orr.w	r3, r3, #32
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b42      	ldr	r3, [pc, #264]	@ (8001410 <MX_GPIO_Init+0x144>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0320 	and.w	r3, r3, #32
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001310:	4b3f      	ldr	r3, [pc, #252]	@ (8001410 <MX_GPIO_Init+0x144>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a3e      	ldr	r2, [pc, #248]	@ (8001410 <MX_GPIO_Init+0x144>)
 8001316:	f043 0304 	orr.w	r3, r3, #4
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b3c      	ldr	r3, [pc, #240]	@ (8001410 <MX_GPIO_Init+0x144>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001328:	4b39      	ldr	r3, [pc, #228]	@ (8001410 <MX_GPIO_Init+0x144>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a38      	ldr	r2, [pc, #224]	@ (8001410 <MX_GPIO_Init+0x144>)
 800132e:	f043 0308 	orr.w	r3, r3, #8
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b36      	ldr	r3, [pc, #216]	@ (8001410 <MX_GPIO_Init+0x144>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001346:	4833      	ldr	r0, [pc, #204]	@ (8001414 <MX_GPIO_Init+0x148>)
 8001348:	f002 ff61 	bl	800420e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SCK_Pin|SPI_CS_Pin, GPIO_PIN_SET);
 800134c:	2201      	movs	r2, #1
 800134e:	2112      	movs	r1, #18
 8001350:	4831      	ldr	r0, [pc, #196]	@ (8001418 <MX_GPIO_Init+0x14c>)
 8001352:	f002 ff5c 	bl	800420e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001356:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800135a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2302      	movs	r3, #2
 8001366:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	4619      	mov	r1, r3
 800136e:	4829      	ldr	r0, [pc, #164]	@ (8001414 <MX_GPIO_Init+0x148>)
 8001370:	f002 fdb2 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DT_Pin */
  GPIO_InitStruct.Pin = DT_Pin;
 8001374:	2301      	movs	r3, #1
 8001376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800137c:	2301      	movs	r3, #1
 800137e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DT_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	4619      	mov	r1, r3
 8001386:	4824      	ldr	r0, [pc, #144]	@ (8001418 <MX_GPIO_Init+0x14c>)
 8001388:	f002 fda6 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCK_Pin */
  GPIO_InitStruct.Pin = SCK_Pin;
 800138c:	2302      	movs	r3, #2
 800138e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SCK_GPIO_Port, &GPIO_InitStruct);
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4619      	mov	r1, r3
 80013a2:	481d      	ldr	r0, [pc, #116]	@ (8001418 <MX_GPIO_Init+0x14c>)
 80013a4:	f002 fd98 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80013a8:	2310      	movs	r3, #16
 80013aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	4619      	mov	r1, r3
 80013be:	4816      	ldr	r0, [pc, #88]	@ (8001418 <MX_GPIO_Init+0x14c>)
 80013c0:	f002 fd8a 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY1_Pin KEY2_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY2_Pin;
 80013c4:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80013c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	4619      	mov	r1, r3
 80013d8:	480f      	ldr	r0, [pc, #60]	@ (8001418 <MX_GPIO_Init+0x14c>)
 80013da:	f002 fd7d 	bl	8003ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX30102_INT_Pin */
  GPIO_InitStruct.Pin = MAX30102_INT_Pin;
 80013de:	2320      	movs	r3, #32
 80013e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	@ (800141c <MX_GPIO_Init+0x150>)
 80013e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MAX30102_INT_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 0310 	add.w	r3, r7, #16
 80013ee:	4619      	mov	r1, r3
 80013f0:	480b      	ldr	r0, [pc, #44]	@ (8001420 <MX_GPIO_Init+0x154>)
 80013f2:	f002 fd71 	bl	8003ed8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2017      	movs	r0, #23
 80013fc:	f002 fa93 	bl	8003926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001400:	2017      	movs	r0, #23
 8001402:	f002 faac 	bl	800395e <HAL_NVIC_EnableIRQ>

}
 8001406:	bf00      	nop
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000
 8001414:	40011000 	.word	0x40011000
 8001418:	40010800 	.word	0x40010800
 800141c:	10210000 	.word	0x10210000
 8001420:	40010c00 	.word	0x40010c00

08001424 <ReadCount>:
*Function : 读取传感器数值，通道A，增益128
*Parameter :    count 计数值
                i    24位数据计数，改变i的值可选择不同通道和增益24~26
***********************************************************************************************/
uint32_t ReadCount(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0

	uint32_t Count = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
	uint8_t i = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	70fb      	strb	r3, [r7, #3]
	HAL_Delay(10);
 8001432:	200a      	movs	r0, #10
 8001434:	f001 fc4a 	bl	8002ccc <HAL_Delay>
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	2102      	movs	r1, #2
 800143c:	481e      	ldr	r0, [pc, #120]	@ (80014b8 <ReadCount+0x94>)
 800143e:	f002 fee6 	bl	800420e <HAL_GPIO_WritePin>

	while(HAL_GPIO_ReadPin(DT_GPIO_Port, DT_Pin));//判断AD转换器是否准备好（DOUT应为低电平）
 8001442:	bf00      	nop
 8001444:	2101      	movs	r1, #1
 8001446:	481c      	ldr	r0, [pc, #112]	@ (80014b8 <ReadCount+0x94>)
 8001448:	f002 feca 	bl	80041e0 <HAL_GPIO_ReadPin>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f8      	bne.n	8001444 <ReadCount+0x20>
	for(i = 0; i <24; i++)//24
 8001452:	2300      	movs	r3, #0
 8001454:	70fb      	strb	r3, [r7, #3]
 8001456:	e019      	b.n	800148c <ReadCount+0x68>
	{

	  HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET);
 8001458:	2201      	movs	r2, #1
 800145a:	2102      	movs	r1, #2
 800145c:	4816      	ldr	r0, [pc, #88]	@ (80014b8 <ReadCount+0x94>)
 800145e:	f002 fed6 	bl	800420e <HAL_GPIO_WritePin>
		Count = Count << 1;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	607b      	str	r3, [r7, #4]
		if(HAL_GPIO_ReadPin(DT_GPIO_Port, DT_Pin))
 8001468:	2101      	movs	r1, #1
 800146a:	4813      	ldr	r0, [pc, #76]	@ (80014b8 <ReadCount+0x94>)
 800146c:	f002 feb8 	bl	80041e0 <HAL_GPIO_ReadPin>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d002      	beq.n	800147c <ReadCount+0x58>
		{

		    Count ++;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3301      	adds	r3, #1
 800147a:	607b      	str	r3, [r7, #4]
		}
		HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	2102      	movs	r1, #2
 8001480:	480d      	ldr	r0, [pc, #52]	@ (80014b8 <ReadCount+0x94>)
 8001482:	f002 fec4 	bl	800420e <HAL_GPIO_WritePin>
	for(i = 0; i <24; i++)//24
 8001486:	78fb      	ldrb	r3, [r7, #3]
 8001488:	3301      	adds	r3, #1
 800148a:	70fb      	strb	r3, [r7, #3]
 800148c:	78fb      	ldrb	r3, [r7, #3]
 800148e:	2b17      	cmp	r3, #23
 8001490:	d9e2      	bls.n	8001458 <ReadCount+0x34>
	}

	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_SET);
 8001492:	2201      	movs	r2, #1
 8001494:	2102      	movs	r1, #2
 8001496:	4808      	ldr	r0, [pc, #32]	@ (80014b8 <ReadCount+0x94>)
 8001498:	f002 feb9 	bl	800420e <HAL_GPIO_WritePin>
	Count = Count ^ 0x800000;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 80014a2:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2102      	movs	r1, #2
 80014a8:	4803      	ldr	r0, [pc, #12]	@ (80014b8 <ReadCount+0x94>)
 80014aa:	f002 feb0 	bl	800420e <HAL_GPIO_WritePin>
	return Count;
 80014ae:	687b      	ldr	r3, [r7, #4]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40010800 	.word	0x40010800

080014bc <WeightReal>:
*Function : 读取拉力值
*Parameter :   weight_real          实际拉力值
               weight_first         传感器首次数据
***********************************************************************************************/
uint32_t WeightReal(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0

   weight_real = ReadCount();//实际质量计算
 80014c0:	f7ff ffb0 	bl	8001424 <ReadCount>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4a15      	ldr	r2, [pc, #84]	@ (800151c <WeightReal+0x60>)
 80014c8:	6013      	str	r3, [r2, #0]
		if(weight_first>=weight_real)
 80014ca:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <WeightReal+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4b13      	ldr	r3, [pc, #76]	@ (800151c <WeightReal+0x60>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d30f      	bcc.n	80014f6 <WeightReal+0x3a>
		{

			weight_real = weight_first-weight_real;
 80014d6:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <WeightReal+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <WeightReal+0x60>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	4a0e      	ldr	r2, [pc, #56]	@ (800151c <WeightReal+0x60>)
 80014e2:	6013      	str	r3, [r2, #0]
			weight_real = weight_real/100;
 80014e4:	4b0d      	ldr	r3, [pc, #52]	@ (800151c <WeightReal+0x60>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001524 <WeightReal+0x68>)
 80014ea:	fba2 2303 	umull	r2, r3, r2, r3
 80014ee:	095b      	lsrs	r3, r3, #5
 80014f0:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <WeightReal+0x60>)
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	e00e      	b.n	8001514 <WeightReal+0x58>
			//printf("重量为：%dg\n",weight_real);
		}
		else
		{

			weight_real = weight_real-weight_first;
 80014f6:	4b09      	ldr	r3, [pc, #36]	@ (800151c <WeightReal+0x60>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <WeightReal+0x64>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	4a06      	ldr	r2, [pc, #24]	@ (800151c <WeightReal+0x60>)
 8001502:	6013      	str	r3, [r2, #0]
			weight_real = weight_real/100;
 8001504:	4b05      	ldr	r3, [pc, #20]	@ (800151c <WeightReal+0x60>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a06      	ldr	r2, [pc, #24]	@ (8001524 <WeightReal+0x68>)
 800150a:	fba2 2303 	umull	r2, r3, r2, r3
 800150e:	095b      	lsrs	r3, r3, #5
 8001510:	4a02      	ldr	r2, [pc, #8]	@ (800151c <WeightReal+0x60>)
 8001512:	6013      	str	r3, [r2, #0]
			//printf("重量为：-%dg\n",weight_real);
		}
		return weight_real;
 8001514:	4b01      	ldr	r3, [pc, #4]	@ (800151c <WeightReal+0x60>)
 8001516:	681b      	ldr	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000224 	.word	0x20000224
 8001520:	20000220 	.word	0x20000220
 8001524:	51eb851f 	.word	0x51eb851f

08001528 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800152c:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <MX_I2C1_Init+0x50>)
 800152e:	4a13      	ldr	r2, [pc, #76]	@ (800157c <MX_I2C1_Init+0x54>)
 8001530:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001532:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <MX_I2C1_Init+0x50>)
 8001534:	4a12      	ldr	r2, [pc, #72]	@ (8001580 <MX_I2C1_Init+0x58>)
 8001536:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001538:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <MX_I2C1_Init+0x50>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800153e:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <MX_I2C1_Init+0x50>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <MX_I2C1_Init+0x50>)
 8001546:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800154a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800154c:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <MX_I2C1_Init+0x50>)
 800154e:	2200      	movs	r2, #0
 8001550:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001552:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <MX_I2C1_Init+0x50>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001558:	4b07      	ldr	r3, [pc, #28]	@ (8001578 <MX_I2C1_Init+0x50>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <MX_I2C1_Init+0x50>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001564:	4804      	ldr	r0, [pc, #16]	@ (8001578 <MX_I2C1_Init+0x50>)
 8001566:	f002 fe8d 	bl	8004284 <HAL_I2C_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001570:	f000 fbe4 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000228 	.word	0x20000228
 800157c:	40005400 	.word	0x40005400
 8001580:	00061a80 	.word	0x00061a80

08001584 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <MX_I2C2_Init+0x50>)
 800158a:	4a13      	ldr	r2, [pc, #76]	@ (80015d8 <MX_I2C2_Init+0x54>)
 800158c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800158e:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <MX_I2C2_Init+0x50>)
 8001590:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <MX_I2C2_Init+0x58>)
 8001592:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001594:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <MX_I2C2_Init+0x50>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800159a:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <MX_I2C2_Init+0x50>)
 800159c:	2200      	movs	r2, #0
 800159e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <MX_I2C2_Init+0x50>)
 80015a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015a6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <MX_I2C2_Init+0x50>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015ae:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <MX_I2C2_Init+0x50>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b4:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <MX_I2C2_Init+0x50>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <MX_I2C2_Init+0x50>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015c0:	4804      	ldr	r0, [pc, #16]	@ (80015d4 <MX_I2C2_Init+0x50>)
 80015c2:	f002 fe5f 	bl	8004284 <HAL_I2C_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015cc:	f000 fbb6 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	2000027c 	.word	0x2000027c
 80015d8:	40005800 	.word	0x40005800
 80015dc:	000186a0 	.word	0x000186a0

080015e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	@ 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0318 	add.w	r3, r7, #24
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a2b      	ldr	r2, [pc, #172]	@ (80016a8 <HAL_I2C_MspInit+0xc8>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d124      	bne.n	800164a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001600:	4b2a      	ldr	r3, [pc, #168]	@ (80016ac <HAL_I2C_MspInit+0xcc>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	4a29      	ldr	r2, [pc, #164]	@ (80016ac <HAL_I2C_MspInit+0xcc>)
 8001606:	f043 0308 	orr.w	r3, r3, #8
 800160a:	6193      	str	r3, [r2, #24]
 800160c:	4b27      	ldr	r3, [pc, #156]	@ (80016ac <HAL_I2C_MspInit+0xcc>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001618:	23c0      	movs	r3, #192	@ 0xc0
 800161a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161c:	2312      	movs	r3, #18
 800161e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001624:	f107 0318 	add.w	r3, r7, #24
 8001628:	4619      	mov	r1, r3
 800162a:	4821      	ldr	r0, [pc, #132]	@ (80016b0 <HAL_I2C_MspInit+0xd0>)
 800162c:	f002 fc54 	bl	8003ed8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001630:	4b1e      	ldr	r3, [pc, #120]	@ (80016ac <HAL_I2C_MspInit+0xcc>)
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	4a1d      	ldr	r2, [pc, #116]	@ (80016ac <HAL_I2C_MspInit+0xcc>)
 8001636:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800163a:	61d3      	str	r3, [r2, #28]
 800163c:	4b1b      	ldr	r3, [pc, #108]	@ (80016ac <HAL_I2C_MspInit+0xcc>)
 800163e:	69db      	ldr	r3, [r3, #28]
 8001640:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001648:	e029      	b.n	800169e <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a19      	ldr	r2, [pc, #100]	@ (80016b4 <HAL_I2C_MspInit+0xd4>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d124      	bne.n	800169e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001654:	4b15      	ldr	r3, [pc, #84]	@ (80016ac <HAL_I2C_MspInit+0xcc>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a14      	ldr	r2, [pc, #80]	@ (80016ac <HAL_I2C_MspInit+0xcc>)
 800165a:	f043 0308 	orr.w	r3, r3, #8
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b12      	ldr	r3, [pc, #72]	@ (80016ac <HAL_I2C_MspInit+0xcc>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0308 	and.w	r3, r3, #8
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800166c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001672:	2312      	movs	r3, #18
 8001674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167a:	f107 0318 	add.w	r3, r7, #24
 800167e:	4619      	mov	r1, r3
 8001680:	480b      	ldr	r0, [pc, #44]	@ (80016b0 <HAL_I2C_MspInit+0xd0>)
 8001682:	f002 fc29 	bl	8003ed8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001686:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <HAL_I2C_MspInit+0xcc>)
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	4a08      	ldr	r2, [pc, #32]	@ (80016ac <HAL_I2C_MspInit+0xcc>)
 800168c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001690:	61d3      	str	r3, [r2, #28]
 8001692:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <HAL_I2C_MspInit+0xcc>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
}
 800169e:	bf00      	nop
 80016a0:	3728      	adds	r7, #40	@ 0x28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40005400 	.word	0x40005400
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010c00 	.word	0x40010c00
 80016b4:	40005800 	.word	0x40005800

080016b8 <update_display_and_transmit>:
  * @brief  更新 OLED 显示并通过 UART 输出当前体重、心率数据
  * @param  f_w 当前体重（单位：克）
  * @param  current_bpm 当前心率
  */
static void update_display_and_transmit(float f_w, uint32_t current_bpm)
{
 80016b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ba:	4604      	mov	r4, r0
  char message1[50];
  char message2[50];
  char msg[128];

  OLED_NewFrame();
  if (unit_mode == 0)
 80016bc:	4f30      	ldr	r7, [pc, #192]	@ (8001780 <update_display_and_transmit+0xc8>)
{
 80016be:	b0bd      	sub	sp, #244	@ 0xf4
 80016c0:	460d      	mov	r5, r1
  OLED_NewFrame();
 80016c2:	f000 fc7f 	bl	8001fc4 <OLED_NewFrame>
  if (unit_mode == 0)
 80016c6:	783b      	ldrb	r3, [r7, #0]
  {
    sprintf(message1, "体重：%.3fkg", f_w / 1000);
 80016c8:	4620      	mov	r0, r4
 80016ca:	492e      	ldr	r1, [pc, #184]	@ (8001784 <update_display_and_transmit+0xcc>)
  if (unit_mode == 0)
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d13a      	bne.n	8001746 <update_display_and_transmit+0x8e>
    sprintf(message1, "体重：%.3fkg", f_w / 1000);
 80016d0:	f7ff fbec 	bl	8000eac <__aeabi_fdiv>
 80016d4:	f7fe fea8 	bl	8000428 <__aeabi_f2d>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	492a      	ldr	r1, [pc, #168]	@ (8001788 <update_display_and_transmit+0xd0>)
  }
  else
  {
    sprintf(message1, "体重：%.3fLb", (f_w / 1000) * 2.204);
  }
  OLED_PrintString(0, 0, message1, &font16x16, OLED_COLOR_NORMAL);
 80016de:	2600      	movs	r6, #0
    sprintf(message1, "体重：%.3fLb", (f_w / 1000) * 2.204);
 80016e0:	a802      	add	r0, sp, #8
 80016e2:	f006 ff7b 	bl	80085dc <siprintf>
  OLED_PrintString(0, 0, message1, &font16x16, OLED_COLOR_NORMAL);
 80016e6:	4b29      	ldr	r3, [pc, #164]	@ (800178c <update_display_and_transmit+0xd4>)
 80016e8:	4631      	mov	r1, r6
 80016ea:	4630      	mov	r0, r6
 80016ec:	aa02      	add	r2, sp, #8
 80016ee:	9600      	str	r6, [sp, #0]
 80016f0:	f000 fe8d 	bl	800240e <OLED_PrintString>
  sprintf(message2, "心率：%dbpm", current_bpm);
 80016f4:	462a      	mov	r2, r5
 80016f6:	4926      	ldr	r1, [pc, #152]	@ (8001790 <update_display_and_transmit+0xd8>)
 80016f8:	a80f      	add	r0, sp, #60	@ 0x3c
 80016fa:	f006 ff6f 	bl	80085dc <siprintf>
  OLED_PrintString(0, 15, message2, &font16x16, OLED_COLOR_NORMAL);
 80016fe:	210f      	movs	r1, #15
 8001700:	4630      	mov	r0, r6
 8001702:	4b22      	ldr	r3, [pc, #136]	@ (800178c <update_display_and_transmit+0xd4>)
 8001704:	aa0f      	add	r2, sp, #60	@ 0x3c
 8001706:	9600      	str	r6, [sp, #0]
 8001708:	f000 fe81 	bl	800240e <OLED_PrintString>
  OLED_ShowFrame();
 800170c:	f000 fc66 	bl	8001fdc <OLED_ShowFrame>

  sprintf(msg, "体重：%.3f, 心率:%dbpm\r\n", (unit_mode == 0) ? (f_w/1000) : ((f_w/1000)*2.204), current_bpm);
 8001710:	783b      	ldrb	r3, [r7, #0]
 8001712:	4620      	mov	r0, r4
 8001714:	491b      	ldr	r1, [pc, #108]	@ (8001784 <update_display_and_transmit+0xcc>)
 8001716:	bb1b      	cbnz	r3, 8001760 <update_display_and_transmit+0xa8>
 8001718:	f7ff fbc8 	bl	8000eac <__aeabi_fdiv>
 800171c:	f7fe fe84 	bl	8000428 <__aeabi_f2d>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	9500      	str	r5, [sp, #0]
 8001726:	491b      	ldr	r1, [pc, #108]	@ (8001794 <update_display_and_transmit+0xdc>)
 8001728:	a81c      	add	r0, sp, #112	@ 0x70
 800172a:	f006 ff57 	bl	80085dc <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800172e:	a81c      	add	r0, sp, #112	@ 0x70
 8001730:	f7fe fd0e 	bl	8000150 <strlen>
 8001734:	f04f 33ff 	mov.w	r3, #4294967295
 8001738:	b282      	uxth	r2, r0
 800173a:	a91c      	add	r1, sp, #112	@ 0x70
 800173c:	4816      	ldr	r0, [pc, #88]	@ (8001798 <update_display_and_transmit+0xe0>)
 800173e:	f005 fa54 	bl	8006bea <HAL_UART_Transmit>
}
 8001742:	b03d      	add	sp, #244	@ 0xf4
 8001744:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sprintf(message1, "体重：%.3fLb", (f_w / 1000) * 2.204);
 8001746:	f7ff fbb1 	bl	8000eac <__aeabi_fdiv>
 800174a:	f7fe fe6d 	bl	8000428 <__aeabi_f2d>
 800174e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001778 <update_display_and_transmit+0xc0>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7fe fec0 	bl	80004d8 <__aeabi_dmul>
 8001758:	460b      	mov	r3, r1
 800175a:	4602      	mov	r2, r0
 800175c:	490f      	ldr	r1, [pc, #60]	@ (800179c <update_display_and_transmit+0xe4>)
 800175e:	e7be      	b.n	80016de <update_display_and_transmit+0x26>
  sprintf(msg, "体重：%.3f, 心率:%dbpm\r\n", (unit_mode == 0) ? (f_w/1000) : ((f_w/1000)*2.204), current_bpm);
 8001760:	f7ff fba4 	bl	8000eac <__aeabi_fdiv>
 8001764:	f7fe fe60 	bl	8000428 <__aeabi_f2d>
 8001768:	a303      	add	r3, pc, #12	@ (adr r3, 8001778 <update_display_and_transmit+0xc0>)
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	f7fe feb3 	bl	80004d8 <__aeabi_dmul>
 8001772:	e7d5      	b.n	8001720 <update_display_and_transmit+0x68>
 8001774:	f3af 8000 	nop.w
 8001778:	c083126f 	.word	0xc083126f
 800177c:	4001a1ca 	.word	0x4001a1ca
 8001780:	200002d0 	.word	0x200002d0
 8001784:	447a0000 	.word	0x447a0000
 8001788:	0800b010 	.word	0x0800b010
 800178c:	0800b000 	.word	0x0800b000
 8001790:	0800b030 	.word	0x0800b030
 8001794:	0800b03f 	.word	0x0800b03f
 8001798:	20000838 	.word	0x20000838
 800179c:	0800b020 	.word	0x0800b020

080017a0 <send_record>:
/**
  * @brief  根据索引发送记录数据（通过蓝牙命令读取记录）
  * @param  index 记录索引（0 表示第一组）
  */
static void send_record(uint8_t index)
{
 80017a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  char msg[128];
  if (index < recordCount)
 80017a4:	4b26      	ldr	r3, [pc, #152]	@ (8001840 <send_record+0xa0>)
{
 80017a6:	4604      	mov	r4, r0
  if (index < recordCount)
 80017a8:	781b      	ldrb	r3, [r3, #0]
{
 80017aa:	b0a4      	sub	sp, #144	@ 0x90
  if (index < recordCount)
 80017ac:	4283      	cmp	r3, r0
 80017ae:	f100 0601 	add.w	r6, r0, #1
 80017b2:	d939      	bls.n	8001828 <send_record+0x88>
  {
    float weight_in_unit = (unit_mode == 0) ? (records[index].weight / 1000.0f) : ((records[index].weight / 1000.0f) * 2.204);
 80017b4:	4d23      	ldr	r5, [pc, #140]	@ (8001844 <send_record+0xa4>)
 80017b6:	4924      	ldr	r1, [pc, #144]	@ (8001848 <send_record+0xa8>)
 80017b8:	f855 0030 	ldr.w	r0, [r5, r0, lsl #3]
 80017bc:	f7ff fb76 	bl	8000eac <__aeabi_fdiv>
 80017c0:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 800184c <send_record+0xac>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f898 7000 	ldrb.w	r7, [r8]
 80017ca:	b2ff      	uxtb	r7, r7
 80017cc:	b14f      	cbz	r7, 80017e2 <send_record+0x42>
 80017ce:	f7fe fe2b 	bl	8000428 <__aeabi_f2d>
 80017d2:	a319      	add	r3, pc, #100	@ (adr r3, 8001838 <send_record+0x98>)
 80017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d8:	f7fe fe7e 	bl	80004d8 <__aeabi_dmul>
 80017dc:	f7ff f954 	bl	8000a88 <__aeabi_d2f>
 80017e0:	4603      	mov	r3, r0
    const char* unitStr = (unit_mode == 0) ? "kg" : "Lb";
 80017e2:	f898 0000 	ldrb.w	r0, [r8]
 80017e6:	491a      	ldr	r1, [pc, #104]	@ (8001850 <send_record+0xb0>)
 80017e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001854 <send_record+0xb4>)
    sprintf(msg, "记录%d: 体重: %.3f%s, 心率:%dbpm\r\n", index + 1, weight_in_unit, unitStr, records[index].bpm);
 80017ea:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
    const char* unitStr = (unit_mode == 0) ? "kg" : "Lb";
 80017ee:	2800      	cmp	r0, #0
 80017f0:	bf08      	it	eq
 80017f2:	460a      	moveq	r2, r1
    sprintf(msg, "记录%d: 体重: %.3f%s, 心率:%dbpm\r\n", index + 1, weight_in_unit, unitStr, records[index].bpm);
 80017f4:	6869      	ldr	r1, [r5, #4]
 80017f6:	4618      	mov	r0, r3
 80017f8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80017fc:	f7fe fe14 	bl	8000428 <__aeabi_f2d>
 8001800:	4632      	mov	r2, r6
 8001802:	e9cd 0100 	strd	r0, r1, [sp]
 8001806:	4914      	ldr	r1, [pc, #80]	@ (8001858 <send_record+0xb8>)
 8001808:	a804      	add	r0, sp, #16
 800180a:	f006 fee7 	bl	80085dc <siprintf>
  }
  else
  {
    sprintf(msg, "记录%d不存在\r\n", index + 1);
  }
  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800180e:	a804      	add	r0, sp, #16
 8001810:	f7fe fc9e 	bl	8000150 <strlen>
 8001814:	f04f 33ff 	mov.w	r3, #4294967295
 8001818:	b282      	uxth	r2, r0
 800181a:	a904      	add	r1, sp, #16
 800181c:	480f      	ldr	r0, [pc, #60]	@ (800185c <send_record+0xbc>)
 800181e:	f005 f9e4 	bl	8006bea <HAL_UART_Transmit>
}
 8001822:	b024      	add	sp, #144	@ 0x90
 8001824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf(msg, "记录%d不存在\r\n", index + 1);
 8001828:	490d      	ldr	r1, [pc, #52]	@ (8001860 <send_record+0xc0>)
 800182a:	b2f2      	uxtb	r2, r6
 800182c:	a804      	add	r0, sp, #16
 800182e:	f006 fed5 	bl	80085dc <siprintf>
 8001832:	e7ec      	b.n	800180e <send_record+0x6e>
 8001834:	f3af 8000 	nop.w
 8001838:	c083126f 	.word	0xc083126f
 800183c:	4001a1ca 	.word	0x4001a1ca
 8001840:	200002d1 	.word	0x200002d1
 8001844:	200002d4 	.word	0x200002d4
 8001848:	447a0000 	.word	0x447a0000
 800184c:	200002d0 	.word	0x200002d0
 8001850:	0800b01d 	.word	0x0800b01d
 8001854:	0800b02d 	.word	0x0800b02d
 8001858:	0800b05d 	.word	0x0800b05d
 800185c:	20000838 	.word	0x20000838
 8001860:	0800b086 	.word	0x0800b086

08001864 <SaveRecordsToFlash>:
/**
  * @brief 将记录数组中的数据写入 W25Q64 Flash
  * 每组记录占用 12 字节：4字节体重 + 4字节保留 + 4字节心率
  */
void SaveRecordsToFlash(void)
{
 8001864:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t buffer[12];
  for (uint8_t i = 0; i < recordCount; i++)
 8001866:	2400      	movs	r4, #0
 8001868:	4e0b      	ldr	r6, [pc, #44]	@ (8001898 <SaveRecordsToFlash+0x34>)
  {
    uint32_t address = W25Q64_BASE_ADDR + (i * 12);
    memcpy(&buffer[0], &records[i].weight, 4);
 800186a:	4d0c      	ldr	r5, [pc, #48]	@ (800189c <SaveRecordsToFlash+0x38>)
  for (uint8_t i = 0; i < recordCount; i++)
 800186c:	7833      	ldrb	r3, [r6, #0]
 800186e:	b2e0      	uxtb	r0, r4
 8001870:	4283      	cmp	r3, r0
 8001872:	d801      	bhi.n	8001878 <SaveRecordsToFlash+0x14>
    memset(&buffer[4], 0, 4); // 保留
    memcpy(&buffer[8], &records[i].bpm, 4);
    W25Q64_WriteData(address, buffer, 12);
  }
}
 8001874:	b004      	add	sp, #16
 8001876:	bd70      	pop	{r4, r5, r6, pc}
    memcpy(&buffer[0], &records[i].weight, 4);
 8001878:	f855 2030 	ldr.w	r2, [r5, r0, lsl #3]
 800187c:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
 8001880:	9201      	str	r2, [sp, #4]
    memset(&buffer[4], 0, 4); // 保留
 8001882:	2200      	movs	r2, #0
 8001884:	9202      	str	r2, [sp, #8]
    W25Q64_WriteData(address, buffer, 12);
 8001886:	220c      	movs	r2, #12
    memcpy(&buffer[8], &records[i].bpm, 4);
 8001888:	685b      	ldr	r3, [r3, #4]
    W25Q64_WriteData(address, buffer, 12);
 800188a:	4350      	muls	r0, r2
 800188c:	a901      	add	r1, sp, #4
    memcpy(&buffer[8], &records[i].bpm, 4);
 800188e:	9303      	str	r3, [sp, #12]
    W25Q64_WriteData(address, buffer, 12);
 8001890:	3401      	adds	r4, #1
 8001892:	f000 ff01 	bl	8002698 <W25Q64_WriteData>
  for (uint8_t i = 0; i < recordCount; i++)
 8001896:	e7e9      	b.n	800186c <SaveRecordsToFlash+0x8>
 8001898:	200002d1 	.word	0x200002d1
 800189c:	200002d4 	.word	0x200002d4

080018a0 <LoadRecordsFromFlash>:

/**
  * @brief 从 W25Q64 Flash 中读取记录至数组
  */
void LoadRecordsFromFlash(void)
{
 80018a0:	b530      	push	{r4, r5, lr}
 80018a2:	2400      	movs	r4, #0
 80018a4:	4d0a      	ldr	r5, [pc, #40]	@ (80018d0 <LoadRecordsFromFlash+0x30>)
 80018a6:	b085      	sub	sp, #20
  uint8_t buffer[12];
  for (uint8_t i = 0; i < 3; i++)
  {
    uint32_t address = W25Q64_BASE_ADDR + (i * 12);
    W25Q64_ReadData(address, buffer, 12);
 80018a8:	4620      	mov	r0, r4
 80018aa:	220c      	movs	r2, #12
 80018ac:	a901      	add	r1, sp, #4
 80018ae:	f000 ff2b 	bl	8002708 <W25Q64_ReadData>
    memcpy(&records[i].weight, &buffer[0], 4);
 80018b2:	9b01      	ldr	r3, [sp, #4]
  for (uint8_t i = 0; i < 3; i++)
 80018b4:	340c      	adds	r4, #12
    memcpy(&records[i].weight, &buffer[0], 4);
 80018b6:	602b      	str	r3, [r5, #0]
    memcpy(&records[i].bpm, &buffer[8], 4);
 80018b8:	9b03      	ldr	r3, [sp, #12]
  for (uint8_t i = 0; i < 3; i++)
 80018ba:	2c24      	cmp	r4, #36	@ 0x24
    memcpy(&records[i].bpm, &buffer[8], 4);
 80018bc:	606b      	str	r3, [r5, #4]
  for (uint8_t i = 0; i < 3; i++)
 80018be:	f105 0508 	add.w	r5, r5, #8
 80018c2:	d1f1      	bne.n	80018a8 <LoadRecordsFromFlash+0x8>
  }
  recordCount = 3;
 80018c4:	2203      	movs	r2, #3
 80018c6:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <LoadRecordsFromFlash+0x34>)
 80018c8:	701a      	strb	r2, [r3, #0]
}
 80018ca:	b005      	add	sp, #20
 80018cc:	bd30      	pop	{r4, r5, pc}
 80018ce:	bf00      	nop
 80018d0:	200002d4 	.word	0x200002d4
 80018d4:	200002d1 	.word	0x200002d1

080018d8 <HAL_UARTEx_RxEventCallback>:

/**
  * @brief UART DMA 空闲接收回调函数，用于解析蓝牙命令“b1”, “b2”, “b3”, 以及 “load”
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80018d8:	b570      	push	{r4, r5, r6, lr}
 80018da:	460a      	mov	r2, r1
  if (huart->Instance == USART1)
 80018dc:	4b2b      	ldr	r3, [pc, #172]	@ (800198c <HAL_UARTEx_RxEventCallback+0xb4>)
 80018de:	6801      	ldr	r1, [r0, #0]
{
 80018e0:	b088      	sub	sp, #32
  if (huart->Instance == USART1)
 80018e2:	4299      	cmp	r1, r3
 80018e4:	d11d      	bne.n	8001922 <HAL_UARTEx_RxEventCallback+0x4a>
  {
    if (Size >= CMD_LENGTH)
 80018e6:	2a01      	cmp	r2, #1
 80018e8:	d910      	bls.n	800190c <HAL_UARTEx_RxEventCallback+0x34>
    {
      char cmd[10] = {0};
 80018ea:	2300      	movs	r3, #0
      strncpy(cmd, (char*)receiveData, Size);
 80018ec:	4928      	ldr	r1, [pc, #160]	@ (8001990 <HAL_UARTEx_RxEventCallback+0xb8>)
 80018ee:	4668      	mov	r0, sp
      char cmd[10] = {0};
 80018f0:	e9cd 3300 	strd	r3, r3, [sp]
 80018f4:	f8ad 3008 	strh.w	r3, [sp, #8]
      strncpy(cmd, (char*)receiveData, Size);
 80018f8:	f006 feff 	bl	80086fa <strncpy>
      if (strncmp(cmd, "b1", 2) == 0)
 80018fc:	2202      	movs	r2, #2
 80018fe:	4668      	mov	r0, sp
 8001900:	4924      	ldr	r1, [pc, #144]	@ (8001994 <HAL_UARTEx_RxEventCallback+0xbc>)
 8001902:	f006 fee8 	bl	80086d6 <strncmp>
 8001906:	b970      	cbnz	r0, 8001926 <HAL_UARTEx_RxEventCallback+0x4e>
      {
        send_record(0);
      }
      else if (strncmp(cmd, "b2", 2) == 0)
      {
        send_record(1);
 8001908:	f7ff ff4a 	bl	80017a0 <send_record>
        LoadRecordsFromFlash();
        char loadMsg[] = "Records loaded\r\n";
        HAL_UART_Transmit(&huart1, (uint8_t*)loadMsg, strlen(loadMsg), HAL_MAX_DELAY);
      }
    }
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, receiveData, sizeof(receiveData));
 800190c:	2232      	movs	r2, #50	@ 0x32
 800190e:	4920      	ldr	r1, [pc, #128]	@ (8001990 <HAL_UARTEx_RxEventCallback+0xb8>)
 8001910:	4821      	ldr	r0, [pc, #132]	@ (8001998 <HAL_UARTEx_RxEventCallback+0xc0>)
 8001912:	f005 f9f5 	bl	8006d00 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001916:	4b21      	ldr	r3, [pc, #132]	@ (800199c <HAL_UARTEx_RxEventCallback+0xc4>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	6813      	ldr	r3, [r2, #0]
 800191c:	f023 0304 	bic.w	r3, r3, #4
 8001920:	6013      	str	r3, [r2, #0]
  }
}
 8001922:	b008      	add	sp, #32
 8001924:	bd70      	pop	{r4, r5, r6, pc}
      else if (strncmp(cmd, "b2", 2) == 0)
 8001926:	2202      	movs	r2, #2
 8001928:	4668      	mov	r0, sp
 800192a:	491d      	ldr	r1, [pc, #116]	@ (80019a0 <HAL_UARTEx_RxEventCallback+0xc8>)
 800192c:	f006 fed3 	bl	80086d6 <strncmp>
 8001930:	b908      	cbnz	r0, 8001936 <HAL_UARTEx_RxEventCallback+0x5e>
        send_record(1);
 8001932:	2001      	movs	r0, #1
 8001934:	e7e8      	b.n	8001908 <HAL_UARTEx_RxEventCallback+0x30>
      else if (strncmp(cmd, "b3", 2) == 0)
 8001936:	2202      	movs	r2, #2
 8001938:	4668      	mov	r0, sp
 800193a:	491a      	ldr	r1, [pc, #104]	@ (80019a4 <HAL_UARTEx_RxEventCallback+0xcc>)
 800193c:	f006 fecb 	bl	80086d6 <strncmp>
 8001940:	b908      	cbnz	r0, 8001946 <HAL_UARTEx_RxEventCallback+0x6e>
        send_record(2);
 8001942:	2002      	movs	r0, #2
 8001944:	e7e0      	b.n	8001908 <HAL_UARTEx_RxEventCallback+0x30>
      else if (strncmp(cmd, "load", 4) == 0)
 8001946:	2204      	movs	r2, #4
 8001948:	4668      	mov	r0, sp
 800194a:	4917      	ldr	r1, [pc, #92]	@ (80019a8 <HAL_UARTEx_RxEventCallback+0xd0>)
 800194c:	f006 fec3 	bl	80086d6 <strncmp>
 8001950:	2800      	cmp	r0, #0
 8001952:	d1db      	bne.n	800190c <HAL_UARTEx_RxEventCallback+0x34>
        LoadRecordsFromFlash();
 8001954:	f7ff ffa4 	bl	80018a0 <LoadRecordsFromFlash>
        char loadMsg[] = "Records loaded\r\n";
 8001958:	aa03      	add	r2, sp, #12
 800195a:	4615      	mov	r5, r2
 800195c:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <HAL_UARTEx_RxEventCallback+0xd4>)
 800195e:	f103 0610 	add.w	r6, r3, #16
 8001962:	4614      	mov	r4, r2
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	6859      	ldr	r1, [r3, #4]
 8001968:	3308      	adds	r3, #8
 800196a:	c403      	stmia	r4!, {r0, r1}
 800196c:	42b3      	cmp	r3, r6
 800196e:	4622      	mov	r2, r4
 8001970:	d1f7      	bne.n	8001962 <HAL_UARTEx_RxEventCallback+0x8a>
 8001972:	781b      	ldrb	r3, [r3, #0]
        HAL_UART_Transmit(&huart1, (uint8_t*)loadMsg, strlen(loadMsg), HAL_MAX_DELAY);
 8001974:	4628      	mov	r0, r5
        char loadMsg[] = "Records loaded\r\n";
 8001976:	7023      	strb	r3, [r4, #0]
        HAL_UART_Transmit(&huart1, (uint8_t*)loadMsg, strlen(loadMsg), HAL_MAX_DELAY);
 8001978:	f7fe fbea 	bl	8000150 <strlen>
 800197c:	f04f 33ff 	mov.w	r3, #4294967295
 8001980:	b282      	uxth	r2, r0
 8001982:	4629      	mov	r1, r5
 8001984:	4804      	ldr	r0, [pc, #16]	@ (8001998 <HAL_UARTEx_RxEventCallback+0xc0>)
 8001986:	f005 f930 	bl	8006bea <HAL_UART_Transmit>
 800198a:	e7bf      	b.n	800190c <HAL_UARTEx_RxEventCallback+0x34>
 800198c:	40013800 	.word	0x40013800
 8001990:	2000031c 	.word	0x2000031c
 8001994:	0800b09a 	.word	0x0800b09a
 8001998:	20000838 	.word	0x20000838
 800199c:	200008c4 	.word	0x200008c4
 80019a0:	0800b09d 	.word	0x0800b09d
 80019a4:	0800b0a0 	.word	0x0800b0a0
 80019a8:	0800b0a3 	.word	0x0800b0a3
 80019ac:	0800b0a8 	.word	0x0800b0a8

080019b0 <SystemClock_Config>:

/**
  * @brief 系统时钟配置（此处代码基于 CubeMX 生成，请根据实际情况调整）
  */
void SystemClock_Config(void)
{
 80019b0:	b510      	push	{r4, lr}
 80019b2:	b090      	sub	sp, #64	@ 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b4:	2214      	movs	r2, #20
 80019b6:	2100      	movs	r1, #0
 80019b8:	a808      	add	r0, sp, #32
 80019ba:	f006 fe84 	bl	80086c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019be:	2214      	movs	r2, #20
 80019c0:	2100      	movs	r1, #0
 80019c2:	a801      	add	r0, sp, #4
 80019c4:	f006 fe7f 	bl	80086c6 <memset>
  /** 配置 RCC 振荡器 */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c8:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019ce:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019d0:	e9cd 430d 	strd	r4, r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019d8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019dc:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019de:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019e0:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e2:	f003 fe4d 	bl	8005680 <HAL_RCC_OscConfig>
 80019e6:	b108      	cbz	r0, 80019ec <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e8:	b672      	cpsid	i
  * @brief  错误处理函数
  */
void Error_Handler(void)
{
  __disable_irq();
  while(1)
 80019ea:	e7fe      	b.n	80019ea <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ec:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ee:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019f8:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019fc:	4621      	mov	r1, r4
 80019fe:	a801      	add	r0, sp, #4
 8001a00:	f004 f8c0 	bl	8005b84 <HAL_RCC_ClockConfig>
 8001a04:	b108      	cbz	r0, 8001a0a <SystemClock_Config+0x5a>
 8001a06:	b672      	cpsid	i
  while(1)
 8001a08:	e7fe      	b.n	8001a08 <SystemClock_Config+0x58>
}
 8001a0a:	b010      	add	sp, #64	@ 0x40
 8001a0c:	bd10      	pop	{r4, pc}
	...

08001a10 <main>:
{
 8001a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a14:	b0b3      	sub	sp, #204	@ 0xcc
  HAL_Init();
 8001a16:	f001 f8f7 	bl	8002c08 <HAL_Init>
  SystemClock_Config();
 8001a1a:	f7ff ffc9 	bl	80019b0 <SystemClock_Config>
  MX_GPIO_Init();
 8001a1e:	f7ff fc55 	bl	80012cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001a22:	f7ff fc2d 	bl	8001280 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001a26:	f000 fff5 	bl	8002a14 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001a2a:	f7ff fd7d 	bl	8001528 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001a2e:	f7ff fda9 	bl	8001584 <MX_I2C2_Init>
  MX_ADC1_Init();
 8001a32:	f7ff fb4d 	bl	80010d0 <MX_ADC1_Init>
  MX_SPI1_Init();   // SPI 用于 W25Q64 Flash 存储
 8001a36:	f000 fd91 	bl	800255c <MX_SPI1_Init>
  HAL_Delay(100);
 8001a3a:	2064      	movs	r0, #100	@ 0x64
 8001a3c:	f001 f946 	bl	8002ccc <HAL_Delay>
  OLED_Init();
 8001a40:	f000 fa64 	bl	8001f0c <OLED_Init>
  ADC_Init();
 8001a44:	f7ff fb82 	bl	800114c <ADC_Init>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, receiveData, sizeof(receiveData));
 8001a48:	2232      	movs	r2, #50	@ 0x32
 8001a4a:	49a3      	ldr	r1, [pc, #652]	@ (8001cd8 <main+0x2c8>)
 8001a4c:	48a3      	ldr	r0, [pc, #652]	@ (8001cdc <main+0x2cc>)
 8001a4e:	f005 f957 	bl	8006d00 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001a52:	4ba3      	ldr	r3, [pc, #652]	@ (8001ce0 <main+0x2d0>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	6813      	ldr	r3, [r2, #0]
 8001a58:	f023 0304 	bic.w	r3, r3, #4
 8001a5c:	6013      	str	r3, [r2, #0]
  weight_first = ReadCount();
 8001a5e:	f7ff fce1 	bl	8001424 <ReadCount>
 8001a62:	4ba0      	ldr	r3, [pc, #640]	@ (8001ce4 <main+0x2d4>)
 8001a64:	6018      	str	r0, [r3, #0]
  if (MAX30102_Init(&hi2c1) != HAL_OK)
 8001a66:	48a0      	ldr	r0, [pc, #640]	@ (8001ce8 <main+0x2d8>)
 8001a68:	f000 f96a 	bl	8001d40 <MAX30102_Init>
 8001a6c:	2800      	cmp	r0, #0
 8001a6e:	d139      	bne.n	8001ae4 <main+0xd4>
    if (voltage < lowVoltageThreshold)
 8001a70:	f8df 8278 	ldr.w	r8, [pc, #632]	@ 8001cec <main+0x2dc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a74:	4f9e      	ldr	r7, [pc, #632]	@ (8001cf0 <main+0x2e0>)
    if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET)
 8001a76:	4e9f      	ldr	r6, [pc, #636]	@ (8001cf4 <main+0x2e4>)
    adcValue = ADC_ReadValue();
 8001a78:	f7ff fbca 	bl	8001210 <ADC_ReadValue>
    voltage = ADC_ConvertToVoltage(adcValue);
 8001a7c:	f7ff fbe6 	bl	800124c <ADC_ConvertToVoltage>
    if (voltage < lowVoltageThreshold)
 8001a80:	4641      	mov	r1, r8
 8001a82:	f7ff fafd 	bl	8001080 <__aeabi_fcmplt>
 8001a86:	b1e8      	cbz	r0, 8001ac4 <main+0xb4>
      OLED_NewFrame();
 8001a88:	f000 fa9c 	bl	8001fc4 <OLED_NewFrame>
      sprintf(msg, "Low Battery");
 8001a8c:	499a      	ldr	r1, [pc, #616]	@ (8001cf8 <main+0x2e8>)
 8001a8e:	a812      	add	r0, sp, #72	@ 0x48
 8001a90:	f006 febd 	bl	800880e <strcpy>
      OLED_PrintString(0, 15, msg, &font16x16, OLED_COLOR_NORMAL);
 8001a94:	2000      	movs	r0, #0
 8001a96:	4b99      	ldr	r3, [pc, #612]	@ (8001cfc <main+0x2ec>)
 8001a98:	210f      	movs	r1, #15
 8001a9a:	9000      	str	r0, [sp, #0]
 8001a9c:	aa12      	add	r2, sp, #72	@ 0x48
 8001a9e:	f000 fcb6 	bl	800240e <OLED_PrintString>
      OLED_ShowFrame();
 8001aa2:	f000 fa9b 	bl	8001fdc <OLED_ShowFrame>
      HAL_Delay(5000);
 8001aa6:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001aaa:	f001 f90f 	bl	8002ccc <HAL_Delay>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab4:	61fb      	str	r3, [r7, #28]
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001abc:	9302      	str	r3, [sp, #8]
 8001abe:	9b02      	ldr	r3, [sp, #8]
      HAL_PWR_EnterSTANDBYMode();
 8001ac0:	f003 fdc6 	bl	8005650 <HAL_PWR_EnterSTANDBYMode>
    weight_print = WeightReal();
 8001ac4:	f7ff fcfa 	bl	80014bc <WeightReal>
 8001ac8:	4b8d      	ldr	r3, [pc, #564]	@ (8001d00 <main+0x2f0>)
 8001aca:	6018      	str	r0, [r3, #0]
    float f_w = (float)weight_print;
 8001acc:	f7ff f8e2 	bl	8000c94 <__aeabi_ui2f>
    if (MAX30102_ReadFIFO(&hi2c1, fifoData, 6) != HAL_OK)
 8001ad0:	2206      	movs	r2, #6
    float f_w = (float)weight_print;
 8001ad2:	4681      	mov	r9, r0
    if (MAX30102_ReadFIFO(&hi2c1, fifoData, 6) != HAL_OK)
 8001ad4:	a903      	add	r1, sp, #12
 8001ad6:	4884      	ldr	r0, [pc, #528]	@ (8001ce8 <main+0x2d8>)
 8001ad8:	f000 f9d6 	bl	8001e88 <MAX30102_ReadFIFO>
 8001adc:	4605      	mov	r5, r0
 8001ade:	b118      	cbz	r0, 8001ae8 <main+0xd8>
 8001ae0:	b672      	cpsid	i
  while(1)
 8001ae2:	e7fe      	b.n	8001ae2 <main+0xd2>
 8001ae4:	b672      	cpsid	i
 8001ae6:	e7fe      	b.n	8001ae6 <main+0xd6>
    uint32_t irVal  = (((uint32_t)fifoData[3] << 16) | ((uint32_t)fifoData[4] << 8) | fifoData[5]) & 0x03FFFF;
 8001ae8:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8001aec:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001af0:	0224      	lsls	r4, r4, #8
 8001af2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001af6:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8001afa:	431c      	orrs	r4, r3
    uint32_t currentTime = HAL_GetTick();
 8001afc:	f001 f8dc 	bl	8002cb8 <HAL_GetTick>
    if (irVal < NO_SIGNAL_THRESHOLD)
 8001b00:	f247 532f 	movw	r3, #29999	@ 0x752f
    uint32_t irVal  = (((uint32_t)fifoData[3] << 16) | ((uint32_t)fifoData[4] << 8) | fifoData[5]) & 0x03FFFF;
 8001b04:	f3c4 0411 	ubfx	r4, r4, #0, #18
    if (irVal < NO_SIGNAL_THRESHOLD)
 8001b08:	429c      	cmp	r4, r3
    uint32_t currentTime = HAL_GetTick();
 8001b0a:	4682      	mov	sl, r0
    if (irVal < NO_SIGNAL_THRESHOLD)
 8001b0c:	4a7d      	ldr	r2, [pc, #500]	@ (8001d04 <main+0x2f4>)
 8001b0e:	497e      	ldr	r1, [pc, #504]	@ (8001d08 <main+0x2f8>)
 8001b10:	d819      	bhi.n	8001b46 <main+0x136>
      bpm = 0;
 8001b12:	4b7e      	ldr	r3, [pc, #504]	@ (8001d0c <main+0x2fc>)
      prevIR = irVal;
 8001b14:	6014      	str	r4, [r2, #0]
      bpm = 0;
 8001b16:	601d      	str	r5, [r3, #0]
      lastBeatTime = currentTime;
 8001b18:	4b7d      	ldr	r3, [pc, #500]	@ (8001d10 <main+0x300>)
      if (currentTime - lastOutputTime >= 500)
 8001b1a:	4c7e      	ldr	r4, [pc, #504]	@ (8001d14 <main+0x304>)
      lastBeatTime = currentTime;
 8001b1c:	6018      	str	r0, [r3, #0]
      beatCount = 0;
 8001b1e:	4b7e      	ldr	r3, [pc, #504]	@ (8001d18 <main+0x308>)
      prevDiff = 0;
 8001b20:	600d      	str	r5, [r1, #0]
      beatCount = 0;
 8001b22:	701d      	strb	r5, [r3, #0]
      beatIndex = 0;
 8001b24:	4b7d      	ldr	r3, [pc, #500]	@ (8001d1c <main+0x30c>)
 8001b26:	701d      	strb	r5, [r3, #0]
      if (currentTime - lastOutputTime >= 500)
 8001b28:	6823      	ldr	r3, [r4, #0]
 8001b2a:	1ac3      	subs	r3, r0, r3
 8001b2c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b30:	d305      	bcc.n	8001b3e <main+0x12e>
        update_display_and_transmit(f_w, bpm);
 8001b32:	4629      	mov	r1, r5
 8001b34:	4648      	mov	r0, r9
 8001b36:	f7ff fdbf 	bl	80016b8 <update_display_and_transmit>
        lastOutputTime = currentTime;
 8001b3a:	f8c4 a000 	str.w	sl, [r4]
      HAL_Delay(5);
 8001b3e:	2005      	movs	r0, #5
 8001b40:	f001 f8c4 	bl	8002ccc <HAL_Delay>
      continue;
 8001b44:	e798      	b.n	8001a78 <main+0x68>
    if ((prevDiff > 0) && (diff < 0) && (prevIR > BEAT_THRESHOLD) &&
 8001b46:	680b      	ldr	r3, [r1, #0]
    int32_t diff = (int32_t)irVal - (int32_t)prevIR;
 8001b48:	6815      	ldr	r5, [r2, #0]
    if ((prevDiff > 0) && (diff < 0) && (prevIR > BEAT_THRESHOLD) &&
 8001b4a:	2b00      	cmp	r3, #0
    int32_t diff = (int32_t)irVal - (int32_t)prevIR;
 8001b4c:	eba4 0005 	sub.w	r0, r4, r5
    if ((prevDiff > 0) && (diff < 0) && (prevIR > BEAT_THRESHOLD) &&
 8001b50:	dd44      	ble.n	8001bdc <main+0x1cc>
 8001b52:	2800      	cmp	r0, #0
 8001b54:	da42      	bge.n	8001bdc <main+0x1cc>
 8001b56:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8001b5a:	429d      	cmp	r5, r3
 8001b5c:	d93e      	bls.n	8001bdc <main+0x1cc>
        ((currentTime - lastBeatTime) >= MIN_BEAT_INTERVAL))
 8001b5e:	f8df c1b0 	ldr.w	ip, [pc, #432]	@ 8001d10 <main+0x300>
 8001b62:	f8dc 3000 	ldr.w	r3, [ip]
 8001b66:	ebaa 0503 	sub.w	r5, sl, r3
    if ((prevDiff > 0) && (diff < 0) && (prevIR > BEAT_THRESHOLD) &&
 8001b6a:	f5b5 7fc8 	cmp.w	r5, #400	@ 0x190
 8001b6e:	d335      	bcc.n	8001bdc <main+0x1cc>
      beatInterval = currentTime - lastBeatTime;
 8001b70:	4b6b      	ldr	r3, [pc, #428]	@ (8001d20 <main+0x310>)
        lastBeatTime = currentTime;
 8001b72:	f8cc a000 	str.w	sl, [ip]
      beatInterval = currentTime - lastBeatTime;
 8001b76:	601d      	str	r5, [r3, #0]
      if (beatInterval >= MIN_BEAT_INTERVAL && beatInterval <= MAX_BEAT_INTERVAL)
 8001b78:	f5a5 73c8 	sub.w	r3, r5, #400	@ 0x190
 8001b7c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8001b80:	d82c      	bhi.n	8001bdc <main+0x1cc>
        beatIntervals[beatIndex] = beatInterval;
 8001b82:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8001d1c <main+0x30c>
 8001b86:	f8df e19c 	ldr.w	lr, [pc, #412]	@ 8001d24 <main+0x314>
 8001b8a:	f89c 3000 	ldrb.w	r3, [ip]
 8001b8e:	f84e 5023 	str.w	r5, [lr, r3, lsl #2]
        beatIndex = (beatIndex + 1) % MOVING_AVG_SIZE;
 8001b92:	2505      	movs	r5, #5
 8001b94:	3301      	adds	r3, #1
 8001b96:	fbb3 f5f5 	udiv	r5, r3, r5
 8001b9a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001b9e:	1b5b      	subs	r3, r3, r5
        if (beatCount < MOVING_AVG_SIZE)
 8001ba0:	4d5d      	ldr	r5, [pc, #372]	@ (8001d18 <main+0x308>)
        beatIndex = (beatIndex + 1) % MOVING_AVG_SIZE;
 8001ba2:	f88c 3000 	strb.w	r3, [ip]
        if (beatCount < MOVING_AVG_SIZE)
 8001ba6:	782b      	ldrb	r3, [r5, #0]
 8001ba8:	f8df e178 	ldr.w	lr, [pc, #376]	@ 8001d24 <main+0x314>
 8001bac:	2b04      	cmp	r3, #4
          beatCount++;
 8001bae:	bf9c      	itt	ls
 8001bb0:	3301      	addls	r3, #1
 8001bb2:	702b      	strbls	r3, [r5, #0]
        for (uint8_t i = 0; i < beatCount; i++)
 8001bb4:	f895 c000 	ldrb.w	ip, [r5]
 8001bb8:	2500      	movs	r5, #0
        uint32_t sumIntervals = 0;
 8001bba:	462b      	mov	r3, r5
        for (uint8_t i = 0; i < beatCount; i++)
 8001bbc:	fa5f fb85 	uxtb.w	fp, r5
 8001bc0:	45dc      	cmp	ip, fp
 8001bc2:	f200 8084 	bhi.w	8001cce <main+0x2be>
        bpm = (avgInterval > 0) ? (60000 / avgInterval) : 0;
 8001bc6:	459c      	cmp	ip, r3
        uint32_t avgInterval = sumIntervals / beatCount;
 8001bc8:	bf9b      	ittet	ls
 8001bca:	fbb3 f3fc 	udivls	r3, r3, ip
        bpm = (avgInterval > 0) ? (60000 / avgInterval) : 0;
 8001bce:	f64e 2560 	movwls	r5, #60000	@ 0xea60
 8001bd2:	2300      	movhi	r3, #0
 8001bd4:	fbb5 f3f3 	udivls	r3, r5, r3
 8001bd8:	4d4c      	ldr	r5, [pc, #304]	@ (8001d0c <main+0x2fc>)
 8001bda:	602b      	str	r3, [r5, #0]
    prevIR = irVal;
 8001bdc:	6014      	str	r4, [r2, #0]
    if (currentTime - lastOutputTime >= 500)
 8001bde:	4c4d      	ldr	r4, [pc, #308]	@ (8001d14 <main+0x304>)
    prevDiff = diff;
 8001be0:	6008      	str	r0, [r1, #0]
    if (currentTime - lastOutputTime >= 500)
 8001be2:	6823      	ldr	r3, [r4, #0]
 8001be4:	ebaa 0303 	sub.w	r3, sl, r3
 8001be8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001bec:	d306      	bcc.n	8001bfc <main+0x1ec>
      update_display_and_transmit(f_w, bpm);
 8001bee:	4b47      	ldr	r3, [pc, #284]	@ (8001d0c <main+0x2fc>)
 8001bf0:	4648      	mov	r0, r9
 8001bf2:	6819      	ldr	r1, [r3, #0]
 8001bf4:	f7ff fd60 	bl	80016b8 <update_display_and_transmit>
      lastOutputTime = currentTime;
 8001bf8:	f8c4 a000 	str.w	sl, [r4]
    if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET)
 8001bfc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c00:	4630      	mov	r0, r6
 8001c02:	f002 faed 	bl	80041e0 <HAL_GPIO_ReadPin>
 8001c06:	b960      	cbnz	r0, 8001c22 <main+0x212>
      unit_mode = (unit_mode == 0) ? 1 : 0;
 8001c08:	4a47      	ldr	r2, [pc, #284]	@ (8001d28 <main+0x318>)
 8001c0a:	7813      	ldrb	r3, [r2, #0]
 8001c0c:	fab3 f383 	clz	r3, r3
 8001c10:	095b      	lsrs	r3, r3, #5
 8001c12:	7013      	strb	r3, [r2, #0]
      while (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET) {}
 8001c14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c18:	4630      	mov	r0, r6
 8001c1a:	f002 fae1 	bl	80041e0 <HAL_GPIO_ReadPin>
 8001c1e:	2800      	cmp	r0, #0
 8001c20:	d0f8      	beq.n	8001c14 <main+0x204>
    if (HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin) == GPIO_PIN_RESET)
 8001c22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c26:	4630      	mov	r0, r6
 8001c28:	f002 fada 	bl	80041e0 <HAL_GPIO_ReadPin>
 8001c2c:	bb18      	cbnz	r0, 8001c76 <main+0x266>
      if (recordCount < 3)
 8001c2e:	493f      	ldr	r1, [pc, #252]	@ (8001d2c <main+0x31c>)
 8001c30:	780a      	ldrb	r2, [r1, #0]
 8001c32:	2a02      	cmp	r2, #2
 8001c34:	d818      	bhi.n	8001c68 <main+0x258>
        records[recordCount].weight = f_w;
 8001c36:	4b3e      	ldr	r3, [pc, #248]	@ (8001d30 <main+0x320>)
        records[recordCount].bpm = bpm;
 8001c38:	4834      	ldr	r0, [pc, #208]	@ (8001d0c <main+0x2fc>)
        records[recordCount].weight = f_w;
 8001c3a:	f843 9032 	str.w	r9, [r3, r2, lsl #3]
        records[recordCount].bpm = bpm;
 8001c3e:	6800      	ldr	r0, [r0, #0]
 8001c40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
        recordCount++;
 8001c44:	3201      	adds	r2, #1
 8001c46:	b2d2      	uxtb	r2, r2
        records[recordCount].bpm = bpm;
 8001c48:	6058      	str	r0, [r3, #4]
        recordCount++;
 8001c4a:	700a      	strb	r2, [r1, #0]
        sprintf(regMsg, "记录%d已存储\r\n", recordCount);
 8001c4c:	a805      	add	r0, sp, #20
 8001c4e:	4939      	ldr	r1, [pc, #228]	@ (8001d34 <main+0x324>)
 8001c50:	f006 fcc4 	bl	80085dc <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)regMsg, strlen(regMsg), HAL_MAX_DELAY);
 8001c54:	a805      	add	r0, sp, #20
 8001c56:	f7fe fa7b 	bl	8000150 <strlen>
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	b282      	uxth	r2, r0
 8001c60:	a905      	add	r1, sp, #20
 8001c62:	481e      	ldr	r0, [pc, #120]	@ (8001cdc <main+0x2cc>)
 8001c64:	f004 ffc1 	bl	8006bea <HAL_UART_Transmit>
      while (HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin) == GPIO_PIN_RESET) {}
 8001c68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c6c:	4630      	mov	r0, r6
 8001c6e:	f002 fab7 	bl	80041e0 <HAL_GPIO_ReadPin>
 8001c72:	2800      	cmp	r0, #0
 8001c74:	d0f8      	beq.n	8001c68 <main+0x258>
    if (HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin) == GPIO_PIN_RESET)
 8001c76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c7a:	4630      	mov	r0, r6
 8001c7c:	f002 fab0 	bl	80041e0 <HAL_GPIO_ReadPin>
 8001c80:	2800      	cmp	r0, #0
 8001c82:	f47f aef9 	bne.w	8001a78 <main+0x68>
      SaveRecordsToFlash();
 8001c86:	f7ff fded 	bl	8001864 <SaveRecordsToFlash>
      char infoMsg[] = "Records saved to flash\r\n";
 8001c8a:	aa05      	add	r2, sp, #20
 8001c8c:	4615      	mov	r5, r2
 8001c8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d38 <main+0x328>)
 8001c90:	f103 0c18 	add.w	ip, r3, #24
 8001c94:	4614      	mov	r4, r2
 8001c96:	6818      	ldr	r0, [r3, #0]
 8001c98:	6859      	ldr	r1, [r3, #4]
 8001c9a:	3308      	adds	r3, #8
 8001c9c:	c403      	stmia	r4!, {r0, r1}
 8001c9e:	4563      	cmp	r3, ip
 8001ca0:	4622      	mov	r2, r4
 8001ca2:	d1f7      	bne.n	8001c94 <main+0x284>
 8001ca4:	781b      	ldrb	r3, [r3, #0]
      HAL_UART_Transmit(&huart1, (uint8_t*)infoMsg, strlen(infoMsg), HAL_MAX_DELAY);
 8001ca6:	4628      	mov	r0, r5
      char infoMsg[] = "Records saved to flash\r\n";
 8001ca8:	7023      	strb	r3, [r4, #0]
      HAL_UART_Transmit(&huart1, (uint8_t*)infoMsg, strlen(infoMsg), HAL_MAX_DELAY);
 8001caa:	f7fe fa51 	bl	8000150 <strlen>
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb2:	b282      	uxth	r2, r0
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	4809      	ldr	r0, [pc, #36]	@ (8001cdc <main+0x2cc>)
 8001cb8:	f004 ff97 	bl	8006bea <HAL_UART_Transmit>
      while (HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin) == GPIO_PIN_RESET) {}
 8001cbc:	4c0d      	ldr	r4, [pc, #52]	@ (8001cf4 <main+0x2e4>)
 8001cbe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f002 fa8c 	bl	80041e0 <HAL_GPIO_ReadPin>
 8001cc8:	2800      	cmp	r0, #0
 8001cca:	d0f8      	beq.n	8001cbe <main+0x2ae>
 8001ccc:	e6d4      	b.n	8001a78 <main+0x68>
          sumIntervals += beatIntervals[i];
 8001cce:	f85e bb04 	ldr.w	fp, [lr], #4
 8001cd2:	3501      	adds	r5, #1
 8001cd4:	445b      	add	r3, fp
        for (uint8_t i = 0; i < beatCount; i++)
 8001cd6:	e771      	b.n	8001bbc <main+0x1ac>
 8001cd8:	2000031c 	.word	0x2000031c
 8001cdc:	20000838 	.word	0x20000838
 8001ce0:	200008c4 	.word	0x200008c4
 8001ce4:	20000220 	.word	0x20000220
 8001ce8:	20000228 	.word	0x20000228
 8001cec:	3fd9999a 	.word	0x3fd9999a
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40010800 	.word	0x40010800
 8001cf8:	0800b0b9 	.word	0x0800b0b9
 8001cfc:	0800b000 	.word	0x0800b000
 8001d00:	20000350 	.word	0x20000350
 8001d04:	2000030c 	.word	0x2000030c
 8001d08:	20000308 	.word	0x20000308
 8001d0c:	20000310 	.word	0x20000310
 8001d10:	20000318 	.word	0x20000318
 8001d14:	200002ec 	.word	0x200002ec
 8001d18:	200002f1 	.word	0x200002f1
 8001d1c:	200002f0 	.word	0x200002f0
 8001d20:	20000314 	.word	0x20000314
 8001d24:	200002f4 	.word	0x200002f4
 8001d28:	200002d0 	.word	0x200002d0
 8001d2c:	200002d1 	.word	0x200002d1
 8001d30:	200002d4 	.word	0x200002d4
 8001d34:	0800b0c5 	.word	0x0800b0c5
 8001d38:	0800b0d9 	.word	0x0800b0d9

08001d3c <Error_Handler>:
 8001d3c:	b672      	cpsid	i
  while(1)
 8001d3e:	e7fe      	b.n	8001d3e <Error_Handler+0x2>

08001d40 <MAX30102_Init>:
#include "max30102.h"
#include "stm32f1xx_hal.h"

HAL_StatusTypeDef MAX30102_Init(I2C_HandleTypeDef* hi2c)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af04      	add	r7, sp, #16
 8001d46:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret;
    uint8_t buf;

    // 复位传感器：写入复位命令到 MODE_CONFIG 寄存器
    buf = 0x40;
 8001d48:	2340      	movs	r3, #64	@ 0x40
 8001d4a:	73bb      	strb	r3, [r7, #14]
    ret = HAL_I2C_Mem_Write(hi2c, MAX30102_ADDR, MAX30102_REG_MODE_CONFIG,
 8001d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d50:	9302      	str	r3, [sp, #8]
 8001d52:	2301      	movs	r3, #1
 8001d54:	9301      	str	r3, [sp, #4]
 8001d56:	f107 030e 	add.w	r3, r7, #14
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	2209      	movs	r2, #9
 8001d60:	21ae      	movs	r1, #174	@ 0xae
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f002 fcd0 	bl	8004708 <HAL_I2C_Mem_Write>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	73fb      	strb	r3, [r7, #15]
                              I2C_MEMADD_SIZE_8BIT, &buf, 1, HAL_MAX_DELAY);
    if(ret != HAL_OK)
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MAX30102_Init+0x36>
        return ret;
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	e084      	b.n	8001e80 <MAX30102_Init+0x140>

    HAL_Delay(100);
 8001d76:	2064      	movs	r0, #100	@ 0x64
 8001d78:	f000 ffa8 	bl	8002ccc <HAL_Delay>

    // 清零 FIFO 写指针和读指针
    buf = 0x00;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	73bb      	strb	r3, [r7, #14]
    ret = HAL_I2C_Mem_Write(hi2c, MAX30102_ADDR, MAX30102_REG_FIFO_WR_PTR,
 8001d80:	f04f 33ff 	mov.w	r3, #4294967295
 8001d84:	9302      	str	r3, [sp, #8]
 8001d86:	2301      	movs	r3, #1
 8001d88:	9301      	str	r3, [sp, #4]
 8001d8a:	f107 030e 	add.w	r3, r7, #14
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	2301      	movs	r3, #1
 8001d92:	2204      	movs	r2, #4
 8001d94:	21ae      	movs	r1, #174	@ 0xae
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f002 fcb6 	bl	8004708 <HAL_I2C_Mem_Write>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	73fb      	strb	r3, [r7, #15]
                              I2C_MEMADD_SIZE_8BIT, &buf, 1, HAL_MAX_DELAY);
    if(ret != HAL_OK)
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MAX30102_Init+0x6a>
        return ret;
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	e06a      	b.n	8001e80 <MAX30102_Init+0x140>
    ret = HAL_I2C_Mem_Write(hi2c, MAX30102_ADDR, MAX30102_REG_FIFO_RD_PTR,
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dae:	9302      	str	r3, [sp, #8]
 8001db0:	2301      	movs	r3, #1
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	f107 030e 	add.w	r3, r7, #14
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	2301      	movs	r3, #1
 8001dbc:	2206      	movs	r2, #6
 8001dbe:	21ae      	movs	r1, #174	@ 0xae
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f002 fca1 	bl	8004708 <HAL_I2C_Mem_Write>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	73fb      	strb	r3, [r7, #15]
                              I2C_MEMADD_SIZE_8BIT, &buf, 1, HAL_MAX_DELAY);
    if(ret != HAL_OK)
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MAX30102_Init+0x94>
        return ret;
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	e055      	b.n	8001e80 <MAX30102_Init+0x140>

    // 设置模式为 SpO2 模式（0x03 表示 SpO2 模式，详见数据手册）
    buf = 0x03;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	73bb      	strb	r3, [r7, #14]
    ret = HAL_I2C_Mem_Write(hi2c, MAX30102_ADDR, MAX30102_REG_MODE_CONFIG,
 8001dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ddc:	9302      	str	r3, [sp, #8]
 8001dde:	2301      	movs	r3, #1
 8001de0:	9301      	str	r3, [sp, #4]
 8001de2:	f107 030e 	add.w	r3, r7, #14
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	2301      	movs	r3, #1
 8001dea:	2209      	movs	r2, #9
 8001dec:	21ae      	movs	r1, #174	@ 0xae
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f002 fc8a 	bl	8004708 <HAL_I2C_Mem_Write>
 8001df4:	4603      	mov	r3, r0
 8001df6:	73fb      	strb	r3, [r7, #15]
                              I2C_MEMADD_SIZE_8BIT, &buf, 1, HAL_MAX_DELAY);
    if(ret != HAL_OK)
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MAX30102_Init+0xc2>
        return ret;
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	e03e      	b.n	8001e80 <MAX30102_Init+0x140>

    // 设置 LED 脉冲幅度（示例值，根据实际需要调整）
    buf = 0x24;
 8001e02:	2324      	movs	r3, #36	@ 0x24
 8001e04:	73bb      	strb	r3, [r7, #14]
    ret = HAL_I2C_Mem_Write(hi2c, MAX30102_ADDR, MAX30102_REG_LED1_PA,
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0a:	9302      	str	r3, [sp, #8]
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	f107 030e 	add.w	r3, r7, #14
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	2301      	movs	r3, #1
 8001e18:	220c      	movs	r2, #12
 8001e1a:	21ae      	movs	r1, #174	@ 0xae
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f002 fc73 	bl	8004708 <HAL_I2C_Mem_Write>
 8001e22:	4603      	mov	r3, r0
 8001e24:	73fb      	strb	r3, [r7, #15]
                              I2C_MEMADD_SIZE_8BIT, &buf, 1, HAL_MAX_DELAY);
    if(ret != HAL_OK)
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MAX30102_Init+0xf0>
        return ret;
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	e027      	b.n	8001e80 <MAX30102_Init+0x140>
    ret = HAL_I2C_Mem_Write(hi2c, MAX30102_ADDR, MAX30102_REG_LED2_PA,
 8001e30:	f04f 33ff 	mov.w	r3, #4294967295
 8001e34:	9302      	str	r3, [sp, #8]
 8001e36:	2301      	movs	r3, #1
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	f107 030e 	add.w	r3, r7, #14
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	2301      	movs	r3, #1
 8001e42:	220d      	movs	r2, #13
 8001e44:	21ae      	movs	r1, #174	@ 0xae
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f002 fc5e 	bl	8004708 <HAL_I2C_Mem_Write>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	73fb      	strb	r3, [r7, #15]
                              I2C_MEMADD_SIZE_8BIT, &buf, 1, HAL_MAX_DELAY);
    if(ret != HAL_OK)
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MAX30102_Init+0x11a>
        return ret;
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	e012      	b.n	8001e80 <MAX30102_Init+0x140>

    // 配置 SpO2 相关参数（采样率、脉冲宽度等，示例值）
    buf = 0x27;
 8001e5a:	2327      	movs	r3, #39	@ 0x27
 8001e5c:	73bb      	strb	r3, [r7, #14]
    ret = HAL_I2C_Mem_Write(hi2c, MAX30102_ADDR, MAX30102_REG_SPO2_CONFIG,
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e62:	9302      	str	r3, [sp, #8]
 8001e64:	2301      	movs	r3, #1
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	f107 030e 	add.w	r3, r7, #14
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2301      	movs	r3, #1
 8001e70:	220a      	movs	r2, #10
 8001e72:	21ae      	movs	r1, #174	@ 0xae
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f002 fc47 	bl	8004708 <HAL_I2C_Mem_Write>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	73fb      	strb	r3, [r7, #15]
                              I2C_MEMADD_SIZE_8BIT, &buf, 1, HAL_MAX_DELAY);

    return ret;
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <MAX30102_ReadFIFO>:

HAL_StatusTypeDef MAX30102_ReadFIFO(I2C_HandleTypeDef* hi2c, uint8_t *buffer, uint16_t len)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af04      	add	r7, sp, #16
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	4613      	mov	r3, r2
 8001e94:	80fb      	strh	r3, [r7, #6]
    return HAL_I2C_Mem_Read(hi2c, MAX30102_ADDR, MAX30102_REG_FIFO_DATA,
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9a:	9302      	str	r3, [sp, #8]
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	9301      	str	r3, [sp, #4]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	2207      	movs	r2, #7
 8001ea8:	21ae      	movs	r1, #174	@ 0xae
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f002 fd26 	bl	80048fc <HAL_I2C_Mem_Read>
 8001eb0:	4603      	mov	r3, r0
                              I2C_MEMADD_SIZE_8BIT, buffer, len, HAL_MAX_DELAY);
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af02      	add	r7, sp, #8
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed0:	9200      	str	r2, [sp, #0]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	2178      	movs	r1, #120	@ 0x78
 8001ed6:	4803      	ldr	r0, [pc, #12]	@ (8001ee4 <OLED_Send+0x28>)
 8001ed8:	f002 fb18 	bl	800450c <HAL_I2C_Master_Transmit>
}
 8001edc:	bf00      	nop
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000228 	.word	0x20000228

08001ee8 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 8001ef2:	4a05      	ldr	r2, [pc, #20]	@ (8001f08 <OLED_SendCmd+0x20>)
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8001ef8:	2102      	movs	r1, #2
 8001efa:	4803      	ldr	r0, [pc, #12]	@ (8001f08 <OLED_SendCmd+0x20>)
 8001efc:	f7ff ffde 	bl	8001ebc <OLED_Send>
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000754 	.word	0x20000754

08001f0c <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8001f10:	20ae      	movs	r0, #174	@ 0xae
 8001f12:	f7ff ffe9 	bl	8001ee8 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 8001f16:	2020      	movs	r0, #32
 8001f18:	f7ff ffe6 	bl	8001ee8 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8001f1c:	2010      	movs	r0, #16
 8001f1e:	f7ff ffe3 	bl	8001ee8 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 8001f22:	20b0      	movs	r0, #176	@ 0xb0
 8001f24:	f7ff ffe0 	bl	8001ee8 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8001f28:	20c8      	movs	r0, #200	@ 0xc8
 8001f2a:	f7ff ffdd 	bl	8001ee8 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f7ff ffda 	bl	8001ee8 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8001f34:	2010      	movs	r0, #16
 8001f36:	f7ff ffd7 	bl	8001ee8 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 8001f3a:	2040      	movs	r0, #64	@ 0x40
 8001f3c:	f7ff ffd4 	bl	8001ee8 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 8001f40:	2081      	movs	r0, #129	@ 0x81
 8001f42:	f7ff ffd1 	bl	8001ee8 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 8001f46:	20df      	movs	r0, #223	@ 0xdf
 8001f48:	f7ff ffce 	bl	8001ee8 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 8001f4c:	20a1      	movs	r0, #161	@ 0xa1
 8001f4e:	f7ff ffcb 	bl	8001ee8 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 8001f52:	20a6      	movs	r0, #166	@ 0xa6
 8001f54:	f7ff ffc8 	bl	8001ee8 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 8001f58:	20a8      	movs	r0, #168	@ 0xa8
 8001f5a:	f7ff ffc5 	bl	8001ee8 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 8001f5e:	203f      	movs	r0, #63	@ 0x3f
 8001f60:	f7ff ffc2 	bl	8001ee8 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8001f64:	20a4      	movs	r0, #164	@ 0xa4
 8001f66:	f7ff ffbf 	bl	8001ee8 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 8001f6a:	20d3      	movs	r0, #211	@ 0xd3
 8001f6c:	f7ff ffbc 	bl	8001ee8 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 8001f70:	2000      	movs	r0, #0
 8001f72:	f7ff ffb9 	bl	8001ee8 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 8001f76:	20d5      	movs	r0, #213	@ 0xd5
 8001f78:	f7ff ffb6 	bl	8001ee8 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 8001f7c:	20f0      	movs	r0, #240	@ 0xf0
 8001f7e:	f7ff ffb3 	bl	8001ee8 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 8001f82:	20d9      	movs	r0, #217	@ 0xd9
 8001f84:	f7ff ffb0 	bl	8001ee8 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8001f88:	2022      	movs	r0, #34	@ 0x22
 8001f8a:	f7ff ffad 	bl	8001ee8 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 8001f8e:	20da      	movs	r0, #218	@ 0xda
 8001f90:	f7ff ffaa 	bl	8001ee8 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8001f94:	2012      	movs	r0, #18
 8001f96:	f7ff ffa7 	bl	8001ee8 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 8001f9a:	20db      	movs	r0, #219	@ 0xdb
 8001f9c:	f7ff ffa4 	bl	8001ee8 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 8001fa0:	2020      	movs	r0, #32
 8001fa2:	f7ff ffa1 	bl	8001ee8 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 8001fa6:	208d      	movs	r0, #141	@ 0x8d
 8001fa8:	f7ff ff9e 	bl	8001ee8 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 8001fac:	2014      	movs	r0, #20
 8001fae:	f7ff ff9b 	bl	8001ee8 <OLED_SendCmd>

  OLED_NewFrame();
 8001fb2:	f000 f807 	bl	8001fc4 <OLED_NewFrame>
  OLED_ShowFrame();
 8001fb6:	f000 f811 	bl	8001fdc <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8001fba:	20af      	movs	r0, #175	@ 0xaf
 8001fbc:	f7ff ff94 	bl	8001ee8 <OLED_SendCmd>
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8001fc8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4802      	ldr	r0, [pc, #8]	@ (8001fd8 <OLED_NewFrame+0x14>)
 8001fd0:	f006 fb79 	bl	80086c6 <memset>
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000354 	.word	0x20000354

08001fdc <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 8001fe2:	4b15      	ldr	r3, [pc, #84]	@ (8002038 <OLED_ShowFrame+0x5c>)
 8001fe4:	2240      	movs	r2, #64	@ 0x40
 8001fe6:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	71fb      	strb	r3, [r7, #7]
 8001fec:	e01b      	b.n	8002026 <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	3b50      	subs	r3, #80	@ 0x50
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff77 	bl	8001ee8 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f7ff ff74 	bl	8001ee8 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8002000:	2010      	movs	r0, #16
 8002002:	f7ff ff71 	bl	8001ee8 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8002006:	480d      	ldr	r0, [pc, #52]	@ (800203c <OLED_ShowFrame+0x60>)
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	01db      	lsls	r3, r3, #7
 800200c:	4a0c      	ldr	r2, [pc, #48]	@ (8002040 <OLED_ShowFrame+0x64>)
 800200e:	4413      	add	r3, r2
 8002010:	2280      	movs	r2, #128	@ 0x80
 8002012:	4619      	mov	r1, r3
 8002014:	f006 fc11 	bl	800883a <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8002018:	2181      	movs	r1, #129	@ 0x81
 800201a:	4807      	ldr	r0, [pc, #28]	@ (8002038 <OLED_ShowFrame+0x5c>)
 800201c:	f7ff ff4e 	bl	8001ebc <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	3301      	adds	r3, #1
 8002024:	71fb      	strb	r3, [r7, #7]
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	2b07      	cmp	r3, #7
 800202a:	d9e0      	bls.n	8001fee <OLED_ShowFrame+0x12>
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000758 	.word	0x20000758
 800203c:	20000759 	.word	0x20000759
 8002040:	20000354 	.word	0x20000354

08002044 <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 8002044:	b490      	push	{r4, r7}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	4604      	mov	r4, r0
 800204c:	4608      	mov	r0, r1
 800204e:	4611      	mov	r1, r2
 8002050:	461a      	mov	r2, r3
 8002052:	4623      	mov	r3, r4
 8002054:	71fb      	strb	r3, [r7, #7]
 8002056:	4603      	mov	r3, r0
 8002058:	71bb      	strb	r3, [r7, #6]
 800205a:	460b      	mov	r3, r1
 800205c:	717b      	strb	r3, [r7, #5]
 800205e:	4613      	mov	r3, r2
 8002060:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	2b07      	cmp	r3, #7
 8002066:	d85f      	bhi.n	8002128 <OLED_SetByte_Fine+0xe4>
 8002068:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800206c:	2b00      	cmp	r3, #0
 800206e:	db5b      	blt.n	8002128 <OLED_SetByte_Fine+0xe4>
    return;
  if (color)
 8002070:	7d3b      	ldrb	r3, [r7, #20]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <OLED_SetByte_Fine+0x38>
    data = ~data;
 8002076:	797b      	ldrb	r3, [r7, #5]
 8002078:	43db      	mvns	r3, r3
 800207a:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 800207c:	7c3b      	ldrb	r3, [r7, #16]
 800207e:	3301      	adds	r3, #1
 8002080:	22ff      	movs	r2, #255	@ 0xff
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	b25a      	sxtb	r2, r3
 8002088:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800208c:	4313      	orrs	r3, r2
 800208e:	b25a      	sxtb	r2, r3
 8002090:	793b      	ldrb	r3, [r7, #4]
 8002092:	f1c3 0308 	rsb	r3, r3, #8
 8002096:	21ff      	movs	r1, #255	@ 0xff
 8002098:	fa41 f303 	asr.w	r3, r1, r3
 800209c:	b25b      	sxtb	r3, r3
 800209e:	4313      	orrs	r3, r2
 80020a0:	b25b      	sxtb	r3, r3
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	4b23      	ldr	r3, [pc, #140]	@ (8002134 <OLED_SetByte_Fine+0xf0>)
 80020a6:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 80020a8:	79fa      	ldrb	r2, [r7, #7]
 80020aa:	79bb      	ldrb	r3, [r7, #6]
 80020ac:	4922      	ldr	r1, [pc, #136]	@ (8002138 <OLED_SetByte_Fine+0xf4>)
 80020ae:	01d2      	lsls	r2, r2, #7
 80020b0:	440a      	add	r2, r1
 80020b2:	4413      	add	r3, r2
 80020b4:	7818      	ldrb	r0, [r3, #0]
 80020b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002134 <OLED_SetByte_Fine+0xf0>)
 80020b8:	7819      	ldrb	r1, [r3, #0]
 80020ba:	79fa      	ldrb	r2, [r7, #7]
 80020bc:	79bb      	ldrb	r3, [r7, #6]
 80020be:	4001      	ands	r1, r0
 80020c0:	b2c8      	uxtb	r0, r1
 80020c2:	491d      	ldr	r1, [pc, #116]	@ (8002138 <OLED_SetByte_Fine+0xf4>)
 80020c4:	01d2      	lsls	r2, r2, #7
 80020c6:	440a      	add	r2, r1
 80020c8:	4413      	add	r3, r2
 80020ca:	4602      	mov	r2, r0
 80020cc:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 80020ce:	7c3b      	ldrb	r3, [r7, #16]
 80020d0:	3301      	adds	r3, #1
 80020d2:	22ff      	movs	r2, #255	@ 0xff
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	b25a      	sxtb	r2, r3
 80020de:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80020e2:	4013      	ands	r3, r2
 80020e4:	b25a      	sxtb	r2, r3
 80020e6:	793b      	ldrb	r3, [r7, #4]
 80020e8:	f1c3 0308 	rsb	r3, r3, #8
 80020ec:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 80020f0:	fa41 f303 	asr.w	r3, r1, r3
 80020f4:	b25b      	sxtb	r3, r3
 80020f6:	4013      	ands	r3, r2
 80020f8:	b25b      	sxtb	r3, r3
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002134 <OLED_SetByte_Fine+0xf0>)
 80020fe:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8002100:	79fa      	ldrb	r2, [r7, #7]
 8002102:	79bb      	ldrb	r3, [r7, #6]
 8002104:	490c      	ldr	r1, [pc, #48]	@ (8002138 <OLED_SetByte_Fine+0xf4>)
 8002106:	01d2      	lsls	r2, r2, #7
 8002108:	440a      	add	r2, r1
 800210a:	4413      	add	r3, r2
 800210c:	7818      	ldrb	r0, [r3, #0]
 800210e:	4b09      	ldr	r3, [pc, #36]	@ (8002134 <OLED_SetByte_Fine+0xf0>)
 8002110:	7819      	ldrb	r1, [r3, #0]
 8002112:	79fa      	ldrb	r2, [r7, #7]
 8002114:	79bb      	ldrb	r3, [r7, #6]
 8002116:	4301      	orrs	r1, r0
 8002118:	b2c8      	uxtb	r0, r1
 800211a:	4907      	ldr	r1, [pc, #28]	@ (8002138 <OLED_SetByte_Fine+0xf4>)
 800211c:	01d2      	lsls	r2, r2, #7
 800211e:	440a      	add	r2, r1
 8002120:	4413      	add	r3, r2
 8002122:	4602      	mov	r2, r0
 8002124:	701a      	strb	r2, [r3, #0]
 8002126:	e000      	b.n	800212a <OLED_SetByte_Fine+0xe6>
    return;
 8002128:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bc90      	pop	{r4, r7}
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	200007d9 	.word	0x200007d9
 8002138:	20000354 	.word	0x20000354

0800213c <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 800213c:	b5b0      	push	{r4, r5, r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af02      	add	r7, sp, #8
 8002142:	4604      	mov	r4, r0
 8002144:	4608      	mov	r0, r1
 8002146:	4611      	mov	r1, r2
 8002148:	461a      	mov	r2, r3
 800214a:	4623      	mov	r3, r4
 800214c:	71fb      	strb	r3, [r7, #7]
 800214e:	4603      	mov	r3, r0
 8002150:	71bb      	strb	r3, [r7, #6]
 8002152:	460b      	mov	r3, r1
 8002154:	717b      	strb	r3, [r7, #5]
 8002156:	4613      	mov	r3, r2
 8002158:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 800215a:	79bb      	ldrb	r3, [r7, #6]
 800215c:	08db      	lsrs	r3, r3, #3
 800215e:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8002160:	79bb      	ldrb	r3, [r7, #6]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 8002168:	7bba      	ldrb	r2, [r7, #14]
 800216a:	793b      	ldrb	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	2b08      	cmp	r3, #8
 8002170:	dd29      	ble.n	80021c6 <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8002172:	797a      	ldrb	r2, [r7, #5]
 8002174:	7bbb      	ldrb	r3, [r7, #14]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	b2da      	uxtb	r2, r3
 800217c:	7bbc      	ldrb	r4, [r7, #14]
 800217e:	79f9      	ldrb	r1, [r7, #7]
 8002180:	7bf8      	ldrb	r0, [r7, #15]
 8002182:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002186:	9301      	str	r3, [sp, #4]
 8002188:	2307      	movs	r3, #7
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	4623      	mov	r3, r4
 800218e:	f7ff ff59 	bl	8002044 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	3301      	adds	r3, #1
 8002196:	b2d8      	uxtb	r0, r3
 8002198:	797a      	ldrb	r2, [r7, #5]
 800219a:	7bbb      	ldrb	r3, [r7, #14]
 800219c:	f1c3 0308 	rsb	r3, r3, #8
 80021a0:	fa42 f303 	asr.w	r3, r2, r3
 80021a4:	b2dc      	uxtb	r4, r3
 80021a6:	793a      	ldrb	r2, [r7, #4]
 80021a8:	7bbb      	ldrb	r3, [r7, #14]
 80021aa:	4413      	add	r3, r2
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	3b09      	subs	r3, #9
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	79f9      	ldrb	r1, [r7, #7]
 80021b4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021b8:	9201      	str	r2, [sp, #4]
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	2300      	movs	r3, #0
 80021be:	4622      	mov	r2, r4
 80021c0:	f7ff ff40 	bl	8002044 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 80021c4:	e015      	b.n	80021f2 <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 80021c6:	797a      	ldrb	r2, [r7, #5]
 80021c8:	7bbb      	ldrb	r3, [r7, #14]
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	b2dc      	uxtb	r4, r3
 80021d0:	7bba      	ldrb	r2, [r7, #14]
 80021d2:	793b      	ldrb	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	7bbd      	ldrb	r5, [r7, #14]
 80021de:	79f9      	ldrb	r1, [r7, #7]
 80021e0:	7bf8      	ldrb	r0, [r7, #15]
 80021e2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021e6:	9201      	str	r2, [sp, #4]
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	462b      	mov	r3, r5
 80021ec:	4622      	mov	r2, r4
 80021ee:	f7ff ff29 	bl	8002044 <OLED_SetByte_Fine>
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bdb0      	pop	{r4, r5, r7, pc}

080021fa <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 80021fa:	b590      	push	{r4, r7, lr}
 80021fc:	b087      	sub	sp, #28
 80021fe:	af02      	add	r7, sp, #8
 8002200:	4604      	mov	r4, r0
 8002202:	4608      	mov	r0, r1
 8002204:	4611      	mov	r1, r2
 8002206:	461a      	mov	r2, r3
 8002208:	4623      	mov	r3, r4
 800220a:	71fb      	strb	r3, [r7, #7]
 800220c:	4603      	mov	r3, r0
 800220e:	71bb      	strb	r3, [r7, #6]
 8002210:	460b      	mov	r3, r1
 8002212:	717b      	strb	r3, [r7, #5]
 8002214:	4613      	mov	r3, r2
 8002216:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8002218:	79bb      	ldrb	r3, [r7, #6]
 800221a:	08db      	lsrs	r3, r3, #3
 800221c:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 800221e:	79bb      	ldrb	r3, [r7, #6]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8002226:	797a      	ldrb	r2, [r7, #5]
 8002228:	7bbb      	ldrb	r3, [r7, #14]
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	b2da      	uxtb	r2, r3
 8002230:	7bbc      	ldrb	r4, [r7, #14]
 8002232:	79f9      	ldrb	r1, [r7, #7]
 8002234:	7bf8      	ldrb	r0, [r7, #15]
 8002236:	793b      	ldrb	r3, [r7, #4]
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	2307      	movs	r3, #7
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	4623      	mov	r3, r4
 8002240:	f7ff ff00 	bl	8002044 <OLED_SetByte_Fine>
  if (bit)
 8002244:	7bbb      	ldrb	r3, [r7, #14]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d014      	beq.n	8002274 <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	3301      	adds	r3, #1
 800224e:	b2d8      	uxtb	r0, r3
 8002250:	797a      	ldrb	r2, [r7, #5]
 8002252:	7bbb      	ldrb	r3, [r7, #14]
 8002254:	f1c3 0308 	rsb	r3, r3, #8
 8002258:	fa42 f303 	asr.w	r3, r2, r3
 800225c:	b2dc      	uxtb	r4, r3
 800225e:	7bbb      	ldrb	r3, [r7, #14]
 8002260:	3b01      	subs	r3, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	79f9      	ldrb	r1, [r7, #7]
 8002266:	793a      	ldrb	r2, [r7, #4]
 8002268:	9201      	str	r2, [sp, #4]
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	2300      	movs	r3, #0
 800226e:	4622      	mov	r2, r4
 8002270:	f7ff fee8 	bl	8002044 <OLED_SetByte_Fine>
  }
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	bd90      	pop	{r4, r7, pc}

0800227c <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 800227c:	b590      	push	{r4, r7, lr}
 800227e:	b087      	sub	sp, #28
 8002280:	af02      	add	r7, sp, #8
 8002282:	603a      	str	r2, [r7, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
 800228a:	460b      	mov	r3, r1
 800228c:	71bb      	strb	r3, [r7, #6]
 800228e:	4613      	mov	r3, r2
 8002290:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 8002292:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002296:	08db      	lsrs	r3, r3, #3
 8002298:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 800229a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 80022a4:	2300      	movs	r3, #0
 80022a6:	73fb      	strb	r3, [r7, #15]
 80022a8:	e025      	b.n	80022f6 <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	73bb      	strb	r3, [r7, #14]
 80022ae:	e01b      	b.n	80022e8 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 80022b0:	79fa      	ldrb	r2, [r7, #7]
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	4413      	add	r3, r2
 80022b6:	b2d8      	uxtb	r0, r3
 80022b8:	7bbb      	ldrb	r3, [r7, #14]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	79bb      	ldrb	r3, [r7, #6]
 80022c0:	4413      	add	r3, r2
 80022c2:	b2dc      	uxtb	r4, r3
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	7bbb      	ldrb	r3, [r7, #14]
 80022c8:	7979      	ldrb	r1, [r7, #5]
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	461a      	mov	r2, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	4413      	add	r3, r2
 80022d6:	781a      	ldrb	r2, [r3, #0]
 80022d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80022dc:	4621      	mov	r1, r4
 80022de:	f7ff ff8c 	bl	80021fa <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 80022e2:	7bbb      	ldrb	r3, [r7, #14]
 80022e4:	3301      	adds	r3, #1
 80022e6:	73bb      	strb	r3, [r7, #14]
 80022e8:	7bba      	ldrb	r2, [r7, #14]
 80022ea:	7b3b      	ldrb	r3, [r7, #12]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d3df      	bcc.n	80022b0 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	3301      	adds	r3, #1
 80022f4:	73fb      	strb	r3, [r7, #15]
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	797b      	ldrb	r3, [r7, #5]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d3d5      	bcc.n	80022aa <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 80022fe:	7afb      	ldrb	r3, [r7, #11]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d028      	beq.n	8002356 <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8002304:	797b      	ldrb	r3, [r7, #5]
 8002306:	b29b      	uxth	r3, r3
 8002308:	7b3a      	ldrb	r2, [r7, #12]
 800230a:	b292      	uxth	r2, r2
 800230c:	fb02 f303 	mul.w	r3, r2, r3
 8002310:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 8002312:	2300      	movs	r3, #0
 8002314:	737b      	strb	r3, [r7, #13]
 8002316:	e01a      	b.n	800234e <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8002318:	79fa      	ldrb	r2, [r7, #7]
 800231a:	7b7b      	ldrb	r3, [r7, #13]
 800231c:	4413      	add	r3, r2
 800231e:	b2d8      	uxtb	r0, r3
 8002320:	7b3b      	ldrb	r3, [r7, #12]
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	b2da      	uxtb	r2, r3
 8002326:	79bb      	ldrb	r3, [r7, #6]
 8002328:	4413      	add	r3, r2
 800232a:	b2d9      	uxtb	r1, r3
 800232c:	893a      	ldrh	r2, [r7, #8]
 800232e:	7b7b      	ldrb	r3, [r7, #13]
 8002330:	4413      	add	r3, r2
 8002332:	461a      	mov	r2, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	4413      	add	r3, r2
 8002338:	781a      	ldrb	r2, [r3, #0]
 800233a:	7afc      	ldrb	r4, [r7, #11]
 800233c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	4623      	mov	r3, r4
 8002344:	f7ff fefa 	bl	800213c <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 8002348:	7b7b      	ldrb	r3, [r7, #13]
 800234a:	3301      	adds	r3, #1
 800234c:	737b      	strb	r3, [r7, #13]
 800234e:	7b7a      	ldrb	r2, [r7, #13]
 8002350:	797b      	ldrb	r3, [r7, #5]
 8002352:	429a      	cmp	r2, r3
 8002354:	d3e0      	bcc.n	8002318 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	bd90      	pop	{r4, r7, pc}

0800235e <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 800235e:	b5b0      	push	{r4, r5, r7, lr}
 8002360:	b084      	sub	sp, #16
 8002362:	af02      	add	r7, sp, #8
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
 800236a:	460b      	mov	r3, r1
 800236c:	71bb      	strb	r3, [r7, #6]
 800236e:	4613      	mov	r3, r2
 8002370:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	797b      	ldrb	r3, [r7, #5]
 8002378:	f1a3 0120 	sub.w	r1, r3, #32
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	3307      	adds	r3, #7
 8002382:	2b00      	cmp	r3, #0
 8002384:	da00      	bge.n	8002388 <OLED_PrintASCIIChar+0x2a>
 8002386:	3307      	adds	r3, #7
 8002388:	10db      	asrs	r3, r3, #3
 800238a:	4618      	mov	r0, r3
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	785b      	ldrb	r3, [r3, #1]
 8002390:	fb00 f303 	mul.w	r3, r0, r3
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	18d4      	adds	r4, r2, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	785d      	ldrb	r5, [r3, #1]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	79b9      	ldrb	r1, [r7, #6]
 80023a4:	79f8      	ldrb	r0, [r7, #7]
 80023a6:	7e3a      	ldrb	r2, [r7, #24]
 80023a8:	9201      	str	r2, [sp, #4]
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	462b      	mov	r3, r5
 80023ae:	4622      	mov	r2, r4
 80023b0:	f7ff ff64 	bl	800227c <OLED_SetBlock>
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bdb0      	pop	{r4, r5, r7, pc}

080023bc <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	b25b      	sxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	db01      	blt.n	80023d2 <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e018      	b.n	8002404 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80023da:	2bc0      	cmp	r3, #192	@ 0xc0
 80023dc:	d101      	bne.n	80023e2 <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 80023de:	2302      	movs	r3, #2
 80023e0:	e010      	b.n	8002404 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023ea:	2be0      	cmp	r3, #224	@ 0xe0
 80023ec:	d101      	bne.n	80023f2 <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e008      	b.n	8002404 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80023fa:	2bf0      	cmp	r3, #240	@ 0xf0
 80023fc:	d101      	bne.n	8002402 <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 80023fe:	2304      	movs	r3, #4
 8002400:	e000      	b.n	8002404 <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 800240e:	b5b0      	push	{r4, r5, r7, lr}
 8002410:	b08a      	sub	sp, #40	@ 0x28
 8002412:	af02      	add	r7, sp, #8
 8002414:	60ba      	str	r2, [r7, #8]
 8002416:	607b      	str	r3, [r7, #4]
 8002418:	4603      	mov	r3, r0
 800241a:	73fb      	strb	r3, [r7, #15]
 800241c:	460b      	mov	r3, r1
 800241e:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 8002420:	2300      	movs	r3, #0
 8002422:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	3307      	adds	r3, #7
 800242a:	2b00      	cmp	r3, #0
 800242c:	da00      	bge.n	8002430 <OLED_PrintString+0x22>
 800242e:	3307      	adds	r3, #7
 8002430:	10db      	asrs	r3, r3, #3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	7852      	ldrb	r2, [r2, #1]
 8002438:	fb02 f303 	mul.w	r3, r2, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	3304      	adds	r3, #4
 8002440:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 8002442:	e07d      	b.n	8002540 <OLED_PrintString+0x132>
  {
    found = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 8002448:	8bfb      	ldrh	r3, [r7, #30]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	4413      	add	r3, r2
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff ffb4 	bl	80023bc <_OLED_GetUTF8Len>
 8002454:	4603      	mov	r3, r0
 8002456:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 8002458:	7ebb      	ldrb	r3, [r7, #26]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d078      	beq.n	8002550 <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 800245e:	2300      	movs	r3, #0
 8002460:	773b      	strb	r3, [r7, #28]
 8002462:	e032      	b.n	80024ca <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	7f3a      	ldrb	r2, [r7, #28]
 800246a:	7ef9      	ldrb	r1, [r7, #27]
 800246c:	fb01 f202 	mul.w	r2, r1, r2
 8002470:	4413      	add	r3, r2
 8002472:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 8002474:	8bfb      	ldrh	r3, [r7, #30]
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	4413      	add	r3, r2
 800247a:	7eba      	ldrb	r2, [r7, #26]
 800247c:	6979      	ldr	r1, [r7, #20]
 800247e:	4618      	mov	r0, r3
 8002480:	f006 f911 	bl	80086a6 <memcmp>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d11c      	bne.n	80024c4 <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	1d1c      	adds	r4, r3, #4
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	785d      	ldrb	r5, [r3, #1]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	7bb9      	ldrb	r1, [r7, #14]
 8002498:	7bf8      	ldrb	r0, [r7, #15]
 800249a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800249e:	9201      	str	r2, [sp, #4]
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	462b      	mov	r3, r5
 80024a4:	4622      	mov	r2, r4
 80024a6:	f7ff fee9 	bl	800227c <OLED_SetBlock>
        // 移动光标
        x += font->w;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	785a      	ldrb	r2, [r3, #1]
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	4413      	add	r3, r2
 80024b2:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 80024b4:	7ebb      	ldrb	r3, [r7, #26]
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	8bfb      	ldrh	r3, [r7, #30]
 80024ba:	4413      	add	r3, r2
 80024bc:	83fb      	strh	r3, [r7, #30]
        found = 1;
 80024be:	2301      	movs	r3, #1
 80024c0:	777b      	strb	r3, [r7, #29]
        break;
 80024c2:	e007      	b.n	80024d4 <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 80024c4:	7f3b      	ldrb	r3, [r7, #28]
 80024c6:	3301      	adds	r3, #1
 80024c8:	773b      	strb	r3, [r7, #28]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	7a1b      	ldrb	r3, [r3, #8]
 80024ce:	7f3a      	ldrb	r2, [r7, #28]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d3c7      	bcc.n	8002464 <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 80024d4:	7f7b      	ldrb	r3, [r7, #29]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d132      	bne.n	8002540 <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 80024da:	7ebb      	ldrb	r3, [r7, #26]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d119      	bne.n	8002514 <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 80024e0:	8bfb      	ldrh	r3, [r7, #30]
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	4413      	add	r3, r2
 80024e6:	781a      	ldrb	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68dc      	ldr	r4, [r3, #12]
 80024ec:	7bb9      	ldrb	r1, [r7, #14]
 80024ee:	7bf8      	ldrb	r0, [r7, #15]
 80024f0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	4623      	mov	r3, r4
 80024f8:	f7ff ff31 	bl	800235e <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	785a      	ldrb	r2, [r3, #1]
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	4413      	add	r3, r2
 8002506:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8002508:	7ebb      	ldrb	r3, [r7, #26]
 800250a:	b29a      	uxth	r2, r3
 800250c:	8bfb      	ldrh	r3, [r7, #30]
 800250e:	4413      	add	r3, r2
 8002510:	83fb      	strh	r3, [r7, #30]
 8002512:	e015      	b.n	8002540 <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	7bb9      	ldrb	r1, [r7, #14]
 800251a:	7bf8      	ldrb	r0, [r7, #15]
 800251c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	4613      	mov	r3, r2
 8002524:	2220      	movs	r2, #32
 8002526:	f7ff ff1a 	bl	800235e <OLED_PrintASCIIChar>
        x += font->ascii->w;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	785a      	ldrb	r2, [r3, #1]
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	4413      	add	r3, r2
 8002534:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8002536:	7ebb      	ldrb	r3, [r7, #26]
 8002538:	b29a      	uxth	r2, r3
 800253a:	8bfb      	ldrh	r3, [r7, #30]
 800253c:	4413      	add	r3, r2
 800253e:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 8002540:	8bfb      	ldrh	r3, [r7, #30]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	4413      	add	r3, r2
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	f47f af7b 	bne.w	8002444 <OLED_PrintString+0x36>
      }
    }
  }
}
 800254e:	e000      	b.n	8002552 <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 8002550:	bf00      	nop
}
 8002552:	bf00      	nop
 8002554:	3720      	adds	r7, #32
 8002556:	46bd      	mov	sp, r7
 8002558:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800255c <MX_SPI1_Init>:
/**
  * @brief  初始化 SPI1 外设
  * 请根据实际情况调整各参数，如波特率分频、数据位、极性、相位等。
  */
void MX_SPI1_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
    hspi1.Instance = SPI1;
 8002560:	4b17      	ldr	r3, [pc, #92]	@ (80025c0 <MX_SPI1_Init+0x64>)
 8002562:	4a18      	ldr	r2, [pc, #96]	@ (80025c4 <MX_SPI1_Init+0x68>)
 8002564:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8002566:	4b16      	ldr	r3, [pc, #88]	@ (80025c0 <MX_SPI1_Init+0x64>)
 8002568:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800256c:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800256e:	4b14      	ldr	r3, [pc, #80]	@ (80025c0 <MX_SPI1_Init+0x64>)
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002574:	4b12      	ldr	r3, [pc, #72]	@ (80025c0 <MX_SPI1_Init+0x64>)
 8002576:	2200      	movs	r2, #0
 8002578:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800257a:	4b11      	ldr	r3, [pc, #68]	@ (80025c0 <MX_SPI1_Init+0x64>)
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002580:	4b0f      	ldr	r3, [pc, #60]	@ (80025c0 <MX_SPI1_Init+0x64>)
 8002582:	2200      	movs	r2, #0
 8002584:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8002586:	4b0e      	ldr	r3, [pc, #56]	@ (80025c0 <MX_SPI1_Init+0x64>)
 8002588:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800258c:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; // 可根据需要调整
 800258e:	4b0c      	ldr	r3, [pc, #48]	@ (80025c0 <MX_SPI1_Init+0x64>)
 8002590:	2218      	movs	r2, #24
 8002592:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002594:	4b0a      	ldr	r3, [pc, #40]	@ (80025c0 <MX_SPI1_Init+0x64>)
 8002596:	2200      	movs	r2, #0
 8002598:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800259a:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <MX_SPI1_Init+0x64>)
 800259c:	2200      	movs	r2, #0
 800259e:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025a0:	4b07      	ldr	r3, [pc, #28]	@ (80025c0 <MX_SPI1_Init+0x64>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 80025a6:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <MX_SPI1_Init+0x64>)
 80025a8:	220a      	movs	r2, #10
 80025aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025ac:	4804      	ldr	r0, [pc, #16]	@ (80025c0 <MX_SPI1_Init+0x64>)
 80025ae:	f003 fd2d 	bl	800600c <HAL_SPI_Init>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_SPI1_Init+0x60>
    {
        Error_Handler();
 80025b8:	f7ff fbc0 	bl	8001d3c <Error_Handler>
    }
}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	200007dc 	.word	0x200007dc
 80025c4:	40013000 	.word	0x40013000

080025c8 <W25Q64_SPI_Transmit>:

/* 内部函数：通过 SPI 发送数据 */
static void W25Q64_SPI_Transmit(uint8_t *data, uint16_t length)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi1, data, length, HAL_MAX_DELAY);
 80025d4:	887a      	ldrh	r2, [r7, #2]
 80025d6:	f04f 33ff 	mov.w	r3, #4294967295
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4803      	ldr	r0, [pc, #12]	@ (80025ec <W25Q64_SPI_Transmit+0x24>)
 80025de:	f003 fda2 	bl	8006126 <HAL_SPI_Transmit>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	200007dc 	.word	0x200007dc

080025f0 <W25Q64_SPI_Receive>:

/* 内部函数：通过 SPI 接收数据 */
static void W25Q64_SPI_Receive(uint8_t *data, uint16_t length)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi1, data, length, HAL_MAX_DELAY);
 80025fc:	887a      	ldrh	r2, [r7, #2]
 80025fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4803      	ldr	r0, [pc, #12]	@ (8002614 <W25Q64_SPI_Receive+0x24>)
 8002606:	f003 fed2 	bl	80063ae <HAL_SPI_Receive>
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200007dc 	.word	0x200007dc

08002618 <W25Q64_WriteEnable>:

void W25Q64_WriteEnable(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
    uint8_t cmd = W25Q64_CMD_WREN;
 800261e:	2306      	movs	r3, #6
 8002620:	71fb      	strb	r3, [r7, #7]
    W25Q64_CS_LOW();
 8002622:	2200      	movs	r2, #0
 8002624:	2110      	movs	r1, #16
 8002626:	4808      	ldr	r0, [pc, #32]	@ (8002648 <W25Q64_WriteEnable+0x30>)
 8002628:	f001 fdf1 	bl	800420e <HAL_GPIO_WritePin>
    W25Q64_SPI_Transmit(&cmd, 1);
 800262c:	1dfb      	adds	r3, r7, #7
 800262e:	2101      	movs	r1, #1
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ffc9 	bl	80025c8 <W25Q64_SPI_Transmit>
    W25Q64_CS_HIGH();
 8002636:	2201      	movs	r2, #1
 8002638:	2110      	movs	r1, #16
 800263a:	4803      	ldr	r0, [pc, #12]	@ (8002648 <W25Q64_WriteEnable+0x30>)
 800263c:	f001 fde7 	bl	800420e <HAL_GPIO_WritePin>
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40010800 	.word	0x40010800

0800264c <W25Q64_IsBusy>:

uint8_t W25Q64_IsBusy(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
    uint8_t cmd = W25Q64_CMD_RDSR;
 8002652:	2305      	movs	r3, #5
 8002654:	71fb      	strb	r3, [r7, #7]
    uint8_t status = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	71bb      	strb	r3, [r7, #6]
    W25Q64_CS_LOW();
 800265a:	2200      	movs	r2, #0
 800265c:	2110      	movs	r1, #16
 800265e:	480d      	ldr	r0, [pc, #52]	@ (8002694 <W25Q64_IsBusy+0x48>)
 8002660:	f001 fdd5 	bl	800420e <HAL_GPIO_WritePin>
    W25Q64_SPI_Transmit(&cmd, 1);
 8002664:	1dfb      	adds	r3, r7, #7
 8002666:	2101      	movs	r1, #1
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ffad 	bl	80025c8 <W25Q64_SPI_Transmit>
    W25Q64_SPI_Receive(&status, 1);
 800266e:	1dbb      	adds	r3, r7, #6
 8002670:	2101      	movs	r1, #1
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff ffbc 	bl	80025f0 <W25Q64_SPI_Receive>
    W25Q64_CS_HIGH();
 8002678:	2201      	movs	r2, #1
 800267a:	2110      	movs	r1, #16
 800267c:	4805      	ldr	r0, [pc, #20]	@ (8002694 <W25Q64_IsBusy+0x48>)
 800267e:	f001 fdc6 	bl	800420e <HAL_GPIO_WritePin>
    return (status & 0x01);
 8002682:	79bb      	ldrb	r3, [r7, #6]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	b2db      	uxtb	r3, r3
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40010800 	.word	0x40010800

08002698 <W25Q64_WriteData>:
    W25Q64_CS_HIGH();
    while(W25Q64_IsBusy());
}

void W25Q64_WriteData(uint32_t address, uint8_t *data, uint16_t length)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	4613      	mov	r3, r2
 80026a4:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd[4];
    cmd[0] = W25Q64_CMD_WRITE;
 80026a6:	2302      	movs	r3, #2
 80026a8:	753b      	strb	r3, [r7, #20]
    cmd[1] = (address >> 16) & 0xFF;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	0c1b      	lsrs	r3, r3, #16
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	757b      	strb	r3, [r7, #21]
    cmd[2] = (address >> 8) & 0xFF;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	75bb      	strb	r3, [r7, #22]
    cmd[3] = address & 0xFF;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	75fb      	strb	r3, [r7, #23]
    W25Q64_WriteEnable();
 80026c0:	f7ff ffaa 	bl	8002618 <W25Q64_WriteEnable>
    W25Q64_CS_LOW();
 80026c4:	2200      	movs	r2, #0
 80026c6:	2110      	movs	r1, #16
 80026c8:	480e      	ldr	r0, [pc, #56]	@ (8002704 <W25Q64_WriteData+0x6c>)
 80026ca:	f001 fda0 	bl	800420e <HAL_GPIO_WritePin>
    W25Q64_SPI_Transmit(cmd, 4);
 80026ce:	f107 0314 	add.w	r3, r7, #20
 80026d2:	2104      	movs	r1, #4
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff77 	bl	80025c8 <W25Q64_SPI_Transmit>
    W25Q64_SPI_Transmit(data, length);
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	4619      	mov	r1, r3
 80026de:	68b8      	ldr	r0, [r7, #8]
 80026e0:	f7ff ff72 	bl	80025c8 <W25Q64_SPI_Transmit>
    W25Q64_CS_HIGH();
 80026e4:	2201      	movs	r2, #1
 80026e6:	2110      	movs	r1, #16
 80026e8:	4806      	ldr	r0, [pc, #24]	@ (8002704 <W25Q64_WriteData+0x6c>)
 80026ea:	f001 fd90 	bl	800420e <HAL_GPIO_WritePin>
    while(W25Q64_IsBusy());
 80026ee:	bf00      	nop
 80026f0:	f7ff ffac 	bl	800264c <W25Q64_IsBusy>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1fa      	bne.n	80026f0 <W25Q64_WriteData+0x58>
}
 80026fa:	bf00      	nop
 80026fc:	bf00      	nop
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40010800 	.word	0x40010800

08002708 <W25Q64_ReadData>:

void W25Q64_ReadData(uint32_t address, uint8_t *data, uint16_t length)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	4613      	mov	r3, r2
 8002714:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd[4];
    cmd[0] = W25Q64_CMD_READ;
 8002716:	2303      	movs	r3, #3
 8002718:	753b      	strb	r3, [r7, #20]
    cmd[1] = (address >> 16) & 0xFF;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	0c1b      	lsrs	r3, r3, #16
 800271e:	b2db      	uxtb	r3, r3
 8002720:	757b      	strb	r3, [r7, #21]
    cmd[2] = (address >> 8) & 0xFF;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	0a1b      	lsrs	r3, r3, #8
 8002726:	b2db      	uxtb	r3, r3
 8002728:	75bb      	strb	r3, [r7, #22]
    cmd[3] = address & 0xFF;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	75fb      	strb	r3, [r7, #23]
    W25Q64_CS_LOW();
 8002730:	2200      	movs	r2, #0
 8002732:	2110      	movs	r1, #16
 8002734:	480b      	ldr	r0, [pc, #44]	@ (8002764 <W25Q64_ReadData+0x5c>)
 8002736:	f001 fd6a 	bl	800420e <HAL_GPIO_WritePin>
    W25Q64_SPI_Transmit(cmd, 4);
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	2104      	movs	r1, #4
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff41 	bl	80025c8 <W25Q64_SPI_Transmit>
    W25Q64_SPI_Receive(data, length);
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	4619      	mov	r1, r3
 800274a:	68b8      	ldr	r0, [r7, #8]
 800274c:	f7ff ff50 	bl	80025f0 <W25Q64_SPI_Receive>
    W25Q64_CS_HIGH();
 8002750:	2201      	movs	r2, #1
 8002752:	2110      	movs	r1, #16
 8002754:	4803      	ldr	r0, [pc, #12]	@ (8002764 <W25Q64_ReadData+0x5c>)
 8002756:	f001 fd5a 	bl	800420e <HAL_GPIO_WritePin>
}
 800275a:	bf00      	nop
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40010800 	.word	0x40010800

08002768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800276e:	4b15      	ldr	r3, [pc, #84]	@ (80027c4 <HAL_MspInit+0x5c>)
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	4a14      	ldr	r2, [pc, #80]	@ (80027c4 <HAL_MspInit+0x5c>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6193      	str	r3, [r2, #24]
 800277a:	4b12      	ldr	r3, [pc, #72]	@ (80027c4 <HAL_MspInit+0x5c>)
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002786:	4b0f      	ldr	r3, [pc, #60]	@ (80027c4 <HAL_MspInit+0x5c>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	4a0e      	ldr	r2, [pc, #56]	@ (80027c4 <HAL_MspInit+0x5c>)
 800278c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002790:	61d3      	str	r3, [r2, #28]
 8002792:	4b0c      	ldr	r3, [pc, #48]	@ (80027c4 <HAL_MspInit+0x5c>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279a:	607b      	str	r3, [r7, #4]
 800279c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800279e:	4b0a      	ldr	r3, [pc, #40]	@ (80027c8 <HAL_MspInit+0x60>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	4a04      	ldr	r2, [pc, #16]	@ (80027c8 <HAL_MspInit+0x60>)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ba:	bf00      	nop
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40010000 	.word	0x40010000

080027cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027d0:	bf00      	nop
 80027d2:	e7fd      	b.n	80027d0 <NMI_Handler+0x4>

080027d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027d8:	bf00      	nop
 80027da:	e7fd      	b.n	80027d8 <HardFault_Handler+0x4>

080027dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e0:	bf00      	nop
 80027e2:	e7fd      	b.n	80027e0 <MemManage_Handler+0x4>

080027e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027e8:	bf00      	nop
 80027ea:	e7fd      	b.n	80027e8 <BusFault_Handler+0x4>

080027ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <UsageFault_Handler+0x4>

080027f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr

08002818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800281c:	f000 fa3a 	bl	8002c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}

08002824 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002828:	4802      	ldr	r0, [pc, #8]	@ (8002834 <DMA1_Channel4_IRQHandler+0x10>)
 800282a:	f001 fa21 	bl	8003c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20000880 	.word	0x20000880

08002838 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800283c:	4802      	ldr	r0, [pc, #8]	@ (8002848 <DMA1_Channel5_IRQHandler+0x10>)
 800283e:	f001 fa17 	bl	8003c70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	200008c4 	.word	0x200008c4

0800284c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002850:	4802      	ldr	r0, [pc, #8]	@ (800285c <ADC1_2_IRQHandler+0x10>)
 8002852:	f000 fd23 	bl	800329c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200001f0 	.word	0x200001f0

08002860 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAX30102_INT_Pin);
 8002864:	2020      	movs	r0, #32
 8002866:	f001 fceb 	bl	8004240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002874:	4802      	ldr	r0, [pc, #8]	@ (8002880 <USART1_IRQHandler+0x10>)
 8002876:	f004 fa9d 	bl	8006db4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000838 	.word	0x20000838

08002884 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return 1;
 8002888:	2301      	movs	r3, #1
}
 800288a:	4618      	mov	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr

08002892 <_kill>:

int _kill(int pid, int sig)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800289c:	f005 ff8a 	bl	80087b4 <__errno>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2216      	movs	r2, #22
 80028a4:	601a      	str	r2, [r3, #0]
  return -1;
 80028a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <_exit>:

void _exit (int status)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028ba:	f04f 31ff 	mov.w	r1, #4294967295
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff ffe7 	bl	8002892 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028c4:	bf00      	nop
 80028c6:	e7fd      	b.n	80028c4 <_exit+0x12>

080028c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	e00a      	b.n	80028f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028da:	f3af 8000 	nop.w
 80028de:	4601      	mov	r1, r0
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	60ba      	str	r2, [r7, #8]
 80028e6:	b2ca      	uxtb	r2, r1
 80028e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	3301      	adds	r3, #1
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	dbf0      	blt.n	80028da <_read+0x12>
  }

  return len;
 80028f8:	687b      	ldr	r3, [r7, #4]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	e009      	b.n	8002928 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	60ba      	str	r2, [r7, #8]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	3301      	adds	r3, #1
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	429a      	cmp	r2, r3
 800292e:	dbf1      	blt.n	8002914 <_write+0x12>
  }
  return len;
 8002930:	687b      	ldr	r3, [r7, #4]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <_close>:

int _close(int file)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002942:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002960:	605a      	str	r2, [r3, #4]
  return 0;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <_isatty>:

int _isatty(int file)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002976:	2301      	movs	r3, #1
}
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr

08002982 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002982:	b480      	push	{r7}
 8002984:	b085      	sub	sp, #20
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr
	...

0800299c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029a4:	4a14      	ldr	r2, [pc, #80]	@ (80029f8 <_sbrk+0x5c>)
 80029a6:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <_sbrk+0x60>)
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029b0:	4b13      	ldr	r3, [pc, #76]	@ (8002a00 <_sbrk+0x64>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d102      	bne.n	80029be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029b8:	4b11      	ldr	r3, [pc, #68]	@ (8002a00 <_sbrk+0x64>)
 80029ba:	4a12      	ldr	r2, [pc, #72]	@ (8002a04 <_sbrk+0x68>)
 80029bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029be:	4b10      	ldr	r3, [pc, #64]	@ (8002a00 <_sbrk+0x64>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d207      	bcs.n	80029dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029cc:	f005 fef2 	bl	80087b4 <__errno>
 80029d0:	4603      	mov	r3, r0
 80029d2:	220c      	movs	r2, #12
 80029d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029d6:	f04f 33ff 	mov.w	r3, #4294967295
 80029da:	e009      	b.n	80029f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029dc:	4b08      	ldr	r3, [pc, #32]	@ (8002a00 <_sbrk+0x64>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029e2:	4b07      	ldr	r3, [pc, #28]	@ (8002a00 <_sbrk+0x64>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4413      	add	r3, r2
 80029ea:	4a05      	ldr	r2, [pc, #20]	@ (8002a00 <_sbrk+0x64>)
 80029ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ee:	68fb      	ldr	r3, [r7, #12]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20005000 	.word	0x20005000
 80029fc:	00000400 	.word	0x00000400
 8002a00:	20000834 	.word	0x20000834
 8002a04:	20000a58 	.word	0x20000a58

08002a08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a18:	4b11      	ldr	r3, [pc, #68]	@ (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a1a:	4a12      	ldr	r2, [pc, #72]	@ (8002a64 <MX_USART1_UART_Init+0x50>)
 8002a1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a1e:	4b10      	ldr	r3, [pc, #64]	@ (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a20:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002a24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a26:	4b0e      	ldr	r3, [pc, #56]	@ (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a32:	4b0b      	ldr	r3, [pc, #44]	@ (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a38:	4b09      	ldr	r3, [pc, #36]	@ (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a3a:	220c      	movs	r2, #12
 8002a3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a3e:	4b08      	ldr	r3, [pc, #32]	@ (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a44:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a4a:	4805      	ldr	r0, [pc, #20]	@ (8002a60 <MX_USART1_UART_Init+0x4c>)
 8002a4c:	f004 f87d 	bl	8006b4a <HAL_UART_Init>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a56:	f7ff f971 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000838 	.word	0x20000838
 8002a64:	40013800 	.word	0x40013800

08002a68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a70:	f107 0310 	add.w	r3, r7, #16
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a47      	ldr	r2, [pc, #284]	@ (8002ba0 <HAL_UART_MspInit+0x138>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	f040 8086 	bne.w	8002b96 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a8a:	4b46      	ldr	r3, [pc, #280]	@ (8002ba4 <HAL_UART_MspInit+0x13c>)
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	4a45      	ldr	r2, [pc, #276]	@ (8002ba4 <HAL_UART_MspInit+0x13c>)
 8002a90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a94:	6193      	str	r3, [r2, #24]
 8002a96:	4b43      	ldr	r3, [pc, #268]	@ (8002ba4 <HAL_UART_MspInit+0x13c>)
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa2:	4b40      	ldr	r3, [pc, #256]	@ (8002ba4 <HAL_UART_MspInit+0x13c>)
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	4a3f      	ldr	r2, [pc, #252]	@ (8002ba4 <HAL_UART_MspInit+0x13c>)
 8002aa8:	f043 0304 	orr.w	r3, r3, #4
 8002aac:	6193      	str	r3, [r2, #24]
 8002aae:	4b3d      	ldr	r3, [pc, #244]	@ (8002ba4 <HAL_UART_MspInit+0x13c>)
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002aba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac8:	f107 0310 	add.w	r3, r7, #16
 8002acc:	4619      	mov	r1, r3
 8002ace:	4836      	ldr	r0, [pc, #216]	@ (8002ba8 <HAL_UART_MspInit+0x140>)
 8002ad0:	f001 fa02 	bl	8003ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ad4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ad8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae2:	f107 0310 	add.w	r3, r7, #16
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	482f      	ldr	r0, [pc, #188]	@ (8002ba8 <HAL_UART_MspInit+0x140>)
 8002aea:	f001 f9f5 	bl	8003ed8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002aee:	4b2f      	ldr	r3, [pc, #188]	@ (8002bac <HAL_UART_MspInit+0x144>)
 8002af0:	4a2f      	ldr	r2, [pc, #188]	@ (8002bb0 <HAL_UART_MspInit+0x148>)
 8002af2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002af4:	4b2d      	ldr	r3, [pc, #180]	@ (8002bac <HAL_UART_MspInit+0x144>)
 8002af6:	2210      	movs	r2, #16
 8002af8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002afa:	4b2c      	ldr	r3, [pc, #176]	@ (8002bac <HAL_UART_MspInit+0x144>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b00:	4b2a      	ldr	r3, [pc, #168]	@ (8002bac <HAL_UART_MspInit+0x144>)
 8002b02:	2280      	movs	r2, #128	@ 0x80
 8002b04:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b06:	4b29      	ldr	r3, [pc, #164]	@ (8002bac <HAL_UART_MspInit+0x144>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b0c:	4b27      	ldr	r3, [pc, #156]	@ (8002bac <HAL_UART_MspInit+0x144>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002b12:	4b26      	ldr	r3, [pc, #152]	@ (8002bac <HAL_UART_MspInit+0x144>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b18:	4b24      	ldr	r3, [pc, #144]	@ (8002bac <HAL_UART_MspInit+0x144>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002b1e:	4823      	ldr	r0, [pc, #140]	@ (8002bac <HAL_UART_MspInit+0x144>)
 8002b20:	f000 ff38 	bl	8003994 <HAL_DMA_Init>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8002b2a:	f7ff f907 	bl	8001d3c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a1e      	ldr	r2, [pc, #120]	@ (8002bac <HAL_UART_MspInit+0x144>)
 8002b32:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b34:	4a1d      	ldr	r2, [pc, #116]	@ (8002bac <HAL_UART_MspInit+0x144>)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb4 <HAL_UART_MspInit+0x14c>)
 8002b3c:	4a1e      	ldr	r2, [pc, #120]	@ (8002bb8 <HAL_UART_MspInit+0x150>)
 8002b3e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b40:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb4 <HAL_UART_MspInit+0x14c>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b46:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb4 <HAL_UART_MspInit+0x14c>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b4c:	4b19      	ldr	r3, [pc, #100]	@ (8002bb4 <HAL_UART_MspInit+0x14c>)
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b52:	4b18      	ldr	r3, [pc, #96]	@ (8002bb4 <HAL_UART_MspInit+0x14c>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b58:	4b16      	ldr	r3, [pc, #88]	@ (8002bb4 <HAL_UART_MspInit+0x14c>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002b5e:	4b15      	ldr	r3, [pc, #84]	@ (8002bb4 <HAL_UART_MspInit+0x14c>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b64:	4b13      	ldr	r3, [pc, #76]	@ (8002bb4 <HAL_UART_MspInit+0x14c>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002b6a:	4812      	ldr	r0, [pc, #72]	@ (8002bb4 <HAL_UART_MspInit+0x14c>)
 8002b6c:	f000 ff12 	bl	8003994 <HAL_DMA_Init>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8002b76:	f7ff f8e1 	bl	8001d3c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb4 <HAL_UART_MspInit+0x14c>)
 8002b7e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b80:	4a0c      	ldr	r2, [pc, #48]	@ (8002bb4 <HAL_UART_MspInit+0x14c>)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b86:	2200      	movs	r2, #0
 8002b88:	2100      	movs	r1, #0
 8002b8a:	2025      	movs	r0, #37	@ 0x25
 8002b8c:	f000 fecb 	bl	8003926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b90:	2025      	movs	r0, #37	@ 0x25
 8002b92:	f000 fee4 	bl	800395e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b96:	bf00      	nop
 8002b98:	3720      	adds	r7, #32
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40013800 	.word	0x40013800
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40010800 	.word	0x40010800
 8002bac:	20000880 	.word	0x20000880
 8002bb0:	40020044 	.word	0x40020044
 8002bb4:	200008c4 	.word	0x200008c4
 8002bb8:	40020058 	.word	0x40020058

08002bbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
   bl  SystemInit
 8002bbc:	f7ff ff24 	bl	8002a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bc0:	480b      	ldr	r0, [pc, #44]	@ (8002bf0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002bc2:	490c      	ldr	r1, [pc, #48]	@ (8002bf4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8002bf8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc8:	e002      	b.n	8002bd0 <LoopCopyDataInit>

08002bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bce:	3304      	adds	r3, #4

08002bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd4:	d3f9      	bcc.n	8002bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bd6:	4a09      	ldr	r2, [pc, #36]	@ (8002bfc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002bd8:	4c09      	ldr	r4, [pc, #36]	@ (8002c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bdc:	e001      	b.n	8002be2 <LoopFillZerobss>

08002bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002be0:	3204      	adds	r2, #4

08002be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be4:	d3fb      	bcc.n	8002bde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002be6:	f005 fdeb 	bl	80087c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bea:	f7fe ff11 	bl	8001a10 <main>
  bx lr
 8002bee:	4770      	bx	lr
  ldr r0, =_sdata
 8002bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002bf8:	0800b4b4 	.word	0x0800b4b4
  ldr r2, =_sbss
 8002bfc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002c00:	20000a58 	.word	0x20000a58

08002c04 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c04:	e7fe      	b.n	8002c04 <CAN1_RX1_IRQHandler>
	...

08002c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c0c:	4b08      	ldr	r3, [pc, #32]	@ (8002c30 <HAL_Init+0x28>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a07      	ldr	r2, [pc, #28]	@ (8002c30 <HAL_Init+0x28>)
 8002c12:	f043 0310 	orr.w	r3, r3, #16
 8002c16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c18:	2003      	movs	r0, #3
 8002c1a:	f000 fe79 	bl	8003910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c1e:	200f      	movs	r0, #15
 8002c20:	f000 f808 	bl	8002c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c24:	f7ff fda0 	bl	8002768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40022000 	.word	0x40022000

08002c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c3c:	4b12      	ldr	r3, [pc, #72]	@ (8002c88 <HAL_InitTick+0x54>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4b12      	ldr	r3, [pc, #72]	@ (8002c8c <HAL_InitTick+0x58>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	4619      	mov	r1, r3
 8002c46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fe91 	bl	800397a <HAL_SYSTICK_Config>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e00e      	b.n	8002c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b0f      	cmp	r3, #15
 8002c66:	d80a      	bhi.n	8002c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c70:	f000 fe59 	bl	8003926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c74:	4a06      	ldr	r2, [pc, #24]	@ (8002c90 <HAL_InitTick+0x5c>)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	e000      	b.n	8002c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	20000008 	.word	0x20000008
 8002c90:	20000004 	.word	0x20000004

08002c94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c98:	4b05      	ldr	r3, [pc, #20]	@ (8002cb0 <HAL_IncTick+0x1c>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4b05      	ldr	r3, [pc, #20]	@ (8002cb4 <HAL_IncTick+0x20>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	4a03      	ldr	r2, [pc, #12]	@ (8002cb4 <HAL_IncTick+0x20>)
 8002ca6:	6013      	str	r3, [r2, #0]
}
 8002ca8:	bf00      	nop
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr
 8002cb0:	20000008 	.word	0x20000008
 8002cb4:	20000908 	.word	0x20000908

08002cb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return uwTick;
 8002cbc:	4b02      	ldr	r3, [pc, #8]	@ (8002cc8 <HAL_GetTick+0x10>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr
 8002cc8:	20000908 	.word	0x20000908

08002ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cd4:	f7ff fff0 	bl	8002cb8 <HAL_GetTick>
 8002cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce4:	d005      	beq.n	8002cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8002d10 <HAL_Delay+0x44>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4413      	add	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cf2:	bf00      	nop
 8002cf4:	f7ff ffe0 	bl	8002cb8 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d8f7      	bhi.n	8002cf4 <HAL_Delay+0x28>
  {
  }
}
 8002d04:	bf00      	nop
 8002d06:	bf00      	nop
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000008 	.word	0x20000008

08002d14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e0be      	b.n	8002eb4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d109      	bne.n	8002d58 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fe fa00 	bl	8001158 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fcc3 	bl	80036e4 <ADC_ConversionStop_Disable>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d66:	f003 0310 	and.w	r3, r3, #16
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f040 8099 	bne.w	8002ea2 <HAL_ADC_Init+0x18e>
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f040 8095 	bne.w	8002ea2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d80:	f023 0302 	bic.w	r3, r3, #2
 8002d84:	f043 0202 	orr.w	r2, r3, #2
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d94:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	7b1b      	ldrb	r3, [r3, #12]
 8002d9a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d9c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dac:	d003      	beq.n	8002db6 <HAL_ADC_Init+0xa2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d102      	bne.n	8002dbc <HAL_ADC_Init+0xa8>
 8002db6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dba:	e000      	b.n	8002dbe <HAL_ADC_Init+0xaa>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	7d1b      	ldrb	r3, [r3, #20]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d119      	bne.n	8002e00 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	7b1b      	ldrb	r3, [r3, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d109      	bne.n	8002de8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	035a      	lsls	r2, r3, #13
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	e00b      	b.n	8002e00 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dec:	f043 0220 	orr.w	r2, r3, #32
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df8:	f043 0201 	orr.w	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	4b28      	ldr	r3, [pc, #160]	@ (8002ebc <HAL_ADC_Init+0x1a8>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	430b      	orrs	r3, r1
 8002e26:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e30:	d003      	beq.n	8002e3a <HAL_ADC_Init+0x126>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d104      	bne.n	8002e44 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	051b      	lsls	r3, r3, #20
 8002e42:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	4b18      	ldr	r3, [pc, #96]	@ (8002ec0 <HAL_ADC_Init+0x1ac>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d10b      	bne.n	8002e80 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	f023 0303 	bic.w	r3, r3, #3
 8002e76:	f043 0201 	orr.w	r2, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e7e:	e018      	b.n	8002eb2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e84:	f023 0312 	bic.w	r3, r3, #18
 8002e88:	f043 0210 	orr.w	r2, r3, #16
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e94:	f043 0201 	orr.w	r2, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ea0:	e007      	b.n	8002eb2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea6:	f043 0210 	orr.w	r2, r3, #16
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	ffe1f7fd 	.word	0xffe1f7fd
 8002ec0:	ff1f0efe 	.word	0xff1f0efe

08002ec4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_ADC_Start+0x1a>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e098      	b.n	8003010 <HAL_ADC_Start+0x14c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fba2 	bl	8003630 <ADC_Enable>
 8002eec:	4603      	mov	r3, r0
 8002eee:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f040 8087 	bne.w	8003006 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a41      	ldr	r2, [pc, #260]	@ (8003018 <HAL_ADC_Start+0x154>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d105      	bne.n	8002f22 <HAL_ADC_Start+0x5e>
 8002f16:	4b41      	ldr	r3, [pc, #260]	@ (800301c <HAL_ADC_Start+0x158>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d115      	bne.n	8002f4e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f26:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d026      	beq.n	8002f8a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f40:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f44:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f4c:	e01d      	b.n	8002f8a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f52:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a2f      	ldr	r2, [pc, #188]	@ (800301c <HAL_ADC_Start+0x158>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d004      	beq.n	8002f6e <HAL_ADC_Start+0xaa>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a2b      	ldr	r2, [pc, #172]	@ (8003018 <HAL_ADC_Start+0x154>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10d      	bne.n	8002f8a <HAL_ADC_Start+0xc6>
 8002f6e:	4b2b      	ldr	r3, [pc, #172]	@ (800301c <HAL_ADC_Start+0x158>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d007      	beq.n	8002f8a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f82:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d006      	beq.n	8002fa4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9a:	f023 0206 	bic.w	r2, r3, #6
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002fa2:	e002      	b.n	8002faa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f06f 0202 	mvn.w	r2, #2
 8002fba:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002fc6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002fca:	d113      	bne.n	8002ff4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002fd0:	4a11      	ldr	r2, [pc, #68]	@ (8003018 <HAL_ADC_Start+0x154>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d105      	bne.n	8002fe2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002fd6:	4b11      	ldr	r3, [pc, #68]	@ (800301c <HAL_ADC_Start+0x158>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d108      	bne.n	8002ff4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002ff0:	609a      	str	r2, [r3, #8]
 8002ff2:	e00c      	b.n	800300e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	e003      	b.n	800300e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800300e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40012800 	.word	0x40012800
 800301c:	40012400 	.word	0x40012400

08003020 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_ADC_Stop+0x1a>
 8003036:	2302      	movs	r3, #2
 8003038:	e01a      	b.n	8003070 <HAL_ADC_Stop+0x50>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fb4e 	bl	80036e4 <ADC_ConversionStop_Disable>
 8003048:	4603      	mov	r3, r0
 800304a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003056:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800305a:	f023 0301 	bic.w	r3, r3, #1
 800305e:	f043 0201 	orr.w	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800306e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003078:	b590      	push	{r4, r7, lr}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800308e:	f7ff fe13 	bl	8002cb8 <HAL_GetTick>
 8003092:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00b      	beq.n	80030ba <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a6:	f043 0220 	orr.w	r2, r3, #32
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e0d3      	b.n	8003262 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d131      	bne.n	800312c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ce:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d12a      	bne.n	800312c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80030d6:	e021      	b.n	800311c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030de:	d01d      	beq.n	800311c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <HAL_ADC_PollForConversion+0x7e>
 80030e6:	f7ff fde7 	bl	8002cb8 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d212      	bcs.n	800311c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10b      	bne.n	800311c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003108:	f043 0204 	orr.w	r2, r3, #4
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e0a2      	b.n	8003262 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0d6      	beq.n	80030d8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800312a:	e070      	b.n	800320e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800312c:	4b4f      	ldr	r3, [pc, #316]	@ (800326c <HAL_ADC_PollForConversion+0x1f4>)
 800312e:	681c      	ldr	r4, [r3, #0]
 8003130:	2002      	movs	r0, #2
 8003132:	f002 feb5 	bl	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003136:	4603      	mov	r3, r0
 8003138:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6919      	ldr	r1, [r3, #16]
 8003142:	4b4b      	ldr	r3, [pc, #300]	@ (8003270 <HAL_ADC_PollForConversion+0x1f8>)
 8003144:	400b      	ands	r3, r1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d118      	bne.n	800317c <HAL_ADC_PollForConversion+0x104>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68d9      	ldr	r1, [r3, #12]
 8003150:	4b48      	ldr	r3, [pc, #288]	@ (8003274 <HAL_ADC_PollForConversion+0x1fc>)
 8003152:	400b      	ands	r3, r1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d111      	bne.n	800317c <HAL_ADC_PollForConversion+0x104>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6919      	ldr	r1, [r3, #16]
 800315e:	4b46      	ldr	r3, [pc, #280]	@ (8003278 <HAL_ADC_PollForConversion+0x200>)
 8003160:	400b      	ands	r3, r1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d108      	bne.n	8003178 <HAL_ADC_PollForConversion+0x100>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68d9      	ldr	r1, [r3, #12]
 800316c:	4b43      	ldr	r3, [pc, #268]	@ (800327c <HAL_ADC_PollForConversion+0x204>)
 800316e:	400b      	ands	r3, r1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_ADC_PollForConversion+0x100>
 8003174:	2314      	movs	r3, #20
 8003176:	e020      	b.n	80031ba <HAL_ADC_PollForConversion+0x142>
 8003178:	2329      	movs	r3, #41	@ 0x29
 800317a:	e01e      	b.n	80031ba <HAL_ADC_PollForConversion+0x142>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6919      	ldr	r1, [r3, #16]
 8003182:	4b3d      	ldr	r3, [pc, #244]	@ (8003278 <HAL_ADC_PollForConversion+0x200>)
 8003184:	400b      	ands	r3, r1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <HAL_ADC_PollForConversion+0x120>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68d9      	ldr	r1, [r3, #12]
 8003190:	4b3a      	ldr	r3, [pc, #232]	@ (800327c <HAL_ADC_PollForConversion+0x204>)
 8003192:	400b      	ands	r3, r1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00d      	beq.n	80031b4 <HAL_ADC_PollForConversion+0x13c>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6919      	ldr	r1, [r3, #16]
 800319e:	4b38      	ldr	r3, [pc, #224]	@ (8003280 <HAL_ADC_PollForConversion+0x208>)
 80031a0:	400b      	ands	r3, r1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d108      	bne.n	80031b8 <HAL_ADC_PollForConversion+0x140>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68d9      	ldr	r1, [r3, #12]
 80031ac:	4b34      	ldr	r3, [pc, #208]	@ (8003280 <HAL_ADC_PollForConversion+0x208>)
 80031ae:	400b      	ands	r3, r1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_ADC_PollForConversion+0x140>
 80031b4:	2354      	movs	r3, #84	@ 0x54
 80031b6:	e000      	b.n	80031ba <HAL_ADC_PollForConversion+0x142>
 80031b8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80031ba:	fb02 f303 	mul.w	r3, r2, r3
 80031be:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80031c0:	e021      	b.n	8003206 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c8:	d01a      	beq.n	8003200 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d007      	beq.n	80031e0 <HAL_ADC_PollForConversion+0x168>
 80031d0:	f7ff fd72 	bl	8002cb8 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d20f      	bcs.n	8003200 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d90b      	bls.n	8003200 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ec:	f043 0204 	orr.w	r2, r3, #4
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e030      	b.n	8003262 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3301      	adds	r3, #1
 8003204:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	429a      	cmp	r2, r3
 800320c:	d8d9      	bhi.n	80031c2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f06f 0212 	mvn.w	r2, #18
 8003216:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800321c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800322e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003232:	d115      	bne.n	8003260 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003238:	2b00      	cmp	r3, #0
 800323a:	d111      	bne.n	8003260 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003240:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d105      	bne.n	8003260 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003258:	f043 0201 	orr.w	r2, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	bd90      	pop	{r4, r7, pc}
 800326a:	bf00      	nop
 800326c:	20000000 	.word	0x20000000
 8003270:	24924924 	.word	0x24924924
 8003274:	00924924 	.word	0x00924924
 8003278:	12492492 	.word	0x12492492
 800327c:	00492492 	.word	0x00492492
 8003280:	00249249 	.word	0x00249249

08003284 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f003 0320 	and.w	r3, r3, #32
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d03e      	beq.n	800333c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d039      	beq.n	800333c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d105      	bne.n	80032e0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80032ea:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80032ee:	d11d      	bne.n	800332c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d119      	bne.n	800332c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0220 	bic.w	r2, r2, #32
 8003306:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003318:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d105      	bne.n	800332c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003324:	f043 0201 	orr.w	r2, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f874 	bl	800341a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f06f 0212 	mvn.w	r2, #18
 800333a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003342:	2b00      	cmp	r3, #0
 8003344:	d04d      	beq.n	80033e2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d048      	beq.n	80033e2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b00      	cmp	r3, #0
 800335a:	d105      	bne.n	8003368 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003360:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8003372:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8003376:	d012      	beq.n	800339e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003382:	2b00      	cmp	r3, #0
 8003384:	d125      	bne.n	80033d2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003390:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003394:	d11d      	bne.n	80033d2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800339a:	2b00      	cmp	r3, #0
 800339c:	d119      	bne.n	80033d2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033ac:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d105      	bne.n	80033d2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ca:	f043 0201 	orr.w	r2, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f9c7 	bl	8003766 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 020c 	mvn.w	r2, #12
 80033e0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d012      	beq.n	8003412 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00d      	beq.n	8003412 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f812 	bl	800342c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0201 	mvn.w	r2, #1
 8003410:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003412:	bf00      	nop
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr

0800342c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
	...

08003440 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_ADC_ConfigChannel+0x20>
 800345c:	2302      	movs	r3, #2
 800345e:	e0dc      	b.n	800361a <HAL_ADC_ConfigChannel+0x1da>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b06      	cmp	r3, #6
 800346e:	d81c      	bhi.n	80034aa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	3b05      	subs	r3, #5
 8003482:	221f      	movs	r2, #31
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	4019      	ands	r1, r3
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	3b05      	subs	r3, #5
 800349c:	fa00 f203 	lsl.w	r2, r0, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80034a8:	e03c      	b.n	8003524 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	d81c      	bhi.n	80034ec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	3b23      	subs	r3, #35	@ 0x23
 80034c4:	221f      	movs	r2, #31
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43db      	mvns	r3, r3
 80034cc:	4019      	ands	r1, r3
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	3b23      	subs	r3, #35	@ 0x23
 80034de:	fa00 f203 	lsl.w	r2, r0, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80034ea:	e01b      	b.n	8003524 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	3b41      	subs	r3, #65	@ 0x41
 80034fe:	221f      	movs	r2, #31
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	4019      	ands	r1, r3
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	3b41      	subs	r3, #65	@ 0x41
 8003518:	fa00 f203 	lsl.w	r2, r0, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b09      	cmp	r3, #9
 800352a:	d91c      	bls.n	8003566 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68d9      	ldr	r1, [r3, #12]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4613      	mov	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4413      	add	r3, r2
 800353c:	3b1e      	subs	r3, #30
 800353e:	2207      	movs	r2, #7
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	4019      	ands	r1, r3
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	6898      	ldr	r0, [r3, #8]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4613      	mov	r3, r2
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4413      	add	r3, r2
 8003556:	3b1e      	subs	r3, #30
 8003558:	fa00 f203 	lsl.w	r2, r0, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	60da      	str	r2, [r3, #12]
 8003564:	e019      	b.n	800359a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6919      	ldr	r1, [r3, #16]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	4613      	mov	r3, r2
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	4413      	add	r3, r2
 8003576:	2207      	movs	r2, #7
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	4019      	ands	r1, r3
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	6898      	ldr	r0, [r3, #8]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4613      	mov	r3, r2
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	4413      	add	r3, r2
 800358e:	fa00 f203 	lsl.w	r2, r0, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b10      	cmp	r3, #16
 80035a0:	d003      	beq.n	80035aa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035a6:	2b11      	cmp	r3, #17
 80035a8:	d132      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003624 <HAL_ADC_ConfigChannel+0x1e4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d125      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d126      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80035d0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b10      	cmp	r3, #16
 80035d8:	d11a      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035da:	4b13      	ldr	r3, [pc, #76]	@ (8003628 <HAL_ADC_ConfigChannel+0x1e8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a13      	ldr	r2, [pc, #76]	@ (800362c <HAL_ADC_ConfigChannel+0x1ec>)
 80035e0:	fba2 2303 	umull	r2, r3, r2, r3
 80035e4:	0c9a      	lsrs	r2, r3, #18
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035f0:	e002      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f9      	bne.n	80035f2 <HAL_ADC_ConfigChannel+0x1b2>
 80035fe:	e007      	b.n	8003610 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003604:	f043 0220 	orr.w	r2, r3, #32
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003618:	7bfb      	ldrb	r3, [r7, #15]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr
 8003624:	40012400 	.word	0x40012400
 8003628:	20000000 	.word	0x20000000
 800362c:	431bde83 	.word	0x431bde83

08003630 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b01      	cmp	r3, #1
 800364c:	d040      	beq.n	80036d0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0201 	orr.w	r2, r2, #1
 800365c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800365e:	4b1f      	ldr	r3, [pc, #124]	@ (80036dc <ADC_Enable+0xac>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a1f      	ldr	r2, [pc, #124]	@ (80036e0 <ADC_Enable+0xb0>)
 8003664:	fba2 2303 	umull	r2, r3, r2, r3
 8003668:	0c9b      	lsrs	r3, r3, #18
 800366a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800366c:	e002      	b.n	8003674 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	3b01      	subs	r3, #1
 8003672:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f9      	bne.n	800366e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800367a:	f7ff fb1d 	bl	8002cb8 <HAL_GetTick>
 800367e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003680:	e01f      	b.n	80036c2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003682:	f7ff fb19 	bl	8002cb8 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d918      	bls.n	80036c2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b01      	cmp	r3, #1
 800369c:	d011      	beq.n	80036c2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a2:	f043 0210 	orr.w	r2, r3, #16
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ae:	f043 0201 	orr.w	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e007      	b.n	80036d2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d1d8      	bne.n	8003682 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000000 	.word	0x20000000
 80036e0:	431bde83 	.word	0x431bde83

080036e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d12e      	bne.n	800375c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0201 	bic.w	r2, r2, #1
 800370c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800370e:	f7ff fad3 	bl	8002cb8 <HAL_GetTick>
 8003712:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003714:	e01b      	b.n	800374e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003716:	f7ff facf 	bl	8002cb8 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d914      	bls.n	800374e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b01      	cmp	r3, #1
 8003730:	d10d      	bne.n	800374e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003736:	f043 0210 	orr.w	r2, r3, #16
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003742:	f043 0201 	orr.w	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e007      	b.n	800375e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b01      	cmp	r3, #1
 800375a:	d0dc      	beq.n	8003716 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003788:	4b0c      	ldr	r3, [pc, #48]	@ (80037bc <__NVIC_SetPriorityGrouping+0x44>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003794:	4013      	ands	r3, r2
 8003796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037aa:	4a04      	ldr	r2, [pc, #16]	@ (80037bc <__NVIC_SetPriorityGrouping+0x44>)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	60d3      	str	r3, [r2, #12]
}
 80037b0:	bf00      	nop
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	e000ed00 	.word	0xe000ed00

080037c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037c4:	4b04      	ldr	r3, [pc, #16]	@ (80037d8 <__NVIC_GetPriorityGrouping+0x18>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	0a1b      	lsrs	r3, r3, #8
 80037ca:	f003 0307 	and.w	r3, r3, #7
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	db0b      	blt.n	8003806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	f003 021f 	and.w	r2, r3, #31
 80037f4:	4906      	ldr	r1, [pc, #24]	@ (8003810 <__NVIC_EnableIRQ+0x34>)
 80037f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	2001      	movs	r0, #1
 80037fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr
 8003810:	e000e100 	.word	0xe000e100

08003814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	4603      	mov	r3, r0
 800381c:	6039      	str	r1, [r7, #0]
 800381e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003824:	2b00      	cmp	r3, #0
 8003826:	db0a      	blt.n	800383e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	b2da      	uxtb	r2, r3
 800382c:	490c      	ldr	r1, [pc, #48]	@ (8003860 <__NVIC_SetPriority+0x4c>)
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	0112      	lsls	r2, r2, #4
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	440b      	add	r3, r1
 8003838:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800383c:	e00a      	b.n	8003854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	b2da      	uxtb	r2, r3
 8003842:	4908      	ldr	r1, [pc, #32]	@ (8003864 <__NVIC_SetPriority+0x50>)
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	3b04      	subs	r3, #4
 800384c:	0112      	lsls	r2, r2, #4
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	440b      	add	r3, r1
 8003852:	761a      	strb	r2, [r3, #24]
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	e000e100 	.word	0xe000e100
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003868:	b480      	push	{r7}
 800386a:	b089      	sub	sp, #36	@ 0x24
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f1c3 0307 	rsb	r3, r3, #7
 8003882:	2b04      	cmp	r3, #4
 8003884:	bf28      	it	cs
 8003886:	2304      	movcs	r3, #4
 8003888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3304      	adds	r3, #4
 800388e:	2b06      	cmp	r3, #6
 8003890:	d902      	bls.n	8003898 <NVIC_EncodePriority+0x30>
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	3b03      	subs	r3, #3
 8003896:	e000      	b.n	800389a <NVIC_EncodePriority+0x32>
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800389c:	f04f 32ff 	mov.w	r2, #4294967295
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43da      	mvns	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	401a      	ands	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038b0:	f04f 31ff 	mov.w	r1, #4294967295
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ba:	43d9      	mvns	r1, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c0:	4313      	orrs	r3, r2
         );
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3724      	adds	r7, #36	@ 0x24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr

080038cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038dc:	d301      	bcc.n	80038e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038de:	2301      	movs	r3, #1
 80038e0:	e00f      	b.n	8003902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038e2:	4a0a      	ldr	r2, [pc, #40]	@ (800390c <SysTick_Config+0x40>)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ea:	210f      	movs	r1, #15
 80038ec:	f04f 30ff 	mov.w	r0, #4294967295
 80038f0:	f7ff ff90 	bl	8003814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038f4:	4b05      	ldr	r3, [pc, #20]	@ (800390c <SysTick_Config+0x40>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038fa:	4b04      	ldr	r3, [pc, #16]	@ (800390c <SysTick_Config+0x40>)
 80038fc:	2207      	movs	r2, #7
 80038fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	e000e010 	.word	0xe000e010

08003910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff ff2d 	bl	8003778 <__NVIC_SetPriorityGrouping>
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003926:	b580      	push	{r7, lr}
 8003928:	b086      	sub	sp, #24
 800392a:	af00      	add	r7, sp, #0
 800392c:	4603      	mov	r3, r0
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003938:	f7ff ff42 	bl	80037c0 <__NVIC_GetPriorityGrouping>
 800393c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	6978      	ldr	r0, [r7, #20]
 8003944:	f7ff ff90 	bl	8003868 <NVIC_EncodePriority>
 8003948:	4602      	mov	r2, r0
 800394a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800394e:	4611      	mov	r1, r2
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff ff5f 	bl	8003814 <__NVIC_SetPriority>
}
 8003956:	bf00      	nop
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	4603      	mov	r3, r0
 8003966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff ff35 	bl	80037dc <__NVIC_EnableIRQ>
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff ffa2 	bl	80038cc <SysTick_Config>
 8003988:	4603      	mov	r3, r0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e043      	b.n	8003a32 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	4b22      	ldr	r3, [pc, #136]	@ (8003a3c <HAL_DMA_Init+0xa8>)
 80039b2:	4413      	add	r3, r2
 80039b4:	4a22      	ldr	r2, [pc, #136]	@ (8003a40 <HAL_DMA_Init+0xac>)
 80039b6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ba:	091b      	lsrs	r3, r3, #4
 80039bc:	009a      	lsls	r2, r3, #2
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003a44 <HAL_DMA_Init+0xb0>)
 80039c6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80039de:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80039e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80039ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr
 8003a3c:	bffdfff8 	.word	0xbffdfff8
 8003a40:	cccccccd 	.word	0xcccccccd
 8003a44:	40020000 	.word	0x40020000

08003a48 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_DMA_Start_IT+0x20>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e04b      	b.n	8003b00 <HAL_DMA_Start_IT+0xb8>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d13a      	bne.n	8003af2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0201 	bic.w	r2, r2, #1
 8003a98:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	68b9      	ldr	r1, [r7, #8]
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f9eb 	bl	8003e7c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d008      	beq.n	8003ac0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 020e 	orr.w	r2, r2, #14
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	e00f      	b.n	8003ae0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0204 	bic.w	r2, r2, #4
 8003ace:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 020a 	orr.w	r2, r2, #10
 8003ade:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	e005      	b.n	8003afe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003afa:	2302      	movs	r3, #2
 8003afc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d008      	beq.n	8003b32 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2204      	movs	r2, #4
 8003b24:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e020      	b.n	8003b74 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 020e 	bic.w	r2, r2, #14
 8003b40:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0201 	bic.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b60:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr
	...

08003b80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d005      	beq.n	8003ba4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2204      	movs	r2, #4
 8003b9c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	73fb      	strb	r3, [r7, #15]
 8003ba2:	e051      	b.n	8003c48 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 020e 	bic.w	r2, r2, #14
 8003bb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0201 	bic.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a22      	ldr	r2, [pc, #136]	@ (8003c54 <HAL_DMA_Abort_IT+0xd4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d029      	beq.n	8003c22 <HAL_DMA_Abort_IT+0xa2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a21      	ldr	r2, [pc, #132]	@ (8003c58 <HAL_DMA_Abort_IT+0xd8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d022      	beq.n	8003c1e <HAL_DMA_Abort_IT+0x9e>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8003c5c <HAL_DMA_Abort_IT+0xdc>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d01a      	beq.n	8003c18 <HAL_DMA_Abort_IT+0x98>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a1e      	ldr	r2, [pc, #120]	@ (8003c60 <HAL_DMA_Abort_IT+0xe0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d012      	beq.n	8003c12 <HAL_DMA_Abort_IT+0x92>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8003c64 <HAL_DMA_Abort_IT+0xe4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d00a      	beq.n	8003c0c <HAL_DMA_Abort_IT+0x8c>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a1b      	ldr	r2, [pc, #108]	@ (8003c68 <HAL_DMA_Abort_IT+0xe8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d102      	bne.n	8003c06 <HAL_DMA_Abort_IT+0x86>
 8003c00:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003c04:	e00e      	b.n	8003c24 <HAL_DMA_Abort_IT+0xa4>
 8003c06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c0a:	e00b      	b.n	8003c24 <HAL_DMA_Abort_IT+0xa4>
 8003c0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c10:	e008      	b.n	8003c24 <HAL_DMA_Abort_IT+0xa4>
 8003c12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c16:	e005      	b.n	8003c24 <HAL_DMA_Abort_IT+0xa4>
 8003c18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c1c:	e002      	b.n	8003c24 <HAL_DMA_Abort_IT+0xa4>
 8003c1e:	2310      	movs	r3, #16
 8003c20:	e000      	b.n	8003c24 <HAL_DMA_Abort_IT+0xa4>
 8003c22:	2301      	movs	r3, #1
 8003c24:	4a11      	ldr	r2, [pc, #68]	@ (8003c6c <HAL_DMA_Abort_IT+0xec>)
 8003c26:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	4798      	blx	r3
    } 
  }
  return status;
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40020008 	.word	0x40020008
 8003c58:	4002001c 	.word	0x4002001c
 8003c5c:	40020030 	.word	0x40020030
 8003c60:	40020044 	.word	0x40020044
 8003c64:	40020058 	.word	0x40020058
 8003c68:	4002006c 	.word	0x4002006c
 8003c6c:	40020000 	.word	0x40020000

08003c70 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d04f      	beq.n	8003d38 <HAL_DMA_IRQHandler+0xc8>
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d04a      	beq.n	8003d38 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0320 	and.w	r3, r3, #32
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d107      	bne.n	8003cc0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0204 	bic.w	r2, r2, #4
 8003cbe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a66      	ldr	r2, [pc, #408]	@ (8003e60 <HAL_DMA_IRQHandler+0x1f0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d029      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xae>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a65      	ldr	r2, [pc, #404]	@ (8003e64 <HAL_DMA_IRQHandler+0x1f4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d022      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xaa>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a63      	ldr	r2, [pc, #396]	@ (8003e68 <HAL_DMA_IRQHandler+0x1f8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d01a      	beq.n	8003d14 <HAL_DMA_IRQHandler+0xa4>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a62      	ldr	r2, [pc, #392]	@ (8003e6c <HAL_DMA_IRQHandler+0x1fc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d012      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x9e>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a60      	ldr	r2, [pc, #384]	@ (8003e70 <HAL_DMA_IRQHandler+0x200>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00a      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x98>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a5f      	ldr	r2, [pc, #380]	@ (8003e74 <HAL_DMA_IRQHandler+0x204>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d102      	bne.n	8003d02 <HAL_DMA_IRQHandler+0x92>
 8003cfc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003d00:	e00e      	b.n	8003d20 <HAL_DMA_IRQHandler+0xb0>
 8003d02:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003d06:	e00b      	b.n	8003d20 <HAL_DMA_IRQHandler+0xb0>
 8003d08:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003d0c:	e008      	b.n	8003d20 <HAL_DMA_IRQHandler+0xb0>
 8003d0e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003d12:	e005      	b.n	8003d20 <HAL_DMA_IRQHandler+0xb0>
 8003d14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d18:	e002      	b.n	8003d20 <HAL_DMA_IRQHandler+0xb0>
 8003d1a:	2340      	movs	r3, #64	@ 0x40
 8003d1c:	e000      	b.n	8003d20 <HAL_DMA_IRQHandler+0xb0>
 8003d1e:	2304      	movs	r3, #4
 8003d20:	4a55      	ldr	r2, [pc, #340]	@ (8003e78 <HAL_DMA_IRQHandler+0x208>)
 8003d22:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 8094 	beq.w	8003e56 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003d36:	e08e      	b.n	8003e56 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4013      	ands	r3, r2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d056      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x186>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d051      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10b      	bne.n	8003d78 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 020a 	bic.w	r2, r2, #10
 8003d6e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a38      	ldr	r2, [pc, #224]	@ (8003e60 <HAL_DMA_IRQHandler+0x1f0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d029      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0x166>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a37      	ldr	r2, [pc, #220]	@ (8003e64 <HAL_DMA_IRQHandler+0x1f4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d022      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x162>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a35      	ldr	r2, [pc, #212]	@ (8003e68 <HAL_DMA_IRQHandler+0x1f8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d01a      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x15c>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a34      	ldr	r2, [pc, #208]	@ (8003e6c <HAL_DMA_IRQHandler+0x1fc>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d012      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x156>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a32      	ldr	r2, [pc, #200]	@ (8003e70 <HAL_DMA_IRQHandler+0x200>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00a      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x150>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a31      	ldr	r2, [pc, #196]	@ (8003e74 <HAL_DMA_IRQHandler+0x204>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d102      	bne.n	8003dba <HAL_DMA_IRQHandler+0x14a>
 8003db4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003db8:	e00e      	b.n	8003dd8 <HAL_DMA_IRQHandler+0x168>
 8003dba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dbe:	e00b      	b.n	8003dd8 <HAL_DMA_IRQHandler+0x168>
 8003dc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003dc4:	e008      	b.n	8003dd8 <HAL_DMA_IRQHandler+0x168>
 8003dc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003dca:	e005      	b.n	8003dd8 <HAL_DMA_IRQHandler+0x168>
 8003dcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003dd0:	e002      	b.n	8003dd8 <HAL_DMA_IRQHandler+0x168>
 8003dd2:	2320      	movs	r3, #32
 8003dd4:	e000      	b.n	8003dd8 <HAL_DMA_IRQHandler+0x168>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	4a27      	ldr	r2, [pc, #156]	@ (8003e78 <HAL_DMA_IRQHandler+0x208>)
 8003dda:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d034      	beq.n	8003e56 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003df4:	e02f      	b.n	8003e56 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	2208      	movs	r2, #8
 8003dfc:	409a      	lsls	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4013      	ands	r3, r2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d028      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x1e8>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d023      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 020e 	bic.w	r2, r2, #14
 8003e1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e28:	2101      	movs	r1, #1
 8003e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e2e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d004      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	4798      	blx	r3
    }
  }
  return;
 8003e56:	bf00      	nop
 8003e58:	bf00      	nop
}
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40020008 	.word	0x40020008
 8003e64:	4002001c 	.word	0x4002001c
 8003e68:	40020030 	.word	0x40020030
 8003e6c:	40020044 	.word	0x40020044
 8003e70:	40020058 	.word	0x40020058
 8003e74:	4002006c 	.word	0x4002006c
 8003e78:	40020000 	.word	0x40020000

08003e7c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
 8003e88:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e92:	2101      	movs	r1, #1
 8003e94:	fa01 f202 	lsl.w	r2, r1, r2
 8003e98:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b10      	cmp	r3, #16
 8003ea8:	d108      	bne.n	8003ebc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003eba:	e007      	b.n	8003ecc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	60da      	str	r2, [r3, #12]
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bc80      	pop	{r7}
 8003ed4:	4770      	bx	lr
	...

08003ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b08b      	sub	sp, #44	@ 0x2c
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eea:	e169      	b.n	80041c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003eec:	2201      	movs	r2, #1
 8003eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69fa      	ldr	r2, [r7, #28]
 8003efc:	4013      	ands	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	f040 8158 	bne.w	80041ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	4a9a      	ldr	r2, [pc, #616]	@ (8004178 <HAL_GPIO_Init+0x2a0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d05e      	beq.n	8003fd2 <HAL_GPIO_Init+0xfa>
 8003f14:	4a98      	ldr	r2, [pc, #608]	@ (8004178 <HAL_GPIO_Init+0x2a0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d875      	bhi.n	8004006 <HAL_GPIO_Init+0x12e>
 8003f1a:	4a98      	ldr	r2, [pc, #608]	@ (800417c <HAL_GPIO_Init+0x2a4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d058      	beq.n	8003fd2 <HAL_GPIO_Init+0xfa>
 8003f20:	4a96      	ldr	r2, [pc, #600]	@ (800417c <HAL_GPIO_Init+0x2a4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d86f      	bhi.n	8004006 <HAL_GPIO_Init+0x12e>
 8003f26:	4a96      	ldr	r2, [pc, #600]	@ (8004180 <HAL_GPIO_Init+0x2a8>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d052      	beq.n	8003fd2 <HAL_GPIO_Init+0xfa>
 8003f2c:	4a94      	ldr	r2, [pc, #592]	@ (8004180 <HAL_GPIO_Init+0x2a8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d869      	bhi.n	8004006 <HAL_GPIO_Init+0x12e>
 8003f32:	4a94      	ldr	r2, [pc, #592]	@ (8004184 <HAL_GPIO_Init+0x2ac>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d04c      	beq.n	8003fd2 <HAL_GPIO_Init+0xfa>
 8003f38:	4a92      	ldr	r2, [pc, #584]	@ (8004184 <HAL_GPIO_Init+0x2ac>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d863      	bhi.n	8004006 <HAL_GPIO_Init+0x12e>
 8003f3e:	4a92      	ldr	r2, [pc, #584]	@ (8004188 <HAL_GPIO_Init+0x2b0>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d046      	beq.n	8003fd2 <HAL_GPIO_Init+0xfa>
 8003f44:	4a90      	ldr	r2, [pc, #576]	@ (8004188 <HAL_GPIO_Init+0x2b0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d85d      	bhi.n	8004006 <HAL_GPIO_Init+0x12e>
 8003f4a:	2b12      	cmp	r3, #18
 8003f4c:	d82a      	bhi.n	8003fa4 <HAL_GPIO_Init+0xcc>
 8003f4e:	2b12      	cmp	r3, #18
 8003f50:	d859      	bhi.n	8004006 <HAL_GPIO_Init+0x12e>
 8003f52:	a201      	add	r2, pc, #4	@ (adr r2, 8003f58 <HAL_GPIO_Init+0x80>)
 8003f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f58:	08003fd3 	.word	0x08003fd3
 8003f5c:	08003fad 	.word	0x08003fad
 8003f60:	08003fbf 	.word	0x08003fbf
 8003f64:	08004001 	.word	0x08004001
 8003f68:	08004007 	.word	0x08004007
 8003f6c:	08004007 	.word	0x08004007
 8003f70:	08004007 	.word	0x08004007
 8003f74:	08004007 	.word	0x08004007
 8003f78:	08004007 	.word	0x08004007
 8003f7c:	08004007 	.word	0x08004007
 8003f80:	08004007 	.word	0x08004007
 8003f84:	08004007 	.word	0x08004007
 8003f88:	08004007 	.word	0x08004007
 8003f8c:	08004007 	.word	0x08004007
 8003f90:	08004007 	.word	0x08004007
 8003f94:	08004007 	.word	0x08004007
 8003f98:	08004007 	.word	0x08004007
 8003f9c:	08003fb5 	.word	0x08003fb5
 8003fa0:	08003fc9 	.word	0x08003fc9
 8003fa4:	4a79      	ldr	r2, [pc, #484]	@ (800418c <HAL_GPIO_Init+0x2b4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d013      	beq.n	8003fd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003faa:	e02c      	b.n	8004006 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	623b      	str	r3, [r7, #32]
          break;
 8003fb2:	e029      	b.n	8004008 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	623b      	str	r3, [r7, #32]
          break;
 8003fbc:	e024      	b.n	8004008 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	3308      	adds	r3, #8
 8003fc4:	623b      	str	r3, [r7, #32]
          break;
 8003fc6:	e01f      	b.n	8004008 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	623b      	str	r3, [r7, #32]
          break;
 8003fd0:	e01a      	b.n	8004008 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d102      	bne.n	8003fe0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003fda:	2304      	movs	r3, #4
 8003fdc:	623b      	str	r3, [r7, #32]
          break;
 8003fde:	e013      	b.n	8004008 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d105      	bne.n	8003ff4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fe8:	2308      	movs	r3, #8
 8003fea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	611a      	str	r2, [r3, #16]
          break;
 8003ff2:	e009      	b.n	8004008 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ff4:	2308      	movs	r3, #8
 8003ff6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69fa      	ldr	r2, [r7, #28]
 8003ffc:	615a      	str	r2, [r3, #20]
          break;
 8003ffe:	e003      	b.n	8004008 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004000:	2300      	movs	r3, #0
 8004002:	623b      	str	r3, [r7, #32]
          break;
 8004004:	e000      	b.n	8004008 <HAL_GPIO_Init+0x130>
          break;
 8004006:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	2bff      	cmp	r3, #255	@ 0xff
 800400c:	d801      	bhi.n	8004012 <HAL_GPIO_Init+0x13a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	e001      	b.n	8004016 <HAL_GPIO_Init+0x13e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3304      	adds	r3, #4
 8004016:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	2bff      	cmp	r3, #255	@ 0xff
 800401c:	d802      	bhi.n	8004024 <HAL_GPIO_Init+0x14c>
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	e002      	b.n	800402a <HAL_GPIO_Init+0x152>
 8004024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004026:	3b08      	subs	r3, #8
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	210f      	movs	r1, #15
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	fa01 f303 	lsl.w	r3, r1, r3
 8004038:	43db      	mvns	r3, r3
 800403a:	401a      	ands	r2, r3
 800403c:	6a39      	ldr	r1, [r7, #32]
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	fa01 f303 	lsl.w	r3, r1, r3
 8004044:	431a      	orrs	r2, r3
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 80b1 	beq.w	80041ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004058:	4b4d      	ldr	r3, [pc, #308]	@ (8004190 <HAL_GPIO_Init+0x2b8>)
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	4a4c      	ldr	r2, [pc, #304]	@ (8004190 <HAL_GPIO_Init+0x2b8>)
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	6193      	str	r3, [r2, #24]
 8004064:	4b4a      	ldr	r3, [pc, #296]	@ (8004190 <HAL_GPIO_Init+0x2b8>)
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	60bb      	str	r3, [r7, #8]
 800406e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004070:	4a48      	ldr	r2, [pc, #288]	@ (8004194 <HAL_GPIO_Init+0x2bc>)
 8004072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004074:	089b      	lsrs	r3, r3, #2
 8004076:	3302      	adds	r3, #2
 8004078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800407c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800407e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	220f      	movs	r2, #15
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	43db      	mvns	r3, r3
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4013      	ands	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a40      	ldr	r2, [pc, #256]	@ (8004198 <HAL_GPIO_Init+0x2c0>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d013      	beq.n	80040c4 <HAL_GPIO_Init+0x1ec>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a3f      	ldr	r2, [pc, #252]	@ (800419c <HAL_GPIO_Init+0x2c4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00d      	beq.n	80040c0 <HAL_GPIO_Init+0x1e8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a3e      	ldr	r2, [pc, #248]	@ (80041a0 <HAL_GPIO_Init+0x2c8>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d007      	beq.n	80040bc <HAL_GPIO_Init+0x1e4>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a3d      	ldr	r2, [pc, #244]	@ (80041a4 <HAL_GPIO_Init+0x2cc>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d101      	bne.n	80040b8 <HAL_GPIO_Init+0x1e0>
 80040b4:	2303      	movs	r3, #3
 80040b6:	e006      	b.n	80040c6 <HAL_GPIO_Init+0x1ee>
 80040b8:	2304      	movs	r3, #4
 80040ba:	e004      	b.n	80040c6 <HAL_GPIO_Init+0x1ee>
 80040bc:	2302      	movs	r3, #2
 80040be:	e002      	b.n	80040c6 <HAL_GPIO_Init+0x1ee>
 80040c0:	2301      	movs	r3, #1
 80040c2:	e000      	b.n	80040c6 <HAL_GPIO_Init+0x1ee>
 80040c4:	2300      	movs	r3, #0
 80040c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040c8:	f002 0203 	and.w	r2, r2, #3
 80040cc:	0092      	lsls	r2, r2, #2
 80040ce:	4093      	lsls	r3, r2
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80040d6:	492f      	ldr	r1, [pc, #188]	@ (8004194 <HAL_GPIO_Init+0x2bc>)
 80040d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040da:	089b      	lsrs	r3, r3, #2
 80040dc:	3302      	adds	r3, #2
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d006      	beq.n	80040fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80040f0:	4b2d      	ldr	r3, [pc, #180]	@ (80041a8 <HAL_GPIO_Init+0x2d0>)
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	492c      	ldr	r1, [pc, #176]	@ (80041a8 <HAL_GPIO_Init+0x2d0>)
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	608b      	str	r3, [r1, #8]
 80040fc:	e006      	b.n	800410c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80040fe:	4b2a      	ldr	r3, [pc, #168]	@ (80041a8 <HAL_GPIO_Init+0x2d0>)
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	43db      	mvns	r3, r3
 8004106:	4928      	ldr	r1, [pc, #160]	@ (80041a8 <HAL_GPIO_Init+0x2d0>)
 8004108:	4013      	ands	r3, r2
 800410a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d006      	beq.n	8004126 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004118:	4b23      	ldr	r3, [pc, #140]	@ (80041a8 <HAL_GPIO_Init+0x2d0>)
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	4922      	ldr	r1, [pc, #136]	@ (80041a8 <HAL_GPIO_Init+0x2d0>)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	4313      	orrs	r3, r2
 8004122:	60cb      	str	r3, [r1, #12]
 8004124:	e006      	b.n	8004134 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004126:	4b20      	ldr	r3, [pc, #128]	@ (80041a8 <HAL_GPIO_Init+0x2d0>)
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	43db      	mvns	r3, r3
 800412e:	491e      	ldr	r1, [pc, #120]	@ (80041a8 <HAL_GPIO_Init+0x2d0>)
 8004130:	4013      	ands	r3, r2
 8004132:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d006      	beq.n	800414e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004140:	4b19      	ldr	r3, [pc, #100]	@ (80041a8 <HAL_GPIO_Init+0x2d0>)
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	4918      	ldr	r1, [pc, #96]	@ (80041a8 <HAL_GPIO_Init+0x2d0>)
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	4313      	orrs	r3, r2
 800414a:	604b      	str	r3, [r1, #4]
 800414c:	e006      	b.n	800415c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800414e:	4b16      	ldr	r3, [pc, #88]	@ (80041a8 <HAL_GPIO_Init+0x2d0>)
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	43db      	mvns	r3, r3
 8004156:	4914      	ldr	r1, [pc, #80]	@ (80041a8 <HAL_GPIO_Init+0x2d0>)
 8004158:	4013      	ands	r3, r2
 800415a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d021      	beq.n	80041ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004168:	4b0f      	ldr	r3, [pc, #60]	@ (80041a8 <HAL_GPIO_Init+0x2d0>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	490e      	ldr	r1, [pc, #56]	@ (80041a8 <HAL_GPIO_Init+0x2d0>)
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	4313      	orrs	r3, r2
 8004172:	600b      	str	r3, [r1, #0]
 8004174:	e021      	b.n	80041ba <HAL_GPIO_Init+0x2e2>
 8004176:	bf00      	nop
 8004178:	10320000 	.word	0x10320000
 800417c:	10310000 	.word	0x10310000
 8004180:	10220000 	.word	0x10220000
 8004184:	10210000 	.word	0x10210000
 8004188:	10120000 	.word	0x10120000
 800418c:	10110000 	.word	0x10110000
 8004190:	40021000 	.word	0x40021000
 8004194:	40010000 	.word	0x40010000
 8004198:	40010800 	.word	0x40010800
 800419c:	40010c00 	.word	0x40010c00
 80041a0:	40011000 	.word	0x40011000
 80041a4:	40011400 	.word	0x40011400
 80041a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80041ac:	4b0b      	ldr	r3, [pc, #44]	@ (80041dc <HAL_GPIO_Init+0x304>)
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	43db      	mvns	r3, r3
 80041b4:	4909      	ldr	r1, [pc, #36]	@ (80041dc <HAL_GPIO_Init+0x304>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80041ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041bc:	3301      	adds	r3, #1
 80041be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f47f ae8e 	bne.w	8003eec <HAL_GPIO_Init+0x14>
  }
}
 80041d0:	bf00      	nop
 80041d2:	bf00      	nop
 80041d4:	372c      	adds	r7, #44	@ 0x2c
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr
 80041dc:	40010400 	.word	0x40010400

080041e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	887b      	ldrh	r3, [r7, #2]
 80041f2:	4013      	ands	r3, r2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041f8:	2301      	movs	r3, #1
 80041fa:	73fb      	strb	r3, [r7, #15]
 80041fc:	e001      	b.n	8004202 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041fe:	2300      	movs	r3, #0
 8004200:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004202:	7bfb      	ldrb	r3, [r7, #15]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr

0800420e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	460b      	mov	r3, r1
 8004218:	807b      	strh	r3, [r7, #2]
 800421a:	4613      	mov	r3, r2
 800421c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800421e:	787b      	ldrb	r3, [r7, #1]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004224:	887a      	ldrh	r2, [r7, #2]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800422a:	e003      	b.n	8004234 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800422c:	887b      	ldrh	r3, [r7, #2]
 800422e:	041a      	lsls	r2, r3, #16
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	611a      	str	r2, [r3, #16]
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr
	...

08004240 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800424a:	4b08      	ldr	r3, [pc, #32]	@ (800426c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800424c:	695a      	ldr	r2, [r3, #20]
 800424e:	88fb      	ldrh	r3, [r7, #6]
 8004250:	4013      	ands	r3, r2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d006      	beq.n	8004264 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004256:	4a05      	ldr	r2, [pc, #20]	@ (800426c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004258:	88fb      	ldrh	r3, [r7, #6]
 800425a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800425c:	88fb      	ldrh	r3, [r7, #6]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 f806 	bl	8004270 <HAL_GPIO_EXTI_Callback>
  }
}
 8004264:	bf00      	nop
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40010400 	.word	0x40010400

08004270 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr

08004284 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e12b      	b.n	80044ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fd f998 	bl	80015e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2224      	movs	r2, #36	@ 0x24
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0201 	bic.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042e8:	f001 fd94 	bl	8005e14 <HAL_RCC_GetPCLK1Freq>
 80042ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	4a81      	ldr	r2, [pc, #516]	@ (80044f8 <HAL_I2C_Init+0x274>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d807      	bhi.n	8004308 <HAL_I2C_Init+0x84>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4a80      	ldr	r2, [pc, #512]	@ (80044fc <HAL_I2C_Init+0x278>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	bf94      	ite	ls
 8004300:	2301      	movls	r3, #1
 8004302:	2300      	movhi	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	e006      	b.n	8004316 <HAL_I2C_Init+0x92>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4a7d      	ldr	r2, [pc, #500]	@ (8004500 <HAL_I2C_Init+0x27c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	bf94      	ite	ls
 8004310:	2301      	movls	r3, #1
 8004312:	2300      	movhi	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e0e7      	b.n	80044ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4a78      	ldr	r2, [pc, #480]	@ (8004504 <HAL_I2C_Init+0x280>)
 8004322:	fba2 2303 	umull	r2, r3, r2, r3
 8004326:	0c9b      	lsrs	r3, r3, #18
 8004328:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	430a      	orrs	r2, r1
 800433c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	4a6a      	ldr	r2, [pc, #424]	@ (80044f8 <HAL_I2C_Init+0x274>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d802      	bhi.n	8004358 <HAL_I2C_Init+0xd4>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	3301      	adds	r3, #1
 8004356:	e009      	b.n	800436c <HAL_I2C_Init+0xe8>
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800435e:	fb02 f303 	mul.w	r3, r2, r3
 8004362:	4a69      	ldr	r2, [pc, #420]	@ (8004508 <HAL_I2C_Init+0x284>)
 8004364:	fba2 2303 	umull	r2, r3, r2, r3
 8004368:	099b      	lsrs	r3, r3, #6
 800436a:	3301      	adds	r3, #1
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6812      	ldr	r2, [r2, #0]
 8004370:	430b      	orrs	r3, r1
 8004372:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800437e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	495c      	ldr	r1, [pc, #368]	@ (80044f8 <HAL_I2C_Init+0x274>)
 8004388:	428b      	cmp	r3, r1
 800438a:	d819      	bhi.n	80043c0 <HAL_I2C_Init+0x13c>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	1e59      	subs	r1, r3, #1
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	fbb1 f3f3 	udiv	r3, r1, r3
 800439a:	1c59      	adds	r1, r3, #1
 800439c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80043a0:	400b      	ands	r3, r1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <HAL_I2C_Init+0x138>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1e59      	subs	r1, r3, #1
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80043b4:	3301      	adds	r3, #1
 80043b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ba:	e051      	b.n	8004460 <HAL_I2C_Init+0x1dc>
 80043bc:	2304      	movs	r3, #4
 80043be:	e04f      	b.n	8004460 <HAL_I2C_Init+0x1dc>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d111      	bne.n	80043ec <HAL_I2C_Init+0x168>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	1e58      	subs	r0, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6859      	ldr	r1, [r3, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	440b      	add	r3, r1
 80043d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043da:	3301      	adds	r3, #1
 80043dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	bf0c      	ite	eq
 80043e4:	2301      	moveq	r3, #1
 80043e6:	2300      	movne	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	e012      	b.n	8004412 <HAL_I2C_Init+0x18e>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	1e58      	subs	r0, r3, #1
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6859      	ldr	r1, [r3, #4]
 80043f4:	460b      	mov	r3, r1
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	0099      	lsls	r1, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004402:	3301      	adds	r3, #1
 8004404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004408:	2b00      	cmp	r3, #0
 800440a:	bf0c      	ite	eq
 800440c:	2301      	moveq	r3, #1
 800440e:	2300      	movne	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_I2C_Init+0x196>
 8004416:	2301      	movs	r3, #1
 8004418:	e022      	b.n	8004460 <HAL_I2C_Init+0x1dc>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10e      	bne.n	8004440 <HAL_I2C_Init+0x1bc>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1e58      	subs	r0, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6859      	ldr	r1, [r3, #4]
 800442a:	460b      	mov	r3, r1
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	440b      	add	r3, r1
 8004430:	fbb0 f3f3 	udiv	r3, r0, r3
 8004434:	3301      	adds	r3, #1
 8004436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800443a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800443e:	e00f      	b.n	8004460 <HAL_I2C_Init+0x1dc>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	1e58      	subs	r0, r3, #1
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6859      	ldr	r1, [r3, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	0099      	lsls	r1, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	fbb0 f3f3 	udiv	r3, r0, r3
 8004456:	3301      	adds	r3, #1
 8004458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800445c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	6809      	ldr	r1, [r1, #0]
 8004464:	4313      	orrs	r3, r2
 8004466:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	69da      	ldr	r2, [r3, #28]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800448e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6911      	ldr	r1, [r2, #16]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	68d2      	ldr	r2, [r2, #12]
 800449a:	4311      	orrs	r1, r2
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6812      	ldr	r2, [r2, #0]
 80044a0:	430b      	orrs	r3, r1
 80044a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695a      	ldr	r2, [r3, #20]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	000186a0 	.word	0x000186a0
 80044fc:	001e847f 	.word	0x001e847f
 8004500:	003d08ff 	.word	0x003d08ff
 8004504:	431bde83 	.word	0x431bde83
 8004508:	10624dd3 	.word	0x10624dd3

0800450c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af02      	add	r7, sp, #8
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	607a      	str	r2, [r7, #4]
 8004516:	461a      	mov	r2, r3
 8004518:	460b      	mov	r3, r1
 800451a:	817b      	strh	r3, [r7, #10]
 800451c:	4613      	mov	r3, r2
 800451e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004520:	f7fe fbca 	bl	8002cb8 <HAL_GetTick>
 8004524:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b20      	cmp	r3, #32
 8004530:	f040 80e0 	bne.w	80046f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	2319      	movs	r3, #25
 800453a:	2201      	movs	r2, #1
 800453c:	4970      	ldr	r1, [pc, #448]	@ (8004700 <HAL_I2C_Master_Transmit+0x1f4>)
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 fe50 	bl	80051e4 <I2C_WaitOnFlagUntilTimeout>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800454a:	2302      	movs	r3, #2
 800454c:	e0d3      	b.n	80046f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <HAL_I2C_Master_Transmit+0x50>
 8004558:	2302      	movs	r3, #2
 800455a:	e0cc      	b.n	80046f6 <HAL_I2C_Master_Transmit+0x1ea>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b01      	cmp	r3, #1
 8004570:	d007      	beq.n	8004582 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0201 	orr.w	r2, r2, #1
 8004580:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004590:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2221      	movs	r2, #33	@ 0x21
 8004596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2210      	movs	r2, #16
 800459e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	893a      	ldrh	r2, [r7, #8]
 80045b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4a50      	ldr	r2, [pc, #320]	@ (8004704 <HAL_I2C_Master_Transmit+0x1f8>)
 80045c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045c4:	8979      	ldrh	r1, [r7, #10]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	6a3a      	ldr	r2, [r7, #32]
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 fc0a 	bl	8004de4 <I2C_MasterRequestWrite>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e08d      	b.n	80046f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045da:	2300      	movs	r3, #0
 80045dc:	613b      	str	r3, [r7, #16]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	613b      	str	r3, [r7, #16]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80045f0:	e066      	b.n	80046c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	6a39      	ldr	r1, [r7, #32]
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 ff0e 	bl	8005418 <I2C_WaitOnTXEFlagUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00d      	beq.n	800461e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004606:	2b04      	cmp	r3, #4
 8004608:	d107      	bne.n	800461a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004618:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e06b      	b.n	80046f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004622:	781a      	ldrb	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b04      	cmp	r3, #4
 800465a:	d11b      	bne.n	8004694 <HAL_I2C_Master_Transmit+0x188>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004660:	2b00      	cmp	r3, #0
 8004662:	d017      	beq.n	8004694 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004668:	781a      	ldrb	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	6a39      	ldr	r1, [r7, #32]
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 ff05 	bl	80054a8 <I2C_WaitOnBTFFlagUntilTimeout>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00d      	beq.n	80046c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d107      	bne.n	80046bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e01a      	b.n	80046f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d194      	bne.n	80045f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	e000      	b.n	80046f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80046f4:	2302      	movs	r3, #2
  }
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3718      	adds	r7, #24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	00100002 	.word	0x00100002
 8004704:	ffff0000 	.word	0xffff0000

08004708 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b088      	sub	sp, #32
 800470c:	af02      	add	r7, sp, #8
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	4608      	mov	r0, r1
 8004712:	4611      	mov	r1, r2
 8004714:	461a      	mov	r2, r3
 8004716:	4603      	mov	r3, r0
 8004718:	817b      	strh	r3, [r7, #10]
 800471a:	460b      	mov	r3, r1
 800471c:	813b      	strh	r3, [r7, #8]
 800471e:	4613      	mov	r3, r2
 8004720:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004722:	f7fe fac9 	bl	8002cb8 <HAL_GetTick>
 8004726:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b20      	cmp	r3, #32
 8004732:	f040 80d9 	bne.w	80048e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	2319      	movs	r3, #25
 800473c:	2201      	movs	r2, #1
 800473e:	496d      	ldr	r1, [pc, #436]	@ (80048f4 <HAL_I2C_Mem_Write+0x1ec>)
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 fd4f 	bl	80051e4 <I2C_WaitOnFlagUntilTimeout>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800474c:	2302      	movs	r3, #2
 800474e:	e0cc      	b.n	80048ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_I2C_Mem_Write+0x56>
 800475a:	2302      	movs	r3, #2
 800475c:	e0c5      	b.n	80048ea <HAL_I2C_Mem_Write+0x1e2>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b01      	cmp	r3, #1
 8004772:	d007      	beq.n	8004784 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0201 	orr.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004792:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2221      	movs	r2, #33	@ 0x21
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2240      	movs	r2, #64	@ 0x40
 80047a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6a3a      	ldr	r2, [r7, #32]
 80047ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80047b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4a4d      	ldr	r2, [pc, #308]	@ (80048f8 <HAL_I2C_Mem_Write+0x1f0>)
 80047c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047c6:	88f8      	ldrh	r0, [r7, #6]
 80047c8:	893a      	ldrh	r2, [r7, #8]
 80047ca:	8979      	ldrh	r1, [r7, #10]
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	4603      	mov	r3, r0
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fb86 	bl	8004ee8 <I2C_RequestMemoryWrite>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d052      	beq.n	8004888 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e081      	b.n	80048ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 fe14 	bl	8005418 <I2C_WaitOnTXEFlagUntilTimeout>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00d      	beq.n	8004812 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d107      	bne.n	800480e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800480c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e06b      	b.n	80048ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004816:	781a      	ldrb	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004838:	b29b      	uxth	r3, r3
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b04      	cmp	r3, #4
 800484e:	d11b      	bne.n	8004888 <HAL_I2C_Mem_Write+0x180>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004854:	2b00      	cmp	r3, #0
 8004856:	d017      	beq.n	8004888 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485c:	781a      	ldrb	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1aa      	bne.n	80047e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 fe07 	bl	80054a8 <I2C_WaitOnBTFFlagUntilTimeout>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00d      	beq.n	80048bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d107      	bne.n	80048b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e016      	b.n	80048ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80048e4:	2300      	movs	r3, #0
 80048e6:	e000      	b.n	80048ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80048e8:	2302      	movs	r3, #2
  }
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	00100002 	.word	0x00100002
 80048f8:	ffff0000 	.word	0xffff0000

080048fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08c      	sub	sp, #48	@ 0x30
 8004900:	af02      	add	r7, sp, #8
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	4608      	mov	r0, r1
 8004906:	4611      	mov	r1, r2
 8004908:	461a      	mov	r2, r3
 800490a:	4603      	mov	r3, r0
 800490c:	817b      	strh	r3, [r7, #10]
 800490e:	460b      	mov	r3, r1
 8004910:	813b      	strh	r3, [r7, #8]
 8004912:	4613      	mov	r3, r2
 8004914:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800491a:	f7fe f9cd 	bl	8002cb8 <HAL_GetTick>
 800491e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b20      	cmp	r3, #32
 800492a:	f040 8250 	bne.w	8004dce <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800492e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	2319      	movs	r3, #25
 8004934:	2201      	movs	r2, #1
 8004936:	4982      	ldr	r1, [pc, #520]	@ (8004b40 <HAL_I2C_Mem_Read+0x244>)
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 fc53 	bl	80051e4 <I2C_WaitOnFlagUntilTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004944:	2302      	movs	r3, #2
 8004946:	e243      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_I2C_Mem_Read+0x5a>
 8004952:	2302      	movs	r3, #2
 8004954:	e23c      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x4d4>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b01      	cmp	r3, #1
 800496a:	d007      	beq.n	800497c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800498a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2222      	movs	r2, #34	@ 0x22
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2240      	movs	r2, #64	@ 0x40
 8004998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80049ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4a62      	ldr	r2, [pc, #392]	@ (8004b44 <HAL_I2C_Mem_Read+0x248>)
 80049bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049be:	88f8      	ldrh	r0, [r7, #6]
 80049c0:	893a      	ldrh	r2, [r7, #8]
 80049c2:	8979      	ldrh	r1, [r7, #10]
 80049c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c6:	9301      	str	r3, [sp, #4]
 80049c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	4603      	mov	r3, r0
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 fb20 	bl	8005014 <I2C_RequestMemoryRead>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e1f8      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d113      	bne.n	8004a0e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049e6:	2300      	movs	r3, #0
 80049e8:	61fb      	str	r3, [r7, #28]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	61fb      	str	r3, [r7, #28]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	61fb      	str	r3, [r7, #28]
 80049fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	e1cc      	b.n	8004da8 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d11e      	bne.n	8004a54 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	b672      	cpsid	i
}
 8004a28:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61bb      	str	r3, [r7, #24]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	61bb      	str	r3, [r7, #24]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a50:	b662      	cpsie	i
}
 8004a52:	e035      	b.n	8004ac0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d11e      	bne.n	8004a9a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a6c:	b672      	cpsid	i
}
 8004a6e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a70:	2300      	movs	r3, #0
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a96:	b662      	cpsie	i
}
 8004a98:	e012      	b.n	8004ac0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004aa8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aaa:	2300      	movs	r3, #0
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	613b      	str	r3, [r7, #16]
 8004abe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004ac0:	e172      	b.n	8004da8 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ac6:	2b03      	cmp	r3, #3
 8004ac8:	f200 811f 	bhi.w	8004d0a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d123      	bne.n	8004b1c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ad6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 fd2d 	bl	8005538 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e173      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691a      	ldr	r2, [r3, #16]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afa:	1c5a      	adds	r2, r3, #1
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b04:	3b01      	subs	r3, #1
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b1a:	e145      	b.n	8004da8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d152      	bne.n	8004bca <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	4906      	ldr	r1, [pc, #24]	@ (8004b48 <HAL_I2C_Mem_Read+0x24c>)
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 fb58 	bl	80051e4 <I2C_WaitOnFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d008      	beq.n	8004b4c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e148      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x4d4>
 8004b3e:	bf00      	nop
 8004b40:	00100002 	.word	0x00100002
 8004b44:	ffff0000 	.word	0xffff0000
 8004b48:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004b4c:	b672      	cpsid	i
}
 8004b4e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691a      	ldr	r2, [r3, #16]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004b92:	b662      	cpsie	i
}
 8004b94:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004bc8:	e0ee      	b.n	8004da8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	4981      	ldr	r1, [pc, #516]	@ (8004dd8 <HAL_I2C_Mem_Read+0x4dc>)
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 fb05 	bl	80051e4 <I2C_WaitOnFlagUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0f5      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bf2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004bf4:	b672      	cpsid	i
}
 8004bf6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691a      	ldr	r2, [r3, #16]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c2a:	4b6c      	ldr	r3, [pc, #432]	@ (8004ddc <HAL_I2C_Mem_Read+0x4e0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	08db      	lsrs	r3, r3, #3
 8004c30:	4a6b      	ldr	r2, [pc, #428]	@ (8004de0 <HAL_I2C_Mem_Read+0x4e4>)
 8004c32:	fba2 2303 	umull	r2, r3, r2, r3
 8004c36:	0a1a      	lsrs	r2, r3, #8
 8004c38:	4613      	mov	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	00da      	lsls	r2, r3, #3
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d118      	bne.n	8004c82 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6a:	f043 0220 	orr.w	r2, r3, #32
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004c72:	b662      	cpsie	i
}
 8004c74:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e0a6      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d1d9      	bne.n	8004c44 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691a      	ldr	r2, [r3, #16]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004cd2:	b662      	cpsie	i
}
 8004cd4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691a      	ldr	r2, [r3, #16]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d08:	e04e      	b.n	8004da8 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d0c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 fc12 	bl	8005538 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e058      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	f003 0304 	and.w	r3, r3, #4
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d124      	bne.n	8004da8 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d62:	2b03      	cmp	r3, #3
 8004d64:	d107      	bne.n	8004d76 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d74:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f47f ae88 	bne.w	8004ac2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e000      	b.n	8004dd0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004dce:	2302      	movs	r3, #2
  }
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3728      	adds	r7, #40	@ 0x28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	00010004 	.word	0x00010004
 8004ddc:	20000000 	.word	0x20000000
 8004de0:	14f8b589 	.word	0x14f8b589

08004de4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	607a      	str	r2, [r7, #4]
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	460b      	mov	r3, r1
 8004df2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d006      	beq.n	8004e0e <I2C_MasterRequestWrite+0x2a>
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d003      	beq.n	8004e0e <I2C_MasterRequestWrite+0x2a>
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e0c:	d108      	bne.n	8004e20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	e00b      	b.n	8004e38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e24:	2b12      	cmp	r3, #18
 8004e26:	d107      	bne.n	8004e38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f000 f9cd 	bl	80051e4 <I2C_WaitOnFlagUntilTimeout>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00d      	beq.n	8004e6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e5e:	d103      	bne.n	8004e68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e035      	b.n	8004ed8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e74:	d108      	bne.n	8004e88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e76:	897b      	ldrh	r3, [r7, #10]
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e84:	611a      	str	r2, [r3, #16]
 8004e86:	e01b      	b.n	8004ec0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e88:	897b      	ldrh	r3, [r7, #10]
 8004e8a:	11db      	asrs	r3, r3, #7
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	f003 0306 	and.w	r3, r3, #6
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	f063 030f 	orn	r3, r3, #15
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	490e      	ldr	r1, [pc, #56]	@ (8004ee0 <I2C_MasterRequestWrite+0xfc>)
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 fa16 	bl	80052d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e010      	b.n	8004ed8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004eb6:	897b      	ldrh	r3, [r7, #10]
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	4907      	ldr	r1, [pc, #28]	@ (8004ee4 <I2C_MasterRequestWrite+0x100>)
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 fa06 	bl	80052d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3718      	adds	r7, #24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	00010008 	.word	0x00010008
 8004ee4:	00010002 	.word	0x00010002

08004ee8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b088      	sub	sp, #32
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	4608      	mov	r0, r1
 8004ef2:	4611      	mov	r1, r2
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	817b      	strh	r3, [r7, #10]
 8004efa:	460b      	mov	r3, r1
 8004efc:	813b      	strh	r3, [r7, #8]
 8004efe:	4613      	mov	r3, r2
 8004f00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 f960 	bl	80051e4 <I2C_WaitOnFlagUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00d      	beq.n	8004f46 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f38:	d103      	bne.n	8004f42 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e05f      	b.n	8005006 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f46:	897b      	ldrh	r3, [r7, #10]
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f58:	6a3a      	ldr	r2, [r7, #32]
 8004f5a:	492d      	ldr	r1, [pc, #180]	@ (8005010 <I2C_RequestMemoryWrite+0x128>)
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 f9bb 	bl	80052d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e04c      	b.n	8005006 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f84:	6a39      	ldr	r1, [r7, #32]
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 fa46 	bl	8005418 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00d      	beq.n	8004fae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d107      	bne.n	8004faa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fa8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e02b      	b.n	8005006 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fae:	88fb      	ldrh	r3, [r7, #6]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d105      	bne.n	8004fc0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fb4:	893b      	ldrh	r3, [r7, #8]
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	611a      	str	r2, [r3, #16]
 8004fbe:	e021      	b.n	8005004 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004fc0:	893b      	ldrh	r3, [r7, #8]
 8004fc2:	0a1b      	lsrs	r3, r3, #8
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fd0:	6a39      	ldr	r1, [r7, #32]
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 fa20 	bl	8005418 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00d      	beq.n	8004ffa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d107      	bne.n	8004ff6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ff4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e005      	b.n	8005006 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ffa:	893b      	ldrh	r3, [r7, #8]
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	00010002 	.word	0x00010002

08005014 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b088      	sub	sp, #32
 8005018:	af02      	add	r7, sp, #8
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	4608      	mov	r0, r1
 800501e:	4611      	mov	r1, r2
 8005020:	461a      	mov	r2, r3
 8005022:	4603      	mov	r3, r0
 8005024:	817b      	strh	r3, [r7, #10]
 8005026:	460b      	mov	r3, r1
 8005028:	813b      	strh	r3, [r7, #8]
 800502a:	4613      	mov	r3, r2
 800502c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800503c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800504c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800504e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	2200      	movs	r2, #0
 8005056:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 f8c2 	bl	80051e4 <I2C_WaitOnFlagUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00d      	beq.n	8005082 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005070:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005074:	d103      	bne.n	800507e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800507c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e0aa      	b.n	80051d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005082:	897b      	ldrh	r3, [r7, #10]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	461a      	mov	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005090:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005094:	6a3a      	ldr	r2, [r7, #32]
 8005096:	4952      	ldr	r1, [pc, #328]	@ (80051e0 <I2C_RequestMemoryRead+0x1cc>)
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 f91d 	bl	80052d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e097      	b.n	80051d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050a8:	2300      	movs	r3, #0
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c0:	6a39      	ldr	r1, [r7, #32]
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 f9a8 	bl	8005418 <I2C_WaitOnTXEFlagUntilTimeout>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00d      	beq.n	80050ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d107      	bne.n	80050e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e076      	b.n	80051d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050ea:	88fb      	ldrh	r3, [r7, #6]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d105      	bne.n	80050fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050f0:	893b      	ldrh	r3, [r7, #8]
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	611a      	str	r2, [r3, #16]
 80050fa:	e021      	b.n	8005140 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050fc:	893b      	ldrh	r3, [r7, #8]
 80050fe:	0a1b      	lsrs	r3, r3, #8
 8005100:	b29b      	uxth	r3, r3
 8005102:	b2da      	uxtb	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800510a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800510c:	6a39      	ldr	r1, [r7, #32]
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 f982 	bl	8005418 <I2C_WaitOnTXEFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00d      	beq.n	8005136 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511e:	2b04      	cmp	r3, #4
 8005120:	d107      	bne.n	8005132 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005130:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e050      	b.n	80051d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005136:	893b      	ldrh	r3, [r7, #8]
 8005138:	b2da      	uxtb	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005142:	6a39      	ldr	r1, [r7, #32]
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 f967 	bl	8005418 <I2C_WaitOnTXEFlagUntilTimeout>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00d      	beq.n	800516c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005154:	2b04      	cmp	r3, #4
 8005156:	d107      	bne.n	8005168 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005166:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e035      	b.n	80051d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800517a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800517c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	2200      	movs	r2, #0
 8005184:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 f82b 	bl	80051e4 <I2C_WaitOnFlagUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00d      	beq.n	80051b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800519e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051a2:	d103      	bne.n	80051ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e013      	b.n	80051d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80051b0:	897b      	ldrh	r3, [r7, #10]
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	f043 0301 	orr.w	r3, r3, #1
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c2:	6a3a      	ldr	r2, [r7, #32]
 80051c4:	4906      	ldr	r1, [pc, #24]	@ (80051e0 <I2C_RequestMemoryRead+0x1cc>)
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 f886 	bl	80052d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e000      	b.n	80051d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	00010002 	.word	0x00010002

080051e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	4613      	mov	r3, r2
 80051f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051f4:	e048      	b.n	8005288 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fc:	d044      	beq.n	8005288 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051fe:	f7fd fd5b 	bl	8002cb8 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	429a      	cmp	r2, r3
 800520c:	d302      	bcc.n	8005214 <I2C_WaitOnFlagUntilTimeout+0x30>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d139      	bne.n	8005288 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	0c1b      	lsrs	r3, r3, #16
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b01      	cmp	r3, #1
 800521c:	d10d      	bne.n	800523a <I2C_WaitOnFlagUntilTimeout+0x56>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	43da      	mvns	r2, r3
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	4013      	ands	r3, r2
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	bf0c      	ite	eq
 8005230:	2301      	moveq	r3, #1
 8005232:	2300      	movne	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	461a      	mov	r2, r3
 8005238:	e00c      	b.n	8005254 <I2C_WaitOnFlagUntilTimeout+0x70>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	43da      	mvns	r2, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	4013      	ands	r3, r2
 8005246:	b29b      	uxth	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	bf0c      	ite	eq
 800524c:	2301      	moveq	r3, #1
 800524e:	2300      	movne	r3, #0
 8005250:	b2db      	uxtb	r3, r3
 8005252:	461a      	mov	r2, r3
 8005254:	79fb      	ldrb	r3, [r7, #7]
 8005256:	429a      	cmp	r2, r3
 8005258:	d116      	bne.n	8005288 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005274:	f043 0220 	orr.w	r2, r3, #32
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e023      	b.n	80052d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	0c1b      	lsrs	r3, r3, #16
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b01      	cmp	r3, #1
 8005290:	d10d      	bne.n	80052ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	43da      	mvns	r2, r3
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	4013      	ands	r3, r2
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	bf0c      	ite	eq
 80052a4:	2301      	moveq	r3, #1
 80052a6:	2300      	movne	r3, #0
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	461a      	mov	r2, r3
 80052ac:	e00c      	b.n	80052c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	43da      	mvns	r2, r3
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	4013      	ands	r3, r2
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	bf0c      	ite	eq
 80052c0:	2301      	moveq	r3, #1
 80052c2:	2300      	movne	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	461a      	mov	r2, r3
 80052c8:	79fb      	ldrb	r3, [r7, #7]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d093      	beq.n	80051f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052e6:	e071      	b.n	80053cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052f6:	d123      	bne.n	8005340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005306:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005310:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532c:	f043 0204 	orr.w	r2, r3, #4
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e067      	b.n	8005410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005346:	d041      	beq.n	80053cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005348:	f7fd fcb6 	bl	8002cb8 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	429a      	cmp	r2, r3
 8005356:	d302      	bcc.n	800535e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d136      	bne.n	80053cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	0c1b      	lsrs	r3, r3, #16
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	d10c      	bne.n	8005382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	43da      	mvns	r2, r3
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4013      	ands	r3, r2
 8005374:	b29b      	uxth	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	bf14      	ite	ne
 800537a:	2301      	movne	r3, #1
 800537c:	2300      	moveq	r3, #0
 800537e:	b2db      	uxtb	r3, r3
 8005380:	e00b      	b.n	800539a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	43da      	mvns	r2, r3
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4013      	ands	r3, r2
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	bf14      	ite	ne
 8005394:	2301      	movne	r3, #1
 8005396:	2300      	moveq	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d016      	beq.n	80053cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b8:	f043 0220 	orr.w	r2, r3, #32
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e021      	b.n	8005410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	0c1b      	lsrs	r3, r3, #16
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d10c      	bne.n	80053f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	43da      	mvns	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	4013      	ands	r3, r2
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	bf14      	ite	ne
 80053e8:	2301      	movne	r3, #1
 80053ea:	2300      	moveq	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	e00b      	b.n	8005408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	43da      	mvns	r2, r3
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4013      	ands	r3, r2
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	bf14      	ite	ne
 8005402:	2301      	movne	r3, #1
 8005404:	2300      	moveq	r3, #0
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	f47f af6d 	bne.w	80052e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005424:	e034      	b.n	8005490 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 f8e3 	bl	80055f2 <I2C_IsAcknowledgeFailed>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e034      	b.n	80054a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543c:	d028      	beq.n	8005490 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543e:	f7fd fc3b 	bl	8002cb8 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	429a      	cmp	r2, r3
 800544c:	d302      	bcc.n	8005454 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d11d      	bne.n	8005490 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800545e:	2b80      	cmp	r3, #128	@ 0x80
 8005460:	d016      	beq.n	8005490 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547c:	f043 0220 	orr.w	r2, r3, #32
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e007      	b.n	80054a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800549a:	2b80      	cmp	r3, #128	@ 0x80
 800549c:	d1c3      	bne.n	8005426 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054b4:	e034      	b.n	8005520 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 f89b 	bl	80055f2 <I2C_IsAcknowledgeFailed>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e034      	b.n	8005530 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054cc:	d028      	beq.n	8005520 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ce:	f7fd fbf3 	bl	8002cb8 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d302      	bcc.n	80054e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d11d      	bne.n	8005520 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d016      	beq.n	8005520 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550c:	f043 0220 	orr.w	r2, r3, #32
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e007      	b.n	8005530 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	f003 0304 	and.w	r3, r3, #4
 800552a:	2b04      	cmp	r3, #4
 800552c:	d1c3      	bne.n	80054b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005544:	e049      	b.n	80055da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	f003 0310 	and.w	r3, r3, #16
 8005550:	2b10      	cmp	r3, #16
 8005552:	d119      	bne.n	8005588 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f06f 0210 	mvn.w	r2, #16
 800555c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e030      	b.n	80055ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005588:	f7fd fb96 	bl	8002cb8 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	429a      	cmp	r2, r3
 8005596:	d302      	bcc.n	800559e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d11d      	bne.n	80055da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a8:	2b40      	cmp	r3, #64	@ 0x40
 80055aa:	d016      	beq.n	80055da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c6:	f043 0220 	orr.w	r2, r3, #32
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e007      	b.n	80055ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e4:	2b40      	cmp	r3, #64	@ 0x40
 80055e6:	d1ae      	bne.n	8005546 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005604:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005608:	d11b      	bne.n	8005642 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005612:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562e:	f043 0204 	orr.w	r2, r3, #4
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e000      	b.n	8005644 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	bc80      	pop	{r7}
 800564c:	4770      	bx	lr
	...

08005650 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8005650:	b480      	push	{r7}
 8005652:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8005654:	4b08      	ldr	r3, [pc, #32]	@ (8005678 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a07      	ldr	r2, [pc, #28]	@ (8005678 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800565a:	f043 0302 	orr.w	r3, r3, #2
 800565e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005660:	4b06      	ldr	r3, [pc, #24]	@ (800567c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	4a05      	ldr	r2, [pc, #20]	@ (800567c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8005666:	f043 0304 	orr.w	r3, r3, #4
 800566a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800566c:	bf30      	wfi
}
 800566e:	bf00      	nop
 8005670:	46bd      	mov	sp, r7
 8005672:	bc80      	pop	{r7}
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40007000 	.word	0x40007000
 800567c:	e000ed00 	.word	0xe000ed00

08005680 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e272      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 8087 	beq.w	80057ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056a0:	4b92      	ldr	r3, [pc, #584]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f003 030c 	and.w	r3, r3, #12
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d00c      	beq.n	80056c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80056ac:	4b8f      	ldr	r3, [pc, #572]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f003 030c 	and.w	r3, r3, #12
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d112      	bne.n	80056de <HAL_RCC_OscConfig+0x5e>
 80056b8:	4b8c      	ldr	r3, [pc, #560]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056c4:	d10b      	bne.n	80056de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c6:	4b89      	ldr	r3, [pc, #548]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d06c      	beq.n	80057ac <HAL_RCC_OscConfig+0x12c>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d168      	bne.n	80057ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e24c      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056e6:	d106      	bne.n	80056f6 <HAL_RCC_OscConfig+0x76>
 80056e8:	4b80      	ldr	r3, [pc, #512]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a7f      	ldr	r2, [pc, #508]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 80056ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	e02e      	b.n	8005754 <HAL_RCC_OscConfig+0xd4>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10c      	bne.n	8005718 <HAL_RCC_OscConfig+0x98>
 80056fe:	4b7b      	ldr	r3, [pc, #492]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a7a      	ldr	r2, [pc, #488]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005704:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	4b78      	ldr	r3, [pc, #480]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a77      	ldr	r2, [pc, #476]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005710:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	e01d      	b.n	8005754 <HAL_RCC_OscConfig+0xd4>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005720:	d10c      	bne.n	800573c <HAL_RCC_OscConfig+0xbc>
 8005722:	4b72      	ldr	r3, [pc, #456]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a71      	ldr	r2, [pc, #452]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	4b6f      	ldr	r3, [pc, #444]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a6e      	ldr	r2, [pc, #440]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	e00b      	b.n	8005754 <HAL_RCC_OscConfig+0xd4>
 800573c:	4b6b      	ldr	r3, [pc, #428]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a6a      	ldr	r2, [pc, #424]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	4b68      	ldr	r3, [pc, #416]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a67      	ldr	r2, [pc, #412]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 800574e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005752:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d013      	beq.n	8005784 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575c:	f7fd faac 	bl	8002cb8 <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005764:	f7fd faa8 	bl	8002cb8 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b64      	cmp	r3, #100	@ 0x64
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e200      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005776:	4b5d      	ldr	r3, [pc, #372]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0f0      	beq.n	8005764 <HAL_RCC_OscConfig+0xe4>
 8005782:	e014      	b.n	80057ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005784:	f7fd fa98 	bl	8002cb8 <HAL_GetTick>
 8005788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800578a:	e008      	b.n	800579e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800578c:	f7fd fa94 	bl	8002cb8 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b64      	cmp	r3, #100	@ 0x64
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e1ec      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800579e:	4b53      	ldr	r3, [pc, #332]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1f0      	bne.n	800578c <HAL_RCC_OscConfig+0x10c>
 80057aa:	e000      	b.n	80057ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d063      	beq.n	8005882 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057ba:	4b4c      	ldr	r3, [pc, #304]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f003 030c 	and.w	r3, r3, #12
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00b      	beq.n	80057de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80057c6:	4b49      	ldr	r3, [pc, #292]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f003 030c 	and.w	r3, r3, #12
 80057ce:	2b08      	cmp	r3, #8
 80057d0:	d11c      	bne.n	800580c <HAL_RCC_OscConfig+0x18c>
 80057d2:	4b46      	ldr	r3, [pc, #280]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d116      	bne.n	800580c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057de:	4b43      	ldr	r3, [pc, #268]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d005      	beq.n	80057f6 <HAL_RCC_OscConfig+0x176>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d001      	beq.n	80057f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e1c0      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057f6:	4b3d      	ldr	r3, [pc, #244]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	4939      	ldr	r1, [pc, #228]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005806:	4313      	orrs	r3, r2
 8005808:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800580a:	e03a      	b.n	8005882 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d020      	beq.n	8005856 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005814:	4b36      	ldr	r3, [pc, #216]	@ (80058f0 <HAL_RCC_OscConfig+0x270>)
 8005816:	2201      	movs	r2, #1
 8005818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581a:	f7fd fa4d 	bl	8002cb8 <HAL_GetTick>
 800581e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005820:	e008      	b.n	8005834 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005822:	f7fd fa49 	bl	8002cb8 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e1a1      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005834:	4b2d      	ldr	r3, [pc, #180]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d0f0      	beq.n	8005822 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005840:	4b2a      	ldr	r3, [pc, #168]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	4927      	ldr	r1, [pc, #156]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005850:	4313      	orrs	r3, r2
 8005852:	600b      	str	r3, [r1, #0]
 8005854:	e015      	b.n	8005882 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005856:	4b26      	ldr	r3, [pc, #152]	@ (80058f0 <HAL_RCC_OscConfig+0x270>)
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800585c:	f7fd fa2c 	bl	8002cb8 <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005864:	f7fd fa28 	bl	8002cb8 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e180      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005876:	4b1d      	ldr	r3, [pc, #116]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1f0      	bne.n	8005864 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0308 	and.w	r3, r3, #8
 800588a:	2b00      	cmp	r3, #0
 800588c:	d03a      	beq.n	8005904 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d019      	beq.n	80058ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005896:	4b17      	ldr	r3, [pc, #92]	@ (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005898:	2201      	movs	r2, #1
 800589a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800589c:	f7fd fa0c 	bl	8002cb8 <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058a4:	f7fd fa08 	bl	8002cb8 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e160      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058b6:	4b0d      	ldr	r3, [pc, #52]	@ (80058ec <HAL_RCC_OscConfig+0x26c>)
 80058b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0f0      	beq.n	80058a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80058c2:	2001      	movs	r0, #1
 80058c4:	f000 face 	bl	8005e64 <RCC_Delay>
 80058c8:	e01c      	b.n	8005904 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058ca:	4b0a      	ldr	r3, [pc, #40]	@ (80058f4 <HAL_RCC_OscConfig+0x274>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058d0:	f7fd f9f2 	bl	8002cb8 <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058d6:	e00f      	b.n	80058f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058d8:	f7fd f9ee 	bl	8002cb8 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d908      	bls.n	80058f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e146      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
 80058ea:	bf00      	nop
 80058ec:	40021000 	.word	0x40021000
 80058f0:	42420000 	.word	0x42420000
 80058f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058f8:	4b92      	ldr	r3, [pc, #584]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80058fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e9      	bne.n	80058d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 80a6 	beq.w	8005a5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005912:	2300      	movs	r3, #0
 8005914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005916:	4b8b      	ldr	r3, [pc, #556]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10d      	bne.n	800593e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005922:	4b88      	ldr	r3, [pc, #544]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	4a87      	ldr	r2, [pc, #540]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800592c:	61d3      	str	r3, [r2, #28]
 800592e:	4b85      	ldr	r3, [pc, #532]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005936:	60bb      	str	r3, [r7, #8]
 8005938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800593a:	2301      	movs	r3, #1
 800593c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800593e:	4b82      	ldr	r3, [pc, #520]	@ (8005b48 <HAL_RCC_OscConfig+0x4c8>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005946:	2b00      	cmp	r3, #0
 8005948:	d118      	bne.n	800597c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800594a:	4b7f      	ldr	r3, [pc, #508]	@ (8005b48 <HAL_RCC_OscConfig+0x4c8>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a7e      	ldr	r2, [pc, #504]	@ (8005b48 <HAL_RCC_OscConfig+0x4c8>)
 8005950:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005956:	f7fd f9af 	bl	8002cb8 <HAL_GetTick>
 800595a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800595c:	e008      	b.n	8005970 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800595e:	f7fd f9ab 	bl	8002cb8 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b64      	cmp	r3, #100	@ 0x64
 800596a:	d901      	bls.n	8005970 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e103      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005970:	4b75      	ldr	r3, [pc, #468]	@ (8005b48 <HAL_RCC_OscConfig+0x4c8>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0f0      	beq.n	800595e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d106      	bne.n	8005992 <HAL_RCC_OscConfig+0x312>
 8005984:	4b6f      	ldr	r3, [pc, #444]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	4a6e      	ldr	r2, [pc, #440]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 800598a:	f043 0301 	orr.w	r3, r3, #1
 800598e:	6213      	str	r3, [r2, #32]
 8005990:	e02d      	b.n	80059ee <HAL_RCC_OscConfig+0x36e>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10c      	bne.n	80059b4 <HAL_RCC_OscConfig+0x334>
 800599a:	4b6a      	ldr	r3, [pc, #424]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	4a69      	ldr	r2, [pc, #420]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80059a0:	f023 0301 	bic.w	r3, r3, #1
 80059a4:	6213      	str	r3, [r2, #32]
 80059a6:	4b67      	ldr	r3, [pc, #412]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	4a66      	ldr	r2, [pc, #408]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80059ac:	f023 0304 	bic.w	r3, r3, #4
 80059b0:	6213      	str	r3, [r2, #32]
 80059b2:	e01c      	b.n	80059ee <HAL_RCC_OscConfig+0x36e>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	2b05      	cmp	r3, #5
 80059ba:	d10c      	bne.n	80059d6 <HAL_RCC_OscConfig+0x356>
 80059bc:	4b61      	ldr	r3, [pc, #388]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	4a60      	ldr	r2, [pc, #384]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80059c2:	f043 0304 	orr.w	r3, r3, #4
 80059c6:	6213      	str	r3, [r2, #32]
 80059c8:	4b5e      	ldr	r3, [pc, #376]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	4a5d      	ldr	r2, [pc, #372]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80059ce:	f043 0301 	orr.w	r3, r3, #1
 80059d2:	6213      	str	r3, [r2, #32]
 80059d4:	e00b      	b.n	80059ee <HAL_RCC_OscConfig+0x36e>
 80059d6:	4b5b      	ldr	r3, [pc, #364]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	4a5a      	ldr	r2, [pc, #360]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80059dc:	f023 0301 	bic.w	r3, r3, #1
 80059e0:	6213      	str	r3, [r2, #32]
 80059e2:	4b58      	ldr	r3, [pc, #352]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	4a57      	ldr	r2, [pc, #348]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80059e8:	f023 0304 	bic.w	r3, r3, #4
 80059ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d015      	beq.n	8005a22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059f6:	f7fd f95f 	bl	8002cb8 <HAL_GetTick>
 80059fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059fc:	e00a      	b.n	8005a14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059fe:	f7fd f95b 	bl	8002cb8 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e0b1      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a14:	4b4b      	ldr	r3, [pc, #300]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0ee      	beq.n	80059fe <HAL_RCC_OscConfig+0x37e>
 8005a20:	e014      	b.n	8005a4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a22:	f7fd f949 	bl	8002cb8 <HAL_GetTick>
 8005a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a28:	e00a      	b.n	8005a40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a2a:	f7fd f945 	bl	8002cb8 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e09b      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a40:	4b40      	ldr	r3, [pc, #256]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1ee      	bne.n	8005a2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d105      	bne.n	8005a5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a52:	4b3c      	ldr	r3, [pc, #240]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	4a3b      	ldr	r2, [pc, #236]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005a58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 8087 	beq.w	8005b76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a68:	4b36      	ldr	r3, [pc, #216]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f003 030c 	and.w	r3, r3, #12
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d061      	beq.n	8005b38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d146      	bne.n	8005b0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a7c:	4b33      	ldr	r3, [pc, #204]	@ (8005b4c <HAL_RCC_OscConfig+0x4cc>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a82:	f7fd f919 	bl	8002cb8 <HAL_GetTick>
 8005a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a88:	e008      	b.n	8005a9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a8a:	f7fd f915 	bl	8002cb8 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d901      	bls.n	8005a9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e06d      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a9c:	4b29      	ldr	r3, [pc, #164]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1f0      	bne.n	8005a8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ab0:	d108      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005ab2:	4b24      	ldr	r3, [pc, #144]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	4921      	ldr	r1, [pc, #132]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a19      	ldr	r1, [r3, #32]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad4:	430b      	orrs	r3, r1
 8005ad6:	491b      	ldr	r1, [pc, #108]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005adc:	4b1b      	ldr	r3, [pc, #108]	@ (8005b4c <HAL_RCC_OscConfig+0x4cc>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae2:	f7fd f8e9 	bl	8002cb8 <HAL_GetTick>
 8005ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ae8:	e008      	b.n	8005afc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aea:	f7fd f8e5 	bl	8002cb8 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d901      	bls.n	8005afc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e03d      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005afc:	4b11      	ldr	r3, [pc, #68]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0f0      	beq.n	8005aea <HAL_RCC_OscConfig+0x46a>
 8005b08:	e035      	b.n	8005b76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b0a:	4b10      	ldr	r3, [pc, #64]	@ (8005b4c <HAL_RCC_OscConfig+0x4cc>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b10:	f7fd f8d2 	bl	8002cb8 <HAL_GetTick>
 8005b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b18:	f7fd f8ce 	bl	8002cb8 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e026      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b2a:	4b06      	ldr	r3, [pc, #24]	@ (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1f0      	bne.n	8005b18 <HAL_RCC_OscConfig+0x498>
 8005b36:	e01e      	b.n	8005b76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d107      	bne.n	8005b50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e019      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
 8005b44:	40021000 	.word	0x40021000
 8005b48:	40007000 	.word	0x40007000
 8005b4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b50:	4b0b      	ldr	r3, [pc, #44]	@ (8005b80 <HAL_RCC_OscConfig+0x500>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d106      	bne.n	8005b72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d001      	beq.n	8005b76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	40021000 	.word	0x40021000

08005b84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e0d0      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b98:	4b6a      	ldr	r3, [pc, #424]	@ (8005d44 <HAL_RCC_ClockConfig+0x1c0>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d910      	bls.n	8005bc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ba6:	4b67      	ldr	r3, [pc, #412]	@ (8005d44 <HAL_RCC_ClockConfig+0x1c0>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f023 0207 	bic.w	r2, r3, #7
 8005bae:	4965      	ldr	r1, [pc, #404]	@ (8005d44 <HAL_RCC_ClockConfig+0x1c0>)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb6:	4b63      	ldr	r3, [pc, #396]	@ (8005d44 <HAL_RCC_ClockConfig+0x1c0>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0307 	and.w	r3, r3, #7
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d001      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e0b8      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d020      	beq.n	8005c16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d005      	beq.n	8005bec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005be0:	4b59      	ldr	r3, [pc, #356]	@ (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	4a58      	ldr	r2, [pc, #352]	@ (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005be6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005bea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0308 	and.w	r3, r3, #8
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bf8:	4b53      	ldr	r3, [pc, #332]	@ (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	4a52      	ldr	r2, [pc, #328]	@ (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005bfe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005c02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c04:	4b50      	ldr	r3, [pc, #320]	@ (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	494d      	ldr	r1, [pc, #308]	@ (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d040      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d107      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c2a:	4b47      	ldr	r3, [pc, #284]	@ (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d115      	bne.n	8005c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e07f      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d107      	bne.n	8005c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c42:	4b41      	ldr	r3, [pc, #260]	@ (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d109      	bne.n	8005c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e073      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c52:	4b3d      	ldr	r3, [pc, #244]	@ (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e06b      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c62:	4b39      	ldr	r3, [pc, #228]	@ (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f023 0203 	bic.w	r2, r3, #3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	4936      	ldr	r1, [pc, #216]	@ (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c74:	f7fd f820 	bl	8002cb8 <HAL_GetTick>
 8005c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c7a:	e00a      	b.n	8005c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c7c:	f7fd f81c 	bl	8002cb8 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e053      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c92:	4b2d      	ldr	r3, [pc, #180]	@ (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f003 020c 	and.w	r2, r3, #12
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d1eb      	bne.n	8005c7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ca4:	4b27      	ldr	r3, [pc, #156]	@ (8005d44 <HAL_RCC_ClockConfig+0x1c0>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d210      	bcs.n	8005cd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cb2:	4b24      	ldr	r3, [pc, #144]	@ (8005d44 <HAL_RCC_ClockConfig+0x1c0>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f023 0207 	bic.w	r2, r3, #7
 8005cba:	4922      	ldr	r1, [pc, #136]	@ (8005d44 <HAL_RCC_ClockConfig+0x1c0>)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc2:	4b20      	ldr	r3, [pc, #128]	@ (8005d44 <HAL_RCC_ClockConfig+0x1c0>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0307 	and.w	r3, r3, #7
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d001      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e032      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d008      	beq.n	8005cf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ce0:	4b19      	ldr	r3, [pc, #100]	@ (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	4916      	ldr	r1, [pc, #88]	@ (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d009      	beq.n	8005d12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005cfe:	4b12      	ldr	r3, [pc, #72]	@ (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	490e      	ldr	r1, [pc, #56]	@ (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d12:	f000 f821 	bl	8005d58 <HAL_RCC_GetSysClockFreq>
 8005d16:	4602      	mov	r2, r0
 8005d18:	4b0b      	ldr	r3, [pc, #44]	@ (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	091b      	lsrs	r3, r3, #4
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	490a      	ldr	r1, [pc, #40]	@ (8005d4c <HAL_RCC_ClockConfig+0x1c8>)
 8005d24:	5ccb      	ldrb	r3, [r1, r3]
 8005d26:	fa22 f303 	lsr.w	r3, r2, r3
 8005d2a:	4a09      	ldr	r2, [pc, #36]	@ (8005d50 <HAL_RCC_ClockConfig+0x1cc>)
 8005d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d2e:	4b09      	ldr	r3, [pc, #36]	@ (8005d54 <HAL_RCC_ClockConfig+0x1d0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fc ff7e 	bl	8002c34 <HAL_InitTick>

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	40022000 	.word	0x40022000
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	0800b264 	.word	0x0800b264
 8005d50:	20000000 	.word	0x20000000
 8005d54:	20000004 	.word	0x20000004

08005d58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	2300      	movs	r3, #0
 8005d64:	60bb      	str	r3, [r7, #8]
 8005d66:	2300      	movs	r3, #0
 8005d68:	617b      	str	r3, [r7, #20]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005d72:	4b1e      	ldr	r3, [pc, #120]	@ (8005dec <HAL_RCC_GetSysClockFreq+0x94>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f003 030c 	and.w	r3, r3, #12
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d002      	beq.n	8005d88 <HAL_RCC_GetSysClockFreq+0x30>
 8005d82:	2b08      	cmp	r3, #8
 8005d84:	d003      	beq.n	8005d8e <HAL_RCC_GetSysClockFreq+0x36>
 8005d86:	e027      	b.n	8005dd8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d88:	4b19      	ldr	r3, [pc, #100]	@ (8005df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005d8a:	613b      	str	r3, [r7, #16]
      break;
 8005d8c:	e027      	b.n	8005dde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	0c9b      	lsrs	r3, r3, #18
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	4a17      	ldr	r2, [pc, #92]	@ (8005df4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005d98:	5cd3      	ldrb	r3, [r2, r3]
 8005d9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d010      	beq.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005da6:	4b11      	ldr	r3, [pc, #68]	@ (8005dec <HAL_RCC_GetSysClockFreq+0x94>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	0c5b      	lsrs	r3, r3, #17
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	4a11      	ldr	r2, [pc, #68]	@ (8005df8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005db2:	5cd3      	ldrb	r3, [r2, r3]
 8005db4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a0d      	ldr	r2, [pc, #52]	@ (8005df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005dba:	fb03 f202 	mul.w	r2, r3, r2
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc4:	617b      	str	r3, [r7, #20]
 8005dc6:	e004      	b.n	8005dd2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a0c      	ldr	r2, [pc, #48]	@ (8005dfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8005dcc:	fb02 f303 	mul.w	r3, r2, r3
 8005dd0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	613b      	str	r3, [r7, #16]
      break;
 8005dd6:	e002      	b.n	8005dde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005dd8:	4b05      	ldr	r3, [pc, #20]	@ (8005df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005dda:	613b      	str	r3, [r7, #16]
      break;
 8005ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dde:	693b      	ldr	r3, [r7, #16]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bc80      	pop	{r7}
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	40021000 	.word	0x40021000
 8005df0:	007a1200 	.word	0x007a1200
 8005df4:	0800b27c 	.word	0x0800b27c
 8005df8:	0800b28c 	.word	0x0800b28c
 8005dfc:	003d0900 	.word	0x003d0900

08005e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e04:	4b02      	ldr	r3, [pc, #8]	@ (8005e10 <HAL_RCC_GetHCLKFreq+0x10>)
 8005e06:	681b      	ldr	r3, [r3, #0]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bc80      	pop	{r7}
 8005e0e:	4770      	bx	lr
 8005e10:	20000000 	.word	0x20000000

08005e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e18:	f7ff fff2 	bl	8005e00 <HAL_RCC_GetHCLKFreq>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	4b05      	ldr	r3, [pc, #20]	@ (8005e34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	0a1b      	lsrs	r3, r3, #8
 8005e24:	f003 0307 	and.w	r3, r3, #7
 8005e28:	4903      	ldr	r1, [pc, #12]	@ (8005e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e2a:	5ccb      	ldrb	r3, [r1, r3]
 8005e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	40021000 	.word	0x40021000
 8005e38:	0800b274 	.word	0x0800b274

08005e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e40:	f7ff ffde 	bl	8005e00 <HAL_RCC_GetHCLKFreq>
 8005e44:	4602      	mov	r2, r0
 8005e46:	4b05      	ldr	r3, [pc, #20]	@ (8005e5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	0adb      	lsrs	r3, r3, #11
 8005e4c:	f003 0307 	and.w	r3, r3, #7
 8005e50:	4903      	ldr	r1, [pc, #12]	@ (8005e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e52:	5ccb      	ldrb	r3, [r1, r3]
 8005e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	0800b274 	.word	0x0800b274

08005e64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e98 <RCC_Delay+0x34>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a0a      	ldr	r2, [pc, #40]	@ (8005e9c <RCC_Delay+0x38>)
 8005e72:	fba2 2303 	umull	r2, r3, r2, r3
 8005e76:	0a5b      	lsrs	r3, r3, #9
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	fb02 f303 	mul.w	r3, r2, r3
 8005e7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005e80:	bf00      	nop
  }
  while (Delay --);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	1e5a      	subs	r2, r3, #1
 8005e86:	60fa      	str	r2, [r7, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1f9      	bne.n	8005e80 <RCC_Delay+0x1c>
}
 8005e8c:	bf00      	nop
 8005e8e:	bf00      	nop
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr
 8005e98:	20000000 	.word	0x20000000
 8005e9c:	10624dd3 	.word	0x10624dd3

08005ea0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	2300      	movs	r3, #0
 8005eae:	61fb      	str	r3, [r7, #28]
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	2300      	movs	r3, #0
 8005eba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b10      	cmp	r3, #16
 8005ec0:	d00a      	beq.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b10      	cmp	r3, #16
 8005ec6:	f200 808a 	bhi.w	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d045      	beq.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d075      	beq.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005ed6:	e082      	b.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005ed8:	4b46      	ldr	r3, [pc, #280]	@ (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005ede:	4b45      	ldr	r3, [pc, #276]	@ (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d07b      	beq.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	0c9b      	lsrs	r3, r3, #18
 8005eee:	f003 030f 	and.w	r3, r3, #15
 8005ef2:	4a41      	ldr	r2, [pc, #260]	@ (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005ef4:	5cd3      	ldrb	r3, [r2, r3]
 8005ef6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d015      	beq.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f02:	4b3c      	ldr	r3, [pc, #240]	@ (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	0c5b      	lsrs	r3, r3, #17
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	4a3b      	ldr	r2, [pc, #236]	@ (8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005f0e:	5cd3      	ldrb	r3, [r2, r3]
 8005f10:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00d      	beq.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005f1c:	4a38      	ldr	r2, [pc, #224]	@ (8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	fb02 f303 	mul.w	r3, r2, r3
 8005f2a:	61fb      	str	r3, [r7, #28]
 8005f2c:	e004      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	4a34      	ldr	r2, [pc, #208]	@ (8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005f32:	fb02 f303 	mul.w	r3, r2, r3
 8005f36:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005f38:	4b2e      	ldr	r3, [pc, #184]	@ (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f44:	d102      	bne.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	61bb      	str	r3, [r7, #24]
      break;
 8005f4a:	e04a      	b.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	4a2d      	ldr	r2, [pc, #180]	@ (8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005f52:	fba2 2303 	umull	r2, r3, r2, r3
 8005f56:	085b      	lsrs	r3, r3, #1
 8005f58:	61bb      	str	r3, [r7, #24]
      break;
 8005f5a:	e042      	b.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005f5c:	4b25      	ldr	r3, [pc, #148]	@ (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f6c:	d108      	bne.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d003      	beq.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005f78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	e01f      	b.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f8a:	d109      	bne.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005f8c:	4b19      	ldr	r3, [pc, #100]	@ (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d003      	beq.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005f98:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005f9c:	61bb      	str	r3, [r7, #24]
 8005f9e:	e00f      	b.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fa6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005faa:	d11c      	bne.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005fac:	4b11      	ldr	r3, [pc, #68]	@ (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d016      	beq.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005fb8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005fbc:	61bb      	str	r3, [r7, #24]
      break;
 8005fbe:	e012      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005fc0:	e011      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005fc2:	f7ff ff3b 	bl	8005e3c <HAL_RCC_GetPCLK2Freq>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	0b9b      	lsrs	r3, r3, #14
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fda:	61bb      	str	r3, [r7, #24]
      break;
 8005fdc:	e004      	b.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005fde:	bf00      	nop
 8005fe0:	e002      	b.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005fe2:	bf00      	nop
 8005fe4:	e000      	b.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005fe6:	bf00      	nop
    }
  }
  return (frequency);
 8005fe8:	69bb      	ldr	r3, [r7, #24]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3720      	adds	r7, #32
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	40021000 	.word	0x40021000
 8005ff8:	0800b290 	.word	0x0800b290
 8005ffc:	0800b2a0 	.word	0x0800b2a0
 8006000:	007a1200 	.word	0x007a1200
 8006004:	003d0900 	.word	0x003d0900
 8006008:	aaaaaaab 	.word	0xaaaaaaab

0800600c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e076      	b.n	800610c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006022:	2b00      	cmp	r3, #0
 8006024:	d108      	bne.n	8006038 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800602e:	d009      	beq.n	8006044 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	61da      	str	r2, [r3, #28]
 8006036:	e005      	b.n	8006044 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d106      	bne.n	8006064 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f858 	bl	8006114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800607a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800608c:	431a      	orrs	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006096:	431a      	orrs	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	431a      	orrs	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060b4:	431a      	orrs	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060be:	431a      	orrs	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060c8:	ea42 0103 	orr.w	r1, r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	430a      	orrs	r2, r1
 80060da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	0c1a      	lsrs	r2, r3, #16
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f002 0204 	and.w	r2, r2, #4
 80060ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	69da      	ldr	r2, [r3, #28]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	bc80      	pop	{r7}
 8006124:	4770      	bx	lr

08006126 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b088      	sub	sp, #32
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	603b      	str	r3, [r7, #0]
 8006132:	4613      	mov	r3, r2
 8006134:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006136:	f7fc fdbf 	bl	8002cb8 <HAL_GetTick>
 800613a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800613c:	88fb      	ldrh	r3, [r7, #6]
 800613e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b01      	cmp	r3, #1
 800614a:	d001      	beq.n	8006150 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800614c:	2302      	movs	r3, #2
 800614e:	e12a      	b.n	80063a6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <HAL_SPI_Transmit+0x36>
 8006156:	88fb      	ldrh	r3, [r7, #6]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e122      	b.n	80063a6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006166:	2b01      	cmp	r3, #1
 8006168:	d101      	bne.n	800616e <HAL_SPI_Transmit+0x48>
 800616a:	2302      	movs	r3, #2
 800616c:	e11b      	b.n	80063a6 <HAL_SPI_Transmit+0x280>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2203      	movs	r2, #3
 800617a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	88fa      	ldrh	r2, [r7, #6]
 800618e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	88fa      	ldrh	r2, [r7, #6]
 8006194:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061bc:	d10f      	bne.n	80061de <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e8:	2b40      	cmp	r3, #64	@ 0x40
 80061ea:	d007      	beq.n	80061fc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006204:	d152      	bne.n	80062ac <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <HAL_SPI_Transmit+0xee>
 800620e:	8b7b      	ldrh	r3, [r7, #26]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d145      	bne.n	80062a0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006218:	881a      	ldrh	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006224:	1c9a      	adds	r2, r3, #2
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800622e:	b29b      	uxth	r3, r3
 8006230:	3b01      	subs	r3, #1
 8006232:	b29a      	uxth	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006238:	e032      	b.n	80062a0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b02      	cmp	r3, #2
 8006246:	d112      	bne.n	800626e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800624c:	881a      	ldrh	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006258:	1c9a      	adds	r2, r3, #2
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006262:	b29b      	uxth	r3, r3
 8006264:	3b01      	subs	r3, #1
 8006266:	b29a      	uxth	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800626c:	e018      	b.n	80062a0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800626e:	f7fc fd23 	bl	8002cb8 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	429a      	cmp	r2, r3
 800627c:	d803      	bhi.n	8006286 <HAL_SPI_Transmit+0x160>
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006284:	d102      	bne.n	800628c <HAL_SPI_Transmit+0x166>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d109      	bne.n	80062a0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e082      	b.n	80063a6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1c7      	bne.n	800623a <HAL_SPI_Transmit+0x114>
 80062aa:	e053      	b.n	8006354 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <HAL_SPI_Transmit+0x194>
 80062b4:	8b7b      	ldrh	r3, [r7, #26]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d147      	bne.n	800634a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	330c      	adds	r3, #12
 80062c4:	7812      	ldrb	r2, [r2, #0]
 80062c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80062e0:	e033      	b.n	800634a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d113      	bne.n	8006318 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	330c      	adds	r3, #12
 80062fa:	7812      	ldrb	r2, [r2, #0]
 80062fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800630c:	b29b      	uxth	r3, r3
 800630e:	3b01      	subs	r3, #1
 8006310:	b29a      	uxth	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006316:	e018      	b.n	800634a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006318:	f7fc fcce 	bl	8002cb8 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	429a      	cmp	r2, r3
 8006326:	d803      	bhi.n	8006330 <HAL_SPI_Transmit+0x20a>
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632e:	d102      	bne.n	8006336 <HAL_SPI_Transmit+0x210>
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d109      	bne.n	800634a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e02d      	b.n	80063a6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800634e:	b29b      	uxth	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1c6      	bne.n	80062e2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006354:	69fa      	ldr	r2, [r7, #28]
 8006356:	6839      	ldr	r1, [r7, #0]
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f000 fbc5 	bl	8006ae8 <SPI_EndRxTxTransaction>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2220      	movs	r2, #32
 8006368:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10a      	bne.n	8006388 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006372:	2300      	movs	r3, #0
 8006374:	617b      	str	r3, [r7, #20]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	617b      	str	r3, [r7, #20]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	617b      	str	r3, [r7, #20]
 8006386:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e000      	b.n	80063a6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80063a4:	2300      	movs	r3, #0
  }
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3720      	adds	r7, #32
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b088      	sub	sp, #32
 80063b2:	af02      	add	r7, sp, #8
 80063b4:	60f8      	str	r0, [r7, #12]
 80063b6:	60b9      	str	r1, [r7, #8]
 80063b8:	603b      	str	r3, [r7, #0]
 80063ba:	4613      	mov	r3, r2
 80063bc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d001      	beq.n	80063ce <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80063ca:	2302      	movs	r3, #2
 80063cc:	e104      	b.n	80065d8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063d6:	d112      	bne.n	80063fe <HAL_SPI_Receive+0x50>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10e      	bne.n	80063fe <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2204      	movs	r2, #4
 80063e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80063e8:	88fa      	ldrh	r2, [r7, #6]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	4613      	mov	r3, r2
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	68b9      	ldr	r1, [r7, #8]
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f000 f8f3 	bl	80065e0 <HAL_SPI_TransmitReceive>
 80063fa:	4603      	mov	r3, r0
 80063fc:	e0ec      	b.n	80065d8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063fe:	f7fc fc5b 	bl	8002cb8 <HAL_GetTick>
 8006402:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <HAL_SPI_Receive+0x62>
 800640a:	88fb      	ldrh	r3, [r7, #6]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d101      	bne.n	8006414 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e0e1      	b.n	80065d8 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800641a:	2b01      	cmp	r3, #1
 800641c:	d101      	bne.n	8006422 <HAL_SPI_Receive+0x74>
 800641e:	2302      	movs	r3, #2
 8006420:	e0da      	b.n	80065d8 <HAL_SPI_Receive+0x22a>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2204      	movs	r2, #4
 800642e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	88fa      	ldrh	r2, [r7, #6]
 8006442:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	88fa      	ldrh	r2, [r7, #6]
 8006448:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006470:	d10f      	bne.n	8006492 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006480:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006490:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800649c:	2b40      	cmp	r3, #64	@ 0x40
 800649e:	d007      	beq.n	80064b0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064ae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d170      	bne.n	800659a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80064b8:	e035      	b.n	8006526 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d115      	bne.n	80064f4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f103 020c 	add.w	r2, r3, #12
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d4:	7812      	ldrb	r2, [r2, #0]
 80064d6:	b2d2      	uxtb	r2, r2
 80064d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	3b01      	subs	r3, #1
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80064f2:	e018      	b.n	8006526 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064f4:	f7fc fbe0 	bl	8002cb8 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	429a      	cmp	r2, r3
 8006502:	d803      	bhi.n	800650c <HAL_SPI_Receive+0x15e>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650a:	d102      	bne.n	8006512 <HAL_SPI_Receive+0x164>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d109      	bne.n	8006526 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e058      	b.n	80065d8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800652a:	b29b      	uxth	r3, r3
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1c4      	bne.n	80064ba <HAL_SPI_Receive+0x10c>
 8006530:	e038      	b.n	80065a4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	2b01      	cmp	r3, #1
 800653e:	d113      	bne.n	8006568 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68da      	ldr	r2, [r3, #12]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800654a:	b292      	uxth	r2, r2
 800654c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006552:	1c9a      	adds	r2, r3, #2
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800655c:	b29b      	uxth	r3, r3
 800655e:	3b01      	subs	r3, #1
 8006560:	b29a      	uxth	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006566:	e018      	b.n	800659a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006568:	f7fc fba6 	bl	8002cb8 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d803      	bhi.n	8006580 <HAL_SPI_Receive+0x1d2>
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657e:	d102      	bne.n	8006586 <HAL_SPI_Receive+0x1d8>
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d109      	bne.n	800659a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e01e      	b.n	80065d8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800659e:	b29b      	uxth	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1c6      	bne.n	8006532 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	6839      	ldr	r1, [r7, #0]
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 fa4b 	bl	8006a44 <SPI_EndRxTransaction>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2220      	movs	r2, #32
 80065b8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e000      	b.n	80065d8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80065d6:	2300      	movs	r3, #0
  }
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08a      	sub	sp, #40	@ 0x28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
 80065ec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80065ee:	2301      	movs	r3, #1
 80065f0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065f2:	f7fc fb61 	bl	8002cb8 <HAL_GetTick>
 80065f6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065fe:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006606:	887b      	ldrh	r3, [r7, #2]
 8006608:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800660a:	7ffb      	ldrb	r3, [r7, #31]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d00c      	beq.n	800662a <HAL_SPI_TransmitReceive+0x4a>
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006616:	d106      	bne.n	8006626 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d102      	bne.n	8006626 <HAL_SPI_TransmitReceive+0x46>
 8006620:	7ffb      	ldrb	r3, [r7, #31]
 8006622:	2b04      	cmp	r3, #4
 8006624:	d001      	beq.n	800662a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006626:	2302      	movs	r3, #2
 8006628:	e17f      	b.n	800692a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d005      	beq.n	800663c <HAL_SPI_TransmitReceive+0x5c>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <HAL_SPI_TransmitReceive+0x5c>
 8006636:	887b      	ldrh	r3, [r7, #2]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e174      	b.n	800692a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006646:	2b01      	cmp	r3, #1
 8006648:	d101      	bne.n	800664e <HAL_SPI_TransmitReceive+0x6e>
 800664a:	2302      	movs	r3, #2
 800664c:	e16d      	b.n	800692a <HAL_SPI_TransmitReceive+0x34a>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b04      	cmp	r3, #4
 8006660:	d003      	beq.n	800666a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2205      	movs	r2, #5
 8006666:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	887a      	ldrh	r2, [r7, #2]
 800667a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	887a      	ldrh	r2, [r7, #2]
 8006680:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	887a      	ldrh	r2, [r7, #2]
 800668c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	887a      	ldrh	r2, [r7, #2]
 8006692:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066aa:	2b40      	cmp	r3, #64	@ 0x40
 80066ac:	d007      	beq.n	80066be <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066c6:	d17e      	bne.n	80067c6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d002      	beq.n	80066d6 <HAL_SPI_TransmitReceive+0xf6>
 80066d0:	8afb      	ldrh	r3, [r7, #22]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d16c      	bne.n	80067b0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066da:	881a      	ldrh	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e6:	1c9a      	adds	r2, r3, #2
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	3b01      	subs	r3, #1
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066fa:	e059      	b.n	80067b0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b02      	cmp	r3, #2
 8006708:	d11b      	bne.n	8006742 <HAL_SPI_TransmitReceive+0x162>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800670e:	b29b      	uxth	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	d016      	beq.n	8006742 <HAL_SPI_TransmitReceive+0x162>
 8006714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006716:	2b01      	cmp	r3, #1
 8006718:	d113      	bne.n	8006742 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800671e:	881a      	ldrh	r2, [r3, #0]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800672a:	1c9a      	adds	r2, r3, #2
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006734:	b29b      	uxth	r3, r3
 8006736:	3b01      	subs	r3, #1
 8006738:	b29a      	uxth	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b01      	cmp	r3, #1
 800674e:	d119      	bne.n	8006784 <HAL_SPI_TransmitReceive+0x1a4>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d014      	beq.n	8006784 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68da      	ldr	r2, [r3, #12]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006764:	b292      	uxth	r2, r2
 8006766:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676c:	1c9a      	adds	r2, r3, #2
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006776:	b29b      	uxth	r3, r3
 8006778:	3b01      	subs	r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006780:	2301      	movs	r3, #1
 8006782:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006784:	f7fc fa98 	bl	8002cb8 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006790:	429a      	cmp	r2, r3
 8006792:	d80d      	bhi.n	80067b0 <HAL_SPI_TransmitReceive+0x1d0>
 8006794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679a:	d009      	beq.n	80067b0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e0bc      	b.n	800692a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1a0      	bne.n	80066fc <HAL_SPI_TransmitReceive+0x11c>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067be:	b29b      	uxth	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d19b      	bne.n	80066fc <HAL_SPI_TransmitReceive+0x11c>
 80067c4:	e082      	b.n	80068cc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d002      	beq.n	80067d4 <HAL_SPI_TransmitReceive+0x1f4>
 80067ce:	8afb      	ldrh	r3, [r7, #22]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d171      	bne.n	80068b8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	330c      	adds	r3, #12
 80067de:	7812      	ldrb	r2, [r2, #0]
 80067e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	3b01      	subs	r3, #1
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067fa:	e05d      	b.n	80068b8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b02      	cmp	r3, #2
 8006808:	d11c      	bne.n	8006844 <HAL_SPI_TransmitReceive+0x264>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800680e:	b29b      	uxth	r3, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	d017      	beq.n	8006844 <HAL_SPI_TransmitReceive+0x264>
 8006814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006816:	2b01      	cmp	r3, #1
 8006818:	d114      	bne.n	8006844 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	330c      	adds	r3, #12
 8006824:	7812      	ldrb	r2, [r2, #0]
 8006826:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006836:	b29b      	uxth	r3, r3
 8006838:	3b01      	subs	r3, #1
 800683a:	b29a      	uxth	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b01      	cmp	r3, #1
 8006850:	d119      	bne.n	8006886 <HAL_SPI_TransmitReceive+0x2a6>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006856:	b29b      	uxth	r3, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	d014      	beq.n	8006886 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68da      	ldr	r2, [r3, #12]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006866:	b2d2      	uxtb	r2, r2
 8006868:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006878:	b29b      	uxth	r3, r3
 800687a:	3b01      	subs	r3, #1
 800687c:	b29a      	uxth	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006882:	2301      	movs	r3, #1
 8006884:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006886:	f7fc fa17 	bl	8002cb8 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006892:	429a      	cmp	r2, r3
 8006894:	d803      	bhi.n	800689e <HAL_SPI_TransmitReceive+0x2be>
 8006896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689c:	d102      	bne.n	80068a4 <HAL_SPI_TransmitReceive+0x2c4>
 800689e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d109      	bne.n	80068b8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e038      	b.n	800692a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068bc:	b29b      	uxth	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d19c      	bne.n	80067fc <HAL_SPI_TransmitReceive+0x21c>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d197      	bne.n	80067fc <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068cc:	6a3a      	ldr	r2, [r7, #32]
 80068ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f000 f909 	bl	8006ae8 <SPI_EndRxTxTransaction>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d008      	beq.n	80068ee <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2220      	movs	r2, #32
 80068e0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e01d      	b.n	800692a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10a      	bne.n	800690c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068f6:	2300      	movs	r3, #0
 80068f8:	613b      	str	r3, [r7, #16]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	613b      	str	r3, [r7, #16]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	613b      	str	r3, [r7, #16]
 800690a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006928:	2300      	movs	r3, #0
  }
}
 800692a:	4618      	mov	r0, r3
 800692c:	3728      	adds	r7, #40	@ 0x28
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
	...

08006934 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b088      	sub	sp, #32
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	603b      	str	r3, [r7, #0]
 8006940:	4613      	mov	r3, r2
 8006942:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006944:	f7fc f9b8 	bl	8002cb8 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800694c:	1a9b      	subs	r3, r3, r2
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	4413      	add	r3, r2
 8006952:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006954:	f7fc f9b0 	bl	8002cb8 <HAL_GetTick>
 8006958:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800695a:	4b39      	ldr	r3, [pc, #228]	@ (8006a40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	015b      	lsls	r3, r3, #5
 8006960:	0d1b      	lsrs	r3, r3, #20
 8006962:	69fa      	ldr	r2, [r7, #28]
 8006964:	fb02 f303 	mul.w	r3, r2, r3
 8006968:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800696a:	e054      	b.n	8006a16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006972:	d050      	beq.n	8006a16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006974:	f7fc f9a0 	bl	8002cb8 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	69fa      	ldr	r2, [r7, #28]
 8006980:	429a      	cmp	r2, r3
 8006982:	d902      	bls.n	800698a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d13d      	bne.n	8006a06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006998:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069a2:	d111      	bne.n	80069c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069ac:	d004      	beq.n	80069b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069b6:	d107      	bne.n	80069c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069d0:	d10f      	bne.n	80069f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80069f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e017      	b.n	8006a36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689a      	ldr	r2, [r3, #8]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4013      	ands	r3, r2
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	bf0c      	ite	eq
 8006a26:	2301      	moveq	r3, #1
 8006a28:	2300      	movne	r3, #0
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	79fb      	ldrb	r3, [r7, #7]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d19b      	bne.n	800696c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3720      	adds	r7, #32
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	20000000 	.word	0x20000000

08006a44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af02      	add	r7, sp, #8
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a58:	d111      	bne.n	8006a7e <SPI_EndRxTransaction+0x3a>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a62:	d004      	beq.n	8006a6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a6c:	d107      	bne.n	8006a7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a7c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a86:	d117      	bne.n	8006ab8 <SPI_EndRxTransaction+0x74>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a90:	d112      	bne.n	8006ab8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f7ff ff49 	bl	8006934 <SPI_WaitFlagStateUntilTimeout>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d01a      	beq.n	8006ade <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aac:	f043 0220 	orr.w	r2, r3, #32
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e013      	b.n	8006ae0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2180      	movs	r1, #128	@ 0x80
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f7ff ff36 	bl	8006934 <SPI_WaitFlagStateUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d007      	beq.n	8006ade <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad2:	f043 0220 	orr.w	r2, r3, #32
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e000      	b.n	8006ae0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af02      	add	r7, sp, #8
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2201      	movs	r2, #1
 8006afc:	2102      	movs	r1, #2
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f7ff ff18 	bl	8006934 <SPI_WaitFlagStateUntilTimeout>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d007      	beq.n	8006b1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b0e:	f043 0220 	orr.w	r2, r3, #32
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e013      	b.n	8006b42 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2200      	movs	r2, #0
 8006b22:	2180      	movs	r1, #128	@ 0x80
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f7ff ff05 	bl	8006934 <SPI_WaitFlagStateUntilTimeout>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d007      	beq.n	8006b40 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b34:	f043 0220 	orr.w	r2, r3, #32
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e000      	b.n	8006b42 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b082      	sub	sp, #8
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e042      	b.n	8006be2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d106      	bne.n	8006b76 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7fb ff79 	bl	8002a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2224      	movs	r2, #36	@ 0x24
 8006b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68da      	ldr	r2, [r3, #12]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b8c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 ff7a 	bl	8007a88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	691a      	ldr	r2, [r3, #16]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ba2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	695a      	ldr	r2, [r3, #20]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bb2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68da      	ldr	r2, [r3, #12]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006bc2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b08a      	sub	sp, #40	@ 0x28
 8006bee:	af02      	add	r7, sp, #8
 8006bf0:	60f8      	str	r0, [r7, #12]
 8006bf2:	60b9      	str	r1, [r7, #8]
 8006bf4:	603b      	str	r3, [r7, #0]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b20      	cmp	r3, #32
 8006c08:	d175      	bne.n	8006cf6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d002      	beq.n	8006c16 <HAL_UART_Transmit+0x2c>
 8006c10:	88fb      	ldrh	r3, [r7, #6]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e06e      	b.n	8006cf8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2221      	movs	r2, #33	@ 0x21
 8006c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c28:	f7fc f846 	bl	8002cb8 <HAL_GetTick>
 8006c2c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	88fa      	ldrh	r2, [r7, #6]
 8006c32:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	88fa      	ldrh	r2, [r7, #6]
 8006c38:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c42:	d108      	bne.n	8006c56 <HAL_UART_Transmit+0x6c>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d104      	bne.n	8006c56 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	61bb      	str	r3, [r7, #24]
 8006c54:	e003      	b.n	8006c5e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c5e:	e02e      	b.n	8006cbe <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	2200      	movs	r2, #0
 8006c68:	2180      	movs	r1, #128	@ 0x80
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 fc56 	bl	800751c <UART_WaitOnFlagUntilTimeout>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d005      	beq.n	8006c82 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e03a      	b.n	8006cf8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10b      	bne.n	8006ca0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c96:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	3302      	adds	r3, #2
 8006c9c:	61bb      	str	r3, [r7, #24]
 8006c9e:	e007      	b.n	8006cb0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	781a      	ldrb	r2, [r3, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	3301      	adds	r3, #1
 8006cae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1cb      	bne.n	8006c60 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	2140      	movs	r1, #64	@ 0x40
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f000 fc22 	bl	800751c <UART_WaitOnFlagUntilTimeout>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d005      	beq.n	8006cea <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e006      	b.n	8006cf8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2220      	movs	r2, #32
 8006cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	e000      	b.n	8006cf8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006cf6:	2302      	movs	r3, #2
  }
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3720      	adds	r7, #32
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b08c      	sub	sp, #48	@ 0x30
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b20      	cmp	r3, #32
 8006d18:	d146      	bne.n	8006da8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d002      	beq.n	8006d26 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006d20:	88fb      	ldrh	r3, [r7, #6]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e03f      	b.n	8006daa <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006d36:	88fb      	ldrh	r3, [r7, #6]
 8006d38:	461a      	mov	r2, r3
 8006d3a:	68b9      	ldr	r1, [r7, #8]
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 fc47 	bl	80075d0 <UART_Start_Receive_DMA>
 8006d42:	4603      	mov	r3, r0
 8006d44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d125      	bne.n	8006d9c <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d50:	2300      	movs	r3, #0
 8006d52:	613b      	str	r3, [r7, #16]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	613b      	str	r3, [r7, #16]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	613b      	str	r3, [r7, #16]
 8006d64:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	330c      	adds	r3, #12
 8006d6c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	e853 3f00 	ldrex	r3, [r3]
 8006d74:	617b      	str	r3, [r7, #20]
   return(result);
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f043 0310 	orr.w	r3, r3, #16
 8006d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	330c      	adds	r3, #12
 8006d84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d86:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d88:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8a:	6a39      	ldr	r1, [r7, #32]
 8006d8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d8e:	e841 2300 	strex	r3, r2, [r1]
 8006d92:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1e5      	bne.n	8006d66 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8006d9a:	e002      	b.n	8006da2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8006da2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006da6:	e000      	b.n	8006daa <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8006da8:	2302      	movs	r3, #2
  }
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3730      	adds	r7, #48	@ 0x30
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
	...

08006db4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b0ba      	sub	sp, #232	@ 0xe8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dea:	f003 030f 	and.w	r3, r3, #15
 8006dee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006df2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10f      	bne.n	8006e1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dfe:	f003 0320 	and.w	r3, r3, #32
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d009      	beq.n	8006e1a <HAL_UART_IRQHandler+0x66>
 8006e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e0a:	f003 0320 	and.w	r3, r3, #32
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fd7a 	bl	800790c <UART_Receive_IT>
      return;
 8006e18:	e25b      	b.n	80072d2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006e1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 80de 	beq.w	8006fe0 <HAL_UART_IRQHandler+0x22c>
 8006e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d106      	bne.n	8006e3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e34:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 80d1 	beq.w	8006fe0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00b      	beq.n	8006e62 <HAL_UART_IRQHandler+0xae>
 8006e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d005      	beq.n	8006e62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e5a:	f043 0201 	orr.w	r2, r3, #1
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e66:	f003 0304 	and.w	r3, r3, #4
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00b      	beq.n	8006e86 <HAL_UART_IRQHandler+0xd2>
 8006e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d005      	beq.n	8006e86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e7e:	f043 0202 	orr.w	r2, r3, #2
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00b      	beq.n	8006eaa <HAL_UART_IRQHandler+0xf6>
 8006e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d005      	beq.n	8006eaa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ea2:	f043 0204 	orr.w	r2, r3, #4
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eae:	f003 0308 	and.w	r3, r3, #8
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d011      	beq.n	8006eda <HAL_UART_IRQHandler+0x126>
 8006eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eba:	f003 0320 	and.w	r3, r3, #32
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d105      	bne.n	8006ece <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d005      	beq.n	8006eda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ed2:	f043 0208 	orr.w	r2, r3, #8
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f000 81f2 	beq.w	80072c8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ee8:	f003 0320 	and.w	r3, r3, #32
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d008      	beq.n	8006f02 <HAL_UART_IRQHandler+0x14e>
 8006ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ef4:	f003 0320 	and.w	r3, r3, #32
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fd05 	bl	800790c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	695b      	ldr	r3, [r3, #20]
 8006f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	bf14      	ite	ne
 8006f10:	2301      	movne	r3, #1
 8006f12:	2300      	moveq	r3, #0
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f1e:	f003 0308 	and.w	r3, r3, #8
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d103      	bne.n	8006f2e <HAL_UART_IRQHandler+0x17a>
 8006f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d04f      	beq.n	8006fce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fc0f 	bl	8007752 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d041      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3314      	adds	r3, #20
 8006f48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f50:	e853 3f00 	ldrex	r3, [r3]
 8006f54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006f58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3314      	adds	r3, #20
 8006f6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006f6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006f72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006f7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006f86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1d9      	bne.n	8006f42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d013      	beq.n	8006fbe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f9a:	4a7e      	ldr	r2, [pc, #504]	@ (8007194 <HAL_UART_IRQHandler+0x3e0>)
 8006f9c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fc fdec 	bl	8003b80 <HAL_DMA_Abort_IT>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d016      	beq.n	8006fdc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006fb8:	4610      	mov	r0, r2
 8006fba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fbc:	e00e      	b.n	8006fdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f9a5 	bl	800730e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc4:	e00a      	b.n	8006fdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f9a1 	bl	800730e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fcc:	e006      	b.n	8006fdc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f99d 	bl	800730e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006fda:	e175      	b.n	80072c8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fdc:	bf00      	nop
    return;
 8006fde:	e173      	b.n	80072c8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	f040 814f 	bne.w	8007288 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fee:	f003 0310 	and.w	r3, r3, #16
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 8148 	beq.w	8007288 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ffc:	f003 0310 	and.w	r3, r3, #16
 8007000:	2b00      	cmp	r3, #0
 8007002:	f000 8141 	beq.w	8007288 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007006:	2300      	movs	r3, #0
 8007008:	60bb      	str	r3, [r7, #8]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	60bb      	str	r3, [r7, #8]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	60bb      	str	r3, [r7, #8]
 800701a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 80b6 	beq.w	8007198 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007038:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 8145 	beq.w	80072cc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007046:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800704a:	429a      	cmp	r2, r3
 800704c:	f080 813e 	bcs.w	80072cc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007056:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	2b20      	cmp	r3, #32
 8007060:	f000 8088 	beq.w	8007174 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	330c      	adds	r3, #12
 800706a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007072:	e853 3f00 	ldrex	r3, [r3]
 8007076:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800707a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800707e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007082:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	330c      	adds	r3, #12
 800708c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007090:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007094:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007098:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800709c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80070a0:	e841 2300 	strex	r3, r2, [r1]
 80070a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80070a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1d9      	bne.n	8007064 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3314      	adds	r3, #20
 80070b6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80070ba:	e853 3f00 	ldrex	r3, [r3]
 80070be:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80070c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070c2:	f023 0301 	bic.w	r3, r3, #1
 80070c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	3314      	adds	r3, #20
 80070d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80070d4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80070d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070da:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80070dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80070e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e1      	bne.n	80070b0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3314      	adds	r3, #20
 80070f2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070f6:	e853 3f00 	ldrex	r3, [r3]
 80070fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80070fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007102:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3314      	adds	r3, #20
 800710c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007110:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007112:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007114:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007116:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007118:	e841 2300 	strex	r3, r2, [r1]
 800711c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800711e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1e3      	bne.n	80070ec <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2220      	movs	r2, #32
 8007128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	330c      	adds	r3, #12
 8007138:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007142:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007144:	f023 0310 	bic.w	r3, r3, #16
 8007148:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	330c      	adds	r3, #12
 8007152:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007156:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007158:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800715c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1e3      	bne.n	8007132 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800716e:	4618      	mov	r0, r3
 8007170:	f7fc fcca 	bl	8003b08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007182:	b29b      	uxth	r3, r3
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	b29b      	uxth	r3, r3
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7fa fba4 	bl	80018d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007190:	e09c      	b.n	80072cc <HAL_UART_IRQHandler+0x518>
 8007192:	bf00      	nop
 8007194:	08007817 	.word	0x08007817
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f000 808e 	beq.w	80072d0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80071b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f000 8089 	beq.w	80072d0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	330c      	adds	r3, #12
 80071c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c8:	e853 3f00 	ldrex	r3, [r3]
 80071cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	330c      	adds	r3, #12
 80071de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80071e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80071e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071ea:	e841 2300 	strex	r3, r2, [r1]
 80071ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1e3      	bne.n	80071be <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3314      	adds	r3, #20
 80071fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007200:	e853 3f00 	ldrex	r3, [r3]
 8007204:	623b      	str	r3, [r7, #32]
   return(result);
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	f023 0301 	bic.w	r3, r3, #1
 800720c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3314      	adds	r3, #20
 8007216:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800721a:	633a      	str	r2, [r7, #48]	@ 0x30
 800721c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007222:	e841 2300 	strex	r3, r2, [r1]
 8007226:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1e3      	bne.n	80071f6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2220      	movs	r2, #32
 8007232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	330c      	adds	r3, #12
 8007242:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	e853 3f00 	ldrex	r3, [r3]
 800724a:	60fb      	str	r3, [r7, #12]
   return(result);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f023 0310 	bic.w	r3, r3, #16
 8007252:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	330c      	adds	r3, #12
 800725c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007260:	61fa      	str	r2, [r7, #28]
 8007262:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007264:	69b9      	ldr	r1, [r7, #24]
 8007266:	69fa      	ldr	r2, [r7, #28]
 8007268:	e841 2300 	strex	r3, r2, [r1]
 800726c:	617b      	str	r3, [r7, #20]
   return(result);
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1e3      	bne.n	800723c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2202      	movs	r2, #2
 8007278:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800727a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7fa fb29 	bl	80018d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007286:	e023      	b.n	80072d0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800728c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007290:	2b00      	cmp	r3, #0
 8007292:	d009      	beq.n	80072a8 <HAL_UART_IRQHandler+0x4f4>
 8007294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800729c:	2b00      	cmp	r3, #0
 800729e:	d003      	beq.n	80072a8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 facc 	bl	800783e <UART_Transmit_IT>
    return;
 80072a6:	e014      	b.n	80072d2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80072a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00e      	beq.n	80072d2 <HAL_UART_IRQHandler+0x51e>
 80072b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d008      	beq.n	80072d2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fb0b 	bl	80078dc <UART_EndTransmit_IT>
    return;
 80072c6:	e004      	b.n	80072d2 <HAL_UART_IRQHandler+0x51e>
    return;
 80072c8:	bf00      	nop
 80072ca:	e002      	b.n	80072d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80072cc:	bf00      	nop
 80072ce:	e000      	b.n	80072d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80072d0:	bf00      	nop
  }
}
 80072d2:	37e8      	adds	r7, #232	@ 0xe8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bc80      	pop	{r7}
 80072e8:	4770      	bx	lr

080072ea <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b083      	sub	sp, #12
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80072f2:	bf00      	nop
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bc80      	pop	{r7}
 80072fa:	4770      	bx	lr

080072fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	bc80      	pop	{r7}
 800730c:	4770      	bx	lr

0800730e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800730e:	b480      	push	{r7}
 8007310:	b083      	sub	sp, #12
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007316:	bf00      	nop
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	bc80      	pop	{r7}
 800731e:	4770      	bx	lr

08007320 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b09c      	sub	sp, #112	@ 0x70
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0320 	and.w	r3, r3, #32
 8007338:	2b00      	cmp	r3, #0
 800733a:	d172      	bne.n	8007422 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800733c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800733e:	2200      	movs	r2, #0
 8007340:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007342:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	330c      	adds	r3, #12
 8007348:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007352:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007354:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007358:	66bb      	str	r3, [r7, #104]	@ 0x68
 800735a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	330c      	adds	r3, #12
 8007360:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007362:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007364:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007366:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007368:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800736a:	e841 2300 	strex	r3, r2, [r1]
 800736e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007370:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1e5      	bne.n	8007342 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007376:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3314      	adds	r3, #20
 800737c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007380:	e853 3f00 	ldrex	r3, [r3]
 8007384:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007388:	f023 0301 	bic.w	r3, r3, #1
 800738c:	667b      	str	r3, [r7, #100]	@ 0x64
 800738e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3314      	adds	r3, #20
 8007394:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007396:	647a      	str	r2, [r7, #68]	@ 0x44
 8007398:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800739c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800739e:	e841 2300 	strex	r3, r2, [r1]
 80073a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1e5      	bne.n	8007376 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3314      	adds	r3, #20
 80073b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b4:	e853 3f00 	ldrex	r3, [r3]
 80073b8:	623b      	str	r3, [r7, #32]
   return(result);
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80073c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3314      	adds	r3, #20
 80073c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80073ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80073cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073d2:	e841 2300 	strex	r3, r2, [r1]
 80073d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1e5      	bne.n	80073aa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80073de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073e0:	2220      	movs	r2, #32
 80073e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d119      	bne.n	8007422 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	330c      	adds	r3, #12
 80073f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	e853 3f00 	ldrex	r3, [r3]
 80073fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f023 0310 	bic.w	r3, r3, #16
 8007404:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007406:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	330c      	adds	r3, #12
 800740c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800740e:	61fa      	str	r2, [r7, #28]
 8007410:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007412:	69b9      	ldr	r1, [r7, #24]
 8007414:	69fa      	ldr	r2, [r7, #28]
 8007416:	e841 2300 	strex	r3, r2, [r1]
 800741a:	617b      	str	r3, [r7, #20]
   return(result);
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1e5      	bne.n	80073ee <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007422:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007424:	2200      	movs	r2, #0
 8007426:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007428:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800742a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800742c:	2b01      	cmp	r3, #1
 800742e:	d106      	bne.n	800743e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007430:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007432:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007434:	4619      	mov	r1, r3
 8007436:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007438:	f7fa fa4e 	bl	80018d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800743c:	e002      	b.n	8007444 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800743e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007440:	f7ff ff53 	bl	80072ea <HAL_UART_RxCpltCallback>
}
 8007444:	bf00      	nop
 8007446:	3770      	adds	r7, #112	@ 0x70
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007458:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2201      	movs	r2, #1
 800745e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007464:	2b01      	cmp	r3, #1
 8007466:	d108      	bne.n	800747a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800746c:	085b      	lsrs	r3, r3, #1
 800746e:	b29b      	uxth	r3, r3
 8007470:	4619      	mov	r1, r3
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f7fa fa30 	bl	80018d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007478:	e002      	b.n	8007480 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f7ff ff3e 	bl	80072fc <HAL_UART_RxHalfCpltCallback>
}
 8007480:	bf00      	nop
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007490:	2300      	movs	r3, #0
 8007492:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007498:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	bf14      	ite	ne
 80074a8:	2301      	movne	r3, #1
 80074aa:	2300      	moveq	r3, #0
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b21      	cmp	r3, #33	@ 0x21
 80074ba:	d108      	bne.n	80074ce <UART_DMAError+0x46>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d005      	beq.n	80074ce <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2200      	movs	r2, #0
 80074c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80074c8:	68b8      	ldr	r0, [r7, #8]
 80074ca:	f000 f91b 	bl	8007704 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074d8:	2b00      	cmp	r3, #0
 80074da:	bf14      	ite	ne
 80074dc:	2301      	movne	r3, #1
 80074de:	2300      	moveq	r3, #0
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	2b22      	cmp	r3, #34	@ 0x22
 80074ee:	d108      	bne.n	8007502 <UART_DMAError+0x7a>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d005      	beq.n	8007502 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	2200      	movs	r2, #0
 80074fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80074fc:	68b8      	ldr	r0, [r7, #8]
 80074fe:	f000 f928 	bl	8007752 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007506:	f043 0210 	orr.w	r2, r3, #16
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800750e:	68b8      	ldr	r0, [r7, #8]
 8007510:	f7ff fefd 	bl	800730e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007514:	bf00      	nop
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	603b      	str	r3, [r7, #0]
 8007528:	4613      	mov	r3, r2
 800752a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800752c:	e03b      	b.n	80075a6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007534:	d037      	beq.n	80075a6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007536:	f7fb fbbf 	bl	8002cb8 <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	6a3a      	ldr	r2, [r7, #32]
 8007542:	429a      	cmp	r2, r3
 8007544:	d302      	bcc.n	800754c <UART_WaitOnFlagUntilTimeout+0x30>
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e03a      	b.n	80075c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	f003 0304 	and.w	r3, r3, #4
 800755a:	2b00      	cmp	r3, #0
 800755c:	d023      	beq.n	80075a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b80      	cmp	r3, #128	@ 0x80
 8007562:	d020      	beq.n	80075a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	2b40      	cmp	r3, #64	@ 0x40
 8007568:	d01d      	beq.n	80075a6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0308 	and.w	r3, r3, #8
 8007574:	2b08      	cmp	r3, #8
 8007576:	d116      	bne.n	80075a6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007578:	2300      	movs	r3, #0
 800757a:	617b      	str	r3, [r7, #20]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	617b      	str	r3, [r7, #20]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	617b      	str	r3, [r7, #20]
 800758c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 f8df 	bl	8007752 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2208      	movs	r2, #8
 8007598:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e00f      	b.n	80075c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	4013      	ands	r3, r2
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	bf0c      	ite	eq
 80075b6:	2301      	moveq	r3, #1
 80075b8:	2300      	movne	r3, #0
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	461a      	mov	r2, r3
 80075be:	79fb      	ldrb	r3, [r7, #7]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d0b4      	beq.n	800752e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
	...

080075d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b098      	sub	sp, #96	@ 0x60
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	4613      	mov	r3, r2
 80075dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	88fa      	ldrh	r2, [r7, #6]
 80075e8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2222      	movs	r2, #34	@ 0x22
 80075f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075fc:	4a3e      	ldr	r2, [pc, #248]	@ (80076f8 <UART_Start_Receive_DMA+0x128>)
 80075fe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007604:	4a3d      	ldr	r2, [pc, #244]	@ (80076fc <UART_Start_Receive_DMA+0x12c>)
 8007606:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800760c:	4a3c      	ldr	r2, [pc, #240]	@ (8007700 <UART_Start_Receive_DMA+0x130>)
 800760e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007614:	2200      	movs	r2, #0
 8007616:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007618:	f107 0308 	add.w	r3, r7, #8
 800761c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3304      	adds	r3, #4
 8007628:	4619      	mov	r1, r3
 800762a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	88fb      	ldrh	r3, [r7, #6]
 8007630:	f7fc fa0a 	bl	8003a48 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007634:	2300      	movs	r3, #0
 8007636:	613b      	str	r3, [r7, #16]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	613b      	str	r3, [r7, #16]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	613b      	str	r3, [r7, #16]
 8007648:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d019      	beq.n	8007686 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	330c      	adds	r3, #12
 8007658:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800765c:	e853 3f00 	ldrex	r3, [r3]
 8007660:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007668:	65bb      	str	r3, [r7, #88]	@ 0x58
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	330c      	adds	r3, #12
 8007670:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007672:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007674:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007676:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007678:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800767a:	e841 2300 	strex	r3, r2, [r1]
 800767e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1e5      	bne.n	8007652 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3314      	adds	r3, #20
 800768c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007690:	e853 3f00 	ldrex	r3, [r3]
 8007694:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007698:	f043 0301 	orr.w	r3, r3, #1
 800769c:	657b      	str	r3, [r7, #84]	@ 0x54
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	3314      	adds	r3, #20
 80076a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80076a6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80076a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076aa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80076ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80076ae:	e841 2300 	strex	r3, r2, [r1]
 80076b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1e5      	bne.n	8007686 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3314      	adds	r3, #20
 80076c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	e853 3f00 	ldrex	r3, [r3]
 80076c8:	617b      	str	r3, [r7, #20]
   return(result);
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3314      	adds	r3, #20
 80076d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80076da:	627a      	str	r2, [r7, #36]	@ 0x24
 80076dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076de:	6a39      	ldr	r1, [r7, #32]
 80076e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076e2:	e841 2300 	strex	r3, r2, [r1]
 80076e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1e5      	bne.n	80076ba <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3760      	adds	r7, #96	@ 0x60
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	08007321 	.word	0x08007321
 80076fc:	0800744d 	.word	0x0800744d
 8007700:	08007489 	.word	0x08007489

08007704 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007704:	b480      	push	{r7}
 8007706:	b089      	sub	sp, #36	@ 0x24
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	330c      	adds	r3, #12
 8007712:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	e853 3f00 	ldrex	r3, [r3]
 800771a:	60bb      	str	r3, [r7, #8]
   return(result);
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007722:	61fb      	str	r3, [r7, #28]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	330c      	adds	r3, #12
 800772a:	69fa      	ldr	r2, [r7, #28]
 800772c:	61ba      	str	r2, [r7, #24]
 800772e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007730:	6979      	ldr	r1, [r7, #20]
 8007732:	69ba      	ldr	r2, [r7, #24]
 8007734:	e841 2300 	strex	r3, r2, [r1]
 8007738:	613b      	str	r3, [r7, #16]
   return(result);
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e5      	bne.n	800770c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2220      	movs	r2, #32
 8007744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007748:	bf00      	nop
 800774a:	3724      	adds	r7, #36	@ 0x24
 800774c:	46bd      	mov	sp, r7
 800774e:	bc80      	pop	{r7}
 8007750:	4770      	bx	lr

08007752 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007752:	b480      	push	{r7}
 8007754:	b095      	sub	sp, #84	@ 0x54
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	330c      	adds	r3, #12
 8007760:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007764:	e853 3f00 	ldrex	r3, [r3]
 8007768:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800776a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007770:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	330c      	adds	r3, #12
 8007778:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800777a:	643a      	str	r2, [r7, #64]	@ 0x40
 800777c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007780:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007782:	e841 2300 	strex	r3, r2, [r1]
 8007786:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1e5      	bne.n	800775a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3314      	adds	r3, #20
 8007794:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	e853 3f00 	ldrex	r3, [r3]
 800779c:	61fb      	str	r3, [r7, #28]
   return(result);
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	f023 0301 	bic.w	r3, r3, #1
 80077a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3314      	adds	r3, #20
 80077ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077b6:	e841 2300 	strex	r3, r2, [r1]
 80077ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1e5      	bne.n	800778e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d119      	bne.n	80077fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	330c      	adds	r3, #12
 80077d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	e853 3f00 	ldrex	r3, [r3]
 80077d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	f023 0310 	bic.w	r3, r3, #16
 80077e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	330c      	adds	r3, #12
 80077e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077ea:	61ba      	str	r2, [r7, #24]
 80077ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ee:	6979      	ldr	r1, [r7, #20]
 80077f0:	69ba      	ldr	r2, [r7, #24]
 80077f2:	e841 2300 	strex	r3, r2, [r1]
 80077f6:	613b      	str	r3, [r7, #16]
   return(result);
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1e5      	bne.n	80077ca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2220      	movs	r2, #32
 8007802:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800780c:	bf00      	nop
 800780e:	3754      	adds	r7, #84	@ 0x54
 8007810:	46bd      	mov	sp, r7
 8007812:	bc80      	pop	{r7}
 8007814:	4770      	bx	lr

08007816 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b084      	sub	sp, #16
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007822:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f7ff fd6c 	bl	800730e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007836:	bf00      	nop
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800783e:	b480      	push	{r7}
 8007840:	b085      	sub	sp, #20
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b21      	cmp	r3, #33	@ 0x21
 8007850:	d13e      	bne.n	80078d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800785a:	d114      	bne.n	8007886 <UART_Transmit_IT+0x48>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d110      	bne.n	8007886 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	461a      	mov	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007878:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	1c9a      	adds	r2, r3, #2
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	621a      	str	r2, [r3, #32]
 8007884:	e008      	b.n	8007898 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	1c59      	adds	r1, r3, #1
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	6211      	str	r1, [r2, #32]
 8007890:	781a      	ldrb	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800789c:	b29b      	uxth	r3, r3
 800789e:	3b01      	subs	r3, #1
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	4619      	mov	r1, r3
 80078a6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10f      	bne.n	80078cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68da      	ldr	r2, [r3, #12]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80078ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68da      	ldr	r2, [r3, #12]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	e000      	b.n	80078d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80078d0:	2302      	movs	r3, #2
  }
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bc80      	pop	{r7}
 80078da:	4770      	bx	lr

080078dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68da      	ldr	r2, [r3, #12]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2220      	movs	r2, #32
 80078f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f7ff fceb 	bl	80072d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b08c      	sub	sp, #48	@ 0x30
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b22      	cmp	r3, #34	@ 0x22
 800791e:	f040 80ae 	bne.w	8007a7e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800792a:	d117      	bne.n	800795c <UART_Receive_IT+0x50>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d113      	bne.n	800795c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007934:	2300      	movs	r3, #0
 8007936:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800793c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	b29b      	uxth	r3, r3
 8007946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800794a:	b29a      	uxth	r2, r3
 800794c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800794e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007954:	1c9a      	adds	r2, r3, #2
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	629a      	str	r2, [r3, #40]	@ 0x28
 800795a:	e026      	b.n	80079aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007960:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007962:	2300      	movs	r3, #0
 8007964:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800796e:	d007      	beq.n	8007980 <UART_Receive_IT+0x74>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10a      	bne.n	800798e <UART_Receive_IT+0x82>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d106      	bne.n	800798e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	b2da      	uxtb	r2, r3
 8007988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800798a:	701a      	strb	r2, [r3, #0]
 800798c:	e008      	b.n	80079a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	b2db      	uxtb	r3, r3
 8007996:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800799a:	b2da      	uxtb	r2, r3
 800799c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800799e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a4:	1c5a      	adds	r2, r3, #1
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	3b01      	subs	r3, #1
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	4619      	mov	r1, r3
 80079b8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d15d      	bne.n	8007a7a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68da      	ldr	r2, [r3, #12]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f022 0220 	bic.w	r2, r2, #32
 80079cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68da      	ldr	r2, [r3, #12]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80079dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	695a      	ldr	r2, [r3, #20]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f022 0201 	bic.w	r2, r2, #1
 80079ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2220      	movs	r2, #32
 80079f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d135      	bne.n	8007a70 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	330c      	adds	r3, #12
 8007a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	613b      	str	r3, [r7, #16]
   return(result);
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f023 0310 	bic.w	r3, r3, #16
 8007a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	330c      	adds	r3, #12
 8007a28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a2a:	623a      	str	r2, [r7, #32]
 8007a2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2e:	69f9      	ldr	r1, [r7, #28]
 8007a30:	6a3a      	ldr	r2, [r7, #32]
 8007a32:	e841 2300 	strex	r3, r2, [r1]
 8007a36:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1e5      	bne.n	8007a0a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0310 	and.w	r3, r3, #16
 8007a48:	2b10      	cmp	r3, #16
 8007a4a:	d10a      	bne.n	8007a62 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	60fb      	str	r3, [r7, #12]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	60fb      	str	r3, [r7, #12]
 8007a60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a66:	4619      	mov	r1, r3
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7f9 ff35 	bl	80018d8 <HAL_UARTEx_RxEventCallback>
 8007a6e:	e002      	b.n	8007a76 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7ff fc3a 	bl	80072ea <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a76:	2300      	movs	r3, #0
 8007a78:	e002      	b.n	8007a80 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	e000      	b.n	8007a80 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007a7e:	2302      	movs	r3, #2
  }
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3730      	adds	r7, #48	@ 0x30
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	68da      	ldr	r2, [r3, #12]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	689a      	ldr	r2, [r3, #8]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007ac2:	f023 030c 	bic.w	r3, r3, #12
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	6812      	ldr	r2, [r2, #0]
 8007aca:	68b9      	ldr	r1, [r7, #8]
 8007acc:	430b      	orrs	r3, r1
 8007ace:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	699a      	ldr	r2, [r3, #24]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a2c      	ldr	r2, [pc, #176]	@ (8007b9c <UART_SetConfig+0x114>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d103      	bne.n	8007af8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007af0:	f7fe f9a4 	bl	8005e3c <HAL_RCC_GetPCLK2Freq>
 8007af4:	60f8      	str	r0, [r7, #12]
 8007af6:	e002      	b.n	8007afe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007af8:	f7fe f98c 	bl	8005e14 <HAL_RCC_GetPCLK1Freq>
 8007afc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	4613      	mov	r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4413      	add	r3, r2
 8007b06:	009a      	lsls	r2, r3, #2
 8007b08:	441a      	add	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b14:	4a22      	ldr	r2, [pc, #136]	@ (8007ba0 <UART_SetConfig+0x118>)
 8007b16:	fba2 2303 	umull	r2, r3, r2, r3
 8007b1a:	095b      	lsrs	r3, r3, #5
 8007b1c:	0119      	lsls	r1, r3, #4
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	4613      	mov	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	009a      	lsls	r2, r3, #2
 8007b28:	441a      	add	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b34:	4b1a      	ldr	r3, [pc, #104]	@ (8007ba0 <UART_SetConfig+0x118>)
 8007b36:	fba3 0302 	umull	r0, r3, r3, r2
 8007b3a:	095b      	lsrs	r3, r3, #5
 8007b3c:	2064      	movs	r0, #100	@ 0x64
 8007b3e:	fb00 f303 	mul.w	r3, r0, r3
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	011b      	lsls	r3, r3, #4
 8007b46:	3332      	adds	r3, #50	@ 0x32
 8007b48:	4a15      	ldr	r2, [pc, #84]	@ (8007ba0 <UART_SetConfig+0x118>)
 8007b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4e:	095b      	lsrs	r3, r3, #5
 8007b50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b54:	4419      	add	r1, r3
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	4413      	add	r3, r2
 8007b5e:	009a      	lsls	r2, r3, #2
 8007b60:	441a      	add	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8007ba0 <UART_SetConfig+0x118>)
 8007b6e:	fba3 0302 	umull	r0, r3, r3, r2
 8007b72:	095b      	lsrs	r3, r3, #5
 8007b74:	2064      	movs	r0, #100	@ 0x64
 8007b76:	fb00 f303 	mul.w	r3, r0, r3
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	011b      	lsls	r3, r3, #4
 8007b7e:	3332      	adds	r3, #50	@ 0x32
 8007b80:	4a07      	ldr	r2, [pc, #28]	@ (8007ba0 <UART_SetConfig+0x118>)
 8007b82:	fba2 2303 	umull	r2, r3, r2, r3
 8007b86:	095b      	lsrs	r3, r3, #5
 8007b88:	f003 020f 	and.w	r2, r3, #15
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	440a      	add	r2, r1
 8007b92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007b94:	bf00      	nop
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	40013800 	.word	0x40013800
 8007ba0:	51eb851f 	.word	0x51eb851f

08007ba4 <__cvt>:
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007baa:	461d      	mov	r5, r3
 8007bac:	bfbb      	ittet	lt
 8007bae:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8007bb2:	461d      	movlt	r5, r3
 8007bb4:	2300      	movge	r3, #0
 8007bb6:	232d      	movlt	r3, #45	@ 0x2d
 8007bb8:	b088      	sub	sp, #32
 8007bba:	4614      	mov	r4, r2
 8007bbc:	bfb8      	it	lt
 8007bbe:	4614      	movlt	r4, r2
 8007bc0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007bc2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007bc4:	7013      	strb	r3, [r2, #0]
 8007bc6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007bc8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007bcc:	f023 0820 	bic.w	r8, r3, #32
 8007bd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007bd4:	d005      	beq.n	8007be2 <__cvt+0x3e>
 8007bd6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007bda:	d100      	bne.n	8007bde <__cvt+0x3a>
 8007bdc:	3601      	adds	r6, #1
 8007bde:	2302      	movs	r3, #2
 8007be0:	e000      	b.n	8007be4 <__cvt+0x40>
 8007be2:	2303      	movs	r3, #3
 8007be4:	aa07      	add	r2, sp, #28
 8007be6:	9204      	str	r2, [sp, #16]
 8007be8:	aa06      	add	r2, sp, #24
 8007bea:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007bee:	e9cd 3600 	strd	r3, r6, [sp]
 8007bf2:	4622      	mov	r2, r4
 8007bf4:	462b      	mov	r3, r5
 8007bf6:	f000 feb7 	bl	8008968 <_dtoa_r>
 8007bfa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007bfe:	4607      	mov	r7, r0
 8007c00:	d119      	bne.n	8007c36 <__cvt+0x92>
 8007c02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007c04:	07db      	lsls	r3, r3, #31
 8007c06:	d50e      	bpl.n	8007c26 <__cvt+0x82>
 8007c08:	eb00 0906 	add.w	r9, r0, r6
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2300      	movs	r3, #0
 8007c10:	4620      	mov	r0, r4
 8007c12:	4629      	mov	r1, r5
 8007c14:	f7f8 fec8 	bl	80009a8 <__aeabi_dcmpeq>
 8007c18:	b108      	cbz	r0, 8007c1e <__cvt+0x7a>
 8007c1a:	f8cd 901c 	str.w	r9, [sp, #28]
 8007c1e:	2230      	movs	r2, #48	@ 0x30
 8007c20:	9b07      	ldr	r3, [sp, #28]
 8007c22:	454b      	cmp	r3, r9
 8007c24:	d31e      	bcc.n	8007c64 <__cvt+0xc0>
 8007c26:	4638      	mov	r0, r7
 8007c28:	9b07      	ldr	r3, [sp, #28]
 8007c2a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007c2c:	1bdb      	subs	r3, r3, r7
 8007c2e:	6013      	str	r3, [r2, #0]
 8007c30:	b008      	add	sp, #32
 8007c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c36:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c3a:	eb00 0906 	add.w	r9, r0, r6
 8007c3e:	d1e5      	bne.n	8007c0c <__cvt+0x68>
 8007c40:	7803      	ldrb	r3, [r0, #0]
 8007c42:	2b30      	cmp	r3, #48	@ 0x30
 8007c44:	d10a      	bne.n	8007c5c <__cvt+0xb8>
 8007c46:	2200      	movs	r2, #0
 8007c48:	2300      	movs	r3, #0
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	4629      	mov	r1, r5
 8007c4e:	f7f8 feab 	bl	80009a8 <__aeabi_dcmpeq>
 8007c52:	b918      	cbnz	r0, 8007c5c <__cvt+0xb8>
 8007c54:	f1c6 0601 	rsb	r6, r6, #1
 8007c58:	f8ca 6000 	str.w	r6, [sl]
 8007c5c:	f8da 3000 	ldr.w	r3, [sl]
 8007c60:	4499      	add	r9, r3
 8007c62:	e7d3      	b.n	8007c0c <__cvt+0x68>
 8007c64:	1c59      	adds	r1, r3, #1
 8007c66:	9107      	str	r1, [sp, #28]
 8007c68:	701a      	strb	r2, [r3, #0]
 8007c6a:	e7d9      	b.n	8007c20 <__cvt+0x7c>

08007c6c <__exponent>:
 8007c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c6e:	2900      	cmp	r1, #0
 8007c70:	bfb6      	itet	lt
 8007c72:	232d      	movlt	r3, #45	@ 0x2d
 8007c74:	232b      	movge	r3, #43	@ 0x2b
 8007c76:	4249      	neglt	r1, r1
 8007c78:	2909      	cmp	r1, #9
 8007c7a:	7002      	strb	r2, [r0, #0]
 8007c7c:	7043      	strb	r3, [r0, #1]
 8007c7e:	dd29      	ble.n	8007cd4 <__exponent+0x68>
 8007c80:	f10d 0307 	add.w	r3, sp, #7
 8007c84:	461d      	mov	r5, r3
 8007c86:	270a      	movs	r7, #10
 8007c88:	fbb1 f6f7 	udiv	r6, r1, r7
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	fb07 1416 	mls	r4, r7, r6, r1
 8007c92:	3430      	adds	r4, #48	@ 0x30
 8007c94:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007c98:	460c      	mov	r4, r1
 8007c9a:	2c63      	cmp	r4, #99	@ 0x63
 8007c9c:	4631      	mov	r1, r6
 8007c9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ca2:	dcf1      	bgt.n	8007c88 <__exponent+0x1c>
 8007ca4:	3130      	adds	r1, #48	@ 0x30
 8007ca6:	1e94      	subs	r4, r2, #2
 8007ca8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007cac:	4623      	mov	r3, r4
 8007cae:	1c41      	adds	r1, r0, #1
 8007cb0:	42ab      	cmp	r3, r5
 8007cb2:	d30a      	bcc.n	8007cca <__exponent+0x5e>
 8007cb4:	f10d 0309 	add.w	r3, sp, #9
 8007cb8:	1a9b      	subs	r3, r3, r2
 8007cba:	42ac      	cmp	r4, r5
 8007cbc:	bf88      	it	hi
 8007cbe:	2300      	movhi	r3, #0
 8007cc0:	3302      	adds	r3, #2
 8007cc2:	4403      	add	r3, r0
 8007cc4:	1a18      	subs	r0, r3, r0
 8007cc6:	b003      	add	sp, #12
 8007cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cca:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007cce:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007cd2:	e7ed      	b.n	8007cb0 <__exponent+0x44>
 8007cd4:	2330      	movs	r3, #48	@ 0x30
 8007cd6:	3130      	adds	r1, #48	@ 0x30
 8007cd8:	7083      	strb	r3, [r0, #2]
 8007cda:	70c1      	strb	r1, [r0, #3]
 8007cdc:	1d03      	adds	r3, r0, #4
 8007cde:	e7f1      	b.n	8007cc4 <__exponent+0x58>

08007ce0 <_printf_float>:
 8007ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce4:	b091      	sub	sp, #68	@ 0x44
 8007ce6:	460c      	mov	r4, r1
 8007ce8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007cec:	4616      	mov	r6, r2
 8007cee:	461f      	mov	r7, r3
 8007cf0:	4605      	mov	r5, r0
 8007cf2:	f000 fd15 	bl	8008720 <_localeconv_r>
 8007cf6:	6803      	ldr	r3, [r0, #0]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	9308      	str	r3, [sp, #32]
 8007cfc:	f7f8 fa28 	bl	8000150 <strlen>
 8007d00:	2300      	movs	r3, #0
 8007d02:	930e      	str	r3, [sp, #56]	@ 0x38
 8007d04:	f8d8 3000 	ldr.w	r3, [r8]
 8007d08:	9009      	str	r0, [sp, #36]	@ 0x24
 8007d0a:	3307      	adds	r3, #7
 8007d0c:	f023 0307 	bic.w	r3, r3, #7
 8007d10:	f103 0208 	add.w	r2, r3, #8
 8007d14:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d18:	f8d4 b000 	ldr.w	fp, [r4]
 8007d1c:	f8c8 2000 	str.w	r2, [r8]
 8007d20:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d24:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007d28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d2a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d36:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007d3a:	4b9c      	ldr	r3, [pc, #624]	@ (8007fac <_printf_float+0x2cc>)
 8007d3c:	f7f8 fe66 	bl	8000a0c <__aeabi_dcmpun>
 8007d40:	bb70      	cbnz	r0, 8007da0 <_printf_float+0xc0>
 8007d42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d46:	f04f 32ff 	mov.w	r2, #4294967295
 8007d4a:	4b98      	ldr	r3, [pc, #608]	@ (8007fac <_printf_float+0x2cc>)
 8007d4c:	f7f8 fe40 	bl	80009d0 <__aeabi_dcmple>
 8007d50:	bb30      	cbnz	r0, 8007da0 <_printf_float+0xc0>
 8007d52:	2200      	movs	r2, #0
 8007d54:	2300      	movs	r3, #0
 8007d56:	4640      	mov	r0, r8
 8007d58:	4649      	mov	r1, r9
 8007d5a:	f7f8 fe2f 	bl	80009bc <__aeabi_dcmplt>
 8007d5e:	b110      	cbz	r0, 8007d66 <_printf_float+0x86>
 8007d60:	232d      	movs	r3, #45	@ 0x2d
 8007d62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d66:	4a92      	ldr	r2, [pc, #584]	@ (8007fb0 <_printf_float+0x2d0>)
 8007d68:	4b92      	ldr	r3, [pc, #584]	@ (8007fb4 <_printf_float+0x2d4>)
 8007d6a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007d6e:	bf8c      	ite	hi
 8007d70:	4690      	movhi	r8, r2
 8007d72:	4698      	movls	r8, r3
 8007d74:	2303      	movs	r3, #3
 8007d76:	f04f 0900 	mov.w	r9, #0
 8007d7a:	6123      	str	r3, [r4, #16]
 8007d7c:	f02b 0304 	bic.w	r3, fp, #4
 8007d80:	6023      	str	r3, [r4, #0]
 8007d82:	4633      	mov	r3, r6
 8007d84:	4621      	mov	r1, r4
 8007d86:	4628      	mov	r0, r5
 8007d88:	9700      	str	r7, [sp, #0]
 8007d8a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007d8c:	f000 f9d4 	bl	8008138 <_printf_common>
 8007d90:	3001      	adds	r0, #1
 8007d92:	f040 8090 	bne.w	8007eb6 <_printf_float+0x1d6>
 8007d96:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9a:	b011      	add	sp, #68	@ 0x44
 8007d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da0:	4642      	mov	r2, r8
 8007da2:	464b      	mov	r3, r9
 8007da4:	4640      	mov	r0, r8
 8007da6:	4649      	mov	r1, r9
 8007da8:	f7f8 fe30 	bl	8000a0c <__aeabi_dcmpun>
 8007dac:	b148      	cbz	r0, 8007dc2 <_printf_float+0xe2>
 8007dae:	464b      	mov	r3, r9
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	bfb8      	it	lt
 8007db4:	232d      	movlt	r3, #45	@ 0x2d
 8007db6:	4a80      	ldr	r2, [pc, #512]	@ (8007fb8 <_printf_float+0x2d8>)
 8007db8:	bfb8      	it	lt
 8007dba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007dbe:	4b7f      	ldr	r3, [pc, #508]	@ (8007fbc <_printf_float+0x2dc>)
 8007dc0:	e7d3      	b.n	8007d6a <_printf_float+0x8a>
 8007dc2:	6863      	ldr	r3, [r4, #4]
 8007dc4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	d13f      	bne.n	8007e4c <_printf_float+0x16c>
 8007dcc:	2306      	movs	r3, #6
 8007dce:	6063      	str	r3, [r4, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007dd6:	6023      	str	r3, [r4, #0]
 8007dd8:	9206      	str	r2, [sp, #24]
 8007dda:	aa0e      	add	r2, sp, #56	@ 0x38
 8007ddc:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007de0:	aa0d      	add	r2, sp, #52	@ 0x34
 8007de2:	9203      	str	r2, [sp, #12]
 8007de4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007de8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007dec:	6863      	ldr	r3, [r4, #4]
 8007dee:	4642      	mov	r2, r8
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	4628      	mov	r0, r5
 8007df4:	464b      	mov	r3, r9
 8007df6:	910a      	str	r1, [sp, #40]	@ 0x28
 8007df8:	f7ff fed4 	bl	8007ba4 <__cvt>
 8007dfc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007dfe:	4680      	mov	r8, r0
 8007e00:	2947      	cmp	r1, #71	@ 0x47
 8007e02:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007e04:	d128      	bne.n	8007e58 <_printf_float+0x178>
 8007e06:	1cc8      	adds	r0, r1, #3
 8007e08:	db02      	blt.n	8007e10 <_printf_float+0x130>
 8007e0a:	6863      	ldr	r3, [r4, #4]
 8007e0c:	4299      	cmp	r1, r3
 8007e0e:	dd40      	ble.n	8007e92 <_printf_float+0x1b2>
 8007e10:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e14:	fa5f fa8a 	uxtb.w	sl, sl
 8007e18:	4652      	mov	r2, sl
 8007e1a:	3901      	subs	r1, #1
 8007e1c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007e20:	910d      	str	r1, [sp, #52]	@ 0x34
 8007e22:	f7ff ff23 	bl	8007c6c <__exponent>
 8007e26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e28:	4681      	mov	r9, r0
 8007e2a:	1813      	adds	r3, r2, r0
 8007e2c:	2a01      	cmp	r2, #1
 8007e2e:	6123      	str	r3, [r4, #16]
 8007e30:	dc02      	bgt.n	8007e38 <_printf_float+0x158>
 8007e32:	6822      	ldr	r2, [r4, #0]
 8007e34:	07d2      	lsls	r2, r2, #31
 8007e36:	d501      	bpl.n	8007e3c <_printf_float+0x15c>
 8007e38:	3301      	adds	r3, #1
 8007e3a:	6123      	str	r3, [r4, #16]
 8007e3c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d09e      	beq.n	8007d82 <_printf_float+0xa2>
 8007e44:	232d      	movs	r3, #45	@ 0x2d
 8007e46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e4a:	e79a      	b.n	8007d82 <_printf_float+0xa2>
 8007e4c:	2947      	cmp	r1, #71	@ 0x47
 8007e4e:	d1bf      	bne.n	8007dd0 <_printf_float+0xf0>
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1bd      	bne.n	8007dd0 <_printf_float+0xf0>
 8007e54:	2301      	movs	r3, #1
 8007e56:	e7ba      	b.n	8007dce <_printf_float+0xee>
 8007e58:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e5c:	d9dc      	bls.n	8007e18 <_printf_float+0x138>
 8007e5e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007e62:	d118      	bne.n	8007e96 <_printf_float+0x1b6>
 8007e64:	2900      	cmp	r1, #0
 8007e66:	6863      	ldr	r3, [r4, #4]
 8007e68:	dd0b      	ble.n	8007e82 <_printf_float+0x1a2>
 8007e6a:	6121      	str	r1, [r4, #16]
 8007e6c:	b913      	cbnz	r3, 8007e74 <_printf_float+0x194>
 8007e6e:	6822      	ldr	r2, [r4, #0]
 8007e70:	07d0      	lsls	r0, r2, #31
 8007e72:	d502      	bpl.n	8007e7a <_printf_float+0x19a>
 8007e74:	3301      	adds	r3, #1
 8007e76:	440b      	add	r3, r1
 8007e78:	6123      	str	r3, [r4, #16]
 8007e7a:	f04f 0900 	mov.w	r9, #0
 8007e7e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007e80:	e7dc      	b.n	8007e3c <_printf_float+0x15c>
 8007e82:	b913      	cbnz	r3, 8007e8a <_printf_float+0x1aa>
 8007e84:	6822      	ldr	r2, [r4, #0]
 8007e86:	07d2      	lsls	r2, r2, #31
 8007e88:	d501      	bpl.n	8007e8e <_printf_float+0x1ae>
 8007e8a:	3302      	adds	r3, #2
 8007e8c:	e7f4      	b.n	8007e78 <_printf_float+0x198>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e7f2      	b.n	8007e78 <_printf_float+0x198>
 8007e92:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007e96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e98:	4299      	cmp	r1, r3
 8007e9a:	db05      	blt.n	8007ea8 <_printf_float+0x1c8>
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	6121      	str	r1, [r4, #16]
 8007ea0:	07d8      	lsls	r0, r3, #31
 8007ea2:	d5ea      	bpl.n	8007e7a <_printf_float+0x19a>
 8007ea4:	1c4b      	adds	r3, r1, #1
 8007ea6:	e7e7      	b.n	8007e78 <_printf_float+0x198>
 8007ea8:	2900      	cmp	r1, #0
 8007eaa:	bfcc      	ite	gt
 8007eac:	2201      	movgt	r2, #1
 8007eae:	f1c1 0202 	rsble	r2, r1, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	e7e0      	b.n	8007e78 <_printf_float+0x198>
 8007eb6:	6823      	ldr	r3, [r4, #0]
 8007eb8:	055a      	lsls	r2, r3, #21
 8007eba:	d407      	bmi.n	8007ecc <_printf_float+0x1ec>
 8007ebc:	6923      	ldr	r3, [r4, #16]
 8007ebe:	4642      	mov	r2, r8
 8007ec0:	4631      	mov	r1, r6
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	47b8      	blx	r7
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	d12b      	bne.n	8007f22 <_printf_float+0x242>
 8007eca:	e764      	b.n	8007d96 <_printf_float+0xb6>
 8007ecc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ed0:	f240 80dc 	bls.w	800808c <_printf_float+0x3ac>
 8007ed4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007ed8:	2200      	movs	r2, #0
 8007eda:	2300      	movs	r3, #0
 8007edc:	f7f8 fd64 	bl	80009a8 <__aeabi_dcmpeq>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d033      	beq.n	8007f4c <_printf_float+0x26c>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	4631      	mov	r1, r6
 8007ee8:	4628      	mov	r0, r5
 8007eea:	4a35      	ldr	r2, [pc, #212]	@ (8007fc0 <_printf_float+0x2e0>)
 8007eec:	47b8      	blx	r7
 8007eee:	3001      	adds	r0, #1
 8007ef0:	f43f af51 	beq.w	8007d96 <_printf_float+0xb6>
 8007ef4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007ef8:	4543      	cmp	r3, r8
 8007efa:	db02      	blt.n	8007f02 <_printf_float+0x222>
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	07d8      	lsls	r0, r3, #31
 8007f00:	d50f      	bpl.n	8007f22 <_printf_float+0x242>
 8007f02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007f06:	4631      	mov	r1, r6
 8007f08:	4628      	mov	r0, r5
 8007f0a:	47b8      	blx	r7
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	f43f af42 	beq.w	8007d96 <_printf_float+0xb6>
 8007f12:	f04f 0900 	mov.w	r9, #0
 8007f16:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f1a:	f104 0a1a 	add.w	sl, r4, #26
 8007f1e:	45c8      	cmp	r8, r9
 8007f20:	dc09      	bgt.n	8007f36 <_printf_float+0x256>
 8007f22:	6823      	ldr	r3, [r4, #0]
 8007f24:	079b      	lsls	r3, r3, #30
 8007f26:	f100 8102 	bmi.w	800812e <_printf_float+0x44e>
 8007f2a:	68e0      	ldr	r0, [r4, #12]
 8007f2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f2e:	4298      	cmp	r0, r3
 8007f30:	bfb8      	it	lt
 8007f32:	4618      	movlt	r0, r3
 8007f34:	e731      	b.n	8007d9a <_printf_float+0xba>
 8007f36:	2301      	movs	r3, #1
 8007f38:	4652      	mov	r2, sl
 8007f3a:	4631      	mov	r1, r6
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	47b8      	blx	r7
 8007f40:	3001      	adds	r0, #1
 8007f42:	f43f af28 	beq.w	8007d96 <_printf_float+0xb6>
 8007f46:	f109 0901 	add.w	r9, r9, #1
 8007f4a:	e7e8      	b.n	8007f1e <_printf_float+0x23e>
 8007f4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	dc38      	bgt.n	8007fc4 <_printf_float+0x2e4>
 8007f52:	2301      	movs	r3, #1
 8007f54:	4631      	mov	r1, r6
 8007f56:	4628      	mov	r0, r5
 8007f58:	4a19      	ldr	r2, [pc, #100]	@ (8007fc0 <_printf_float+0x2e0>)
 8007f5a:	47b8      	blx	r7
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	f43f af1a 	beq.w	8007d96 <_printf_float+0xb6>
 8007f62:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007f66:	ea59 0303 	orrs.w	r3, r9, r3
 8007f6a:	d102      	bne.n	8007f72 <_printf_float+0x292>
 8007f6c:	6823      	ldr	r3, [r4, #0]
 8007f6e:	07d9      	lsls	r1, r3, #31
 8007f70:	d5d7      	bpl.n	8007f22 <_printf_float+0x242>
 8007f72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007f76:	4631      	mov	r1, r6
 8007f78:	4628      	mov	r0, r5
 8007f7a:	47b8      	blx	r7
 8007f7c:	3001      	adds	r0, #1
 8007f7e:	f43f af0a 	beq.w	8007d96 <_printf_float+0xb6>
 8007f82:	f04f 0a00 	mov.w	sl, #0
 8007f86:	f104 0b1a 	add.w	fp, r4, #26
 8007f8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f8c:	425b      	negs	r3, r3
 8007f8e:	4553      	cmp	r3, sl
 8007f90:	dc01      	bgt.n	8007f96 <_printf_float+0x2b6>
 8007f92:	464b      	mov	r3, r9
 8007f94:	e793      	b.n	8007ebe <_printf_float+0x1de>
 8007f96:	2301      	movs	r3, #1
 8007f98:	465a      	mov	r2, fp
 8007f9a:	4631      	mov	r1, r6
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	47b8      	blx	r7
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	f43f aef8 	beq.w	8007d96 <_printf_float+0xb6>
 8007fa6:	f10a 0a01 	add.w	sl, sl, #1
 8007faa:	e7ee      	b.n	8007f8a <_printf_float+0x2aa>
 8007fac:	7fefffff 	.word	0x7fefffff
 8007fb0:	0800b0f6 	.word	0x0800b0f6
 8007fb4:	0800b0f2 	.word	0x0800b0f2
 8007fb8:	0800b0fe 	.word	0x0800b0fe
 8007fbc:	0800b0fa 	.word	0x0800b0fa
 8007fc0:	0800b102 	.word	0x0800b102
 8007fc4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007fc6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007fca:	4553      	cmp	r3, sl
 8007fcc:	bfa8      	it	ge
 8007fce:	4653      	movge	r3, sl
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	4699      	mov	r9, r3
 8007fd4:	dc36      	bgt.n	8008044 <_printf_float+0x364>
 8007fd6:	f04f 0b00 	mov.w	fp, #0
 8007fda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fde:	f104 021a 	add.w	r2, r4, #26
 8007fe2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007fe4:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fe6:	eba3 0309 	sub.w	r3, r3, r9
 8007fea:	455b      	cmp	r3, fp
 8007fec:	dc31      	bgt.n	8008052 <_printf_float+0x372>
 8007fee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ff0:	459a      	cmp	sl, r3
 8007ff2:	dc3a      	bgt.n	800806a <_printf_float+0x38a>
 8007ff4:	6823      	ldr	r3, [r4, #0]
 8007ff6:	07da      	lsls	r2, r3, #31
 8007ff8:	d437      	bmi.n	800806a <_printf_float+0x38a>
 8007ffa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ffc:	ebaa 0903 	sub.w	r9, sl, r3
 8008000:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008002:	ebaa 0303 	sub.w	r3, sl, r3
 8008006:	4599      	cmp	r9, r3
 8008008:	bfa8      	it	ge
 800800a:	4699      	movge	r9, r3
 800800c:	f1b9 0f00 	cmp.w	r9, #0
 8008010:	dc33      	bgt.n	800807a <_printf_float+0x39a>
 8008012:	f04f 0800 	mov.w	r8, #0
 8008016:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800801a:	f104 0b1a 	add.w	fp, r4, #26
 800801e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008020:	ebaa 0303 	sub.w	r3, sl, r3
 8008024:	eba3 0309 	sub.w	r3, r3, r9
 8008028:	4543      	cmp	r3, r8
 800802a:	f77f af7a 	ble.w	8007f22 <_printf_float+0x242>
 800802e:	2301      	movs	r3, #1
 8008030:	465a      	mov	r2, fp
 8008032:	4631      	mov	r1, r6
 8008034:	4628      	mov	r0, r5
 8008036:	47b8      	blx	r7
 8008038:	3001      	adds	r0, #1
 800803a:	f43f aeac 	beq.w	8007d96 <_printf_float+0xb6>
 800803e:	f108 0801 	add.w	r8, r8, #1
 8008042:	e7ec      	b.n	800801e <_printf_float+0x33e>
 8008044:	4642      	mov	r2, r8
 8008046:	4631      	mov	r1, r6
 8008048:	4628      	mov	r0, r5
 800804a:	47b8      	blx	r7
 800804c:	3001      	adds	r0, #1
 800804e:	d1c2      	bne.n	8007fd6 <_printf_float+0x2f6>
 8008050:	e6a1      	b.n	8007d96 <_printf_float+0xb6>
 8008052:	2301      	movs	r3, #1
 8008054:	4631      	mov	r1, r6
 8008056:	4628      	mov	r0, r5
 8008058:	920a      	str	r2, [sp, #40]	@ 0x28
 800805a:	47b8      	blx	r7
 800805c:	3001      	adds	r0, #1
 800805e:	f43f ae9a 	beq.w	8007d96 <_printf_float+0xb6>
 8008062:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008064:	f10b 0b01 	add.w	fp, fp, #1
 8008068:	e7bb      	b.n	8007fe2 <_printf_float+0x302>
 800806a:	4631      	mov	r1, r6
 800806c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008070:	4628      	mov	r0, r5
 8008072:	47b8      	blx	r7
 8008074:	3001      	adds	r0, #1
 8008076:	d1c0      	bne.n	8007ffa <_printf_float+0x31a>
 8008078:	e68d      	b.n	8007d96 <_printf_float+0xb6>
 800807a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800807c:	464b      	mov	r3, r9
 800807e:	4631      	mov	r1, r6
 8008080:	4628      	mov	r0, r5
 8008082:	4442      	add	r2, r8
 8008084:	47b8      	blx	r7
 8008086:	3001      	adds	r0, #1
 8008088:	d1c3      	bne.n	8008012 <_printf_float+0x332>
 800808a:	e684      	b.n	8007d96 <_printf_float+0xb6>
 800808c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008090:	f1ba 0f01 	cmp.w	sl, #1
 8008094:	dc01      	bgt.n	800809a <_printf_float+0x3ba>
 8008096:	07db      	lsls	r3, r3, #31
 8008098:	d536      	bpl.n	8008108 <_printf_float+0x428>
 800809a:	2301      	movs	r3, #1
 800809c:	4642      	mov	r2, r8
 800809e:	4631      	mov	r1, r6
 80080a0:	4628      	mov	r0, r5
 80080a2:	47b8      	blx	r7
 80080a4:	3001      	adds	r0, #1
 80080a6:	f43f ae76 	beq.w	8007d96 <_printf_float+0xb6>
 80080aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80080ae:	4631      	mov	r1, r6
 80080b0:	4628      	mov	r0, r5
 80080b2:	47b8      	blx	r7
 80080b4:	3001      	adds	r0, #1
 80080b6:	f43f ae6e 	beq.w	8007d96 <_printf_float+0xb6>
 80080ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80080be:	2200      	movs	r2, #0
 80080c0:	2300      	movs	r3, #0
 80080c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080c6:	f7f8 fc6f 	bl	80009a8 <__aeabi_dcmpeq>
 80080ca:	b9c0      	cbnz	r0, 80080fe <_printf_float+0x41e>
 80080cc:	4653      	mov	r3, sl
 80080ce:	f108 0201 	add.w	r2, r8, #1
 80080d2:	4631      	mov	r1, r6
 80080d4:	4628      	mov	r0, r5
 80080d6:	47b8      	blx	r7
 80080d8:	3001      	adds	r0, #1
 80080da:	d10c      	bne.n	80080f6 <_printf_float+0x416>
 80080dc:	e65b      	b.n	8007d96 <_printf_float+0xb6>
 80080de:	2301      	movs	r3, #1
 80080e0:	465a      	mov	r2, fp
 80080e2:	4631      	mov	r1, r6
 80080e4:	4628      	mov	r0, r5
 80080e6:	47b8      	blx	r7
 80080e8:	3001      	adds	r0, #1
 80080ea:	f43f ae54 	beq.w	8007d96 <_printf_float+0xb6>
 80080ee:	f108 0801 	add.w	r8, r8, #1
 80080f2:	45d0      	cmp	r8, sl
 80080f4:	dbf3      	blt.n	80080de <_printf_float+0x3fe>
 80080f6:	464b      	mov	r3, r9
 80080f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80080fc:	e6e0      	b.n	8007ec0 <_printf_float+0x1e0>
 80080fe:	f04f 0800 	mov.w	r8, #0
 8008102:	f104 0b1a 	add.w	fp, r4, #26
 8008106:	e7f4      	b.n	80080f2 <_printf_float+0x412>
 8008108:	2301      	movs	r3, #1
 800810a:	4642      	mov	r2, r8
 800810c:	e7e1      	b.n	80080d2 <_printf_float+0x3f2>
 800810e:	2301      	movs	r3, #1
 8008110:	464a      	mov	r2, r9
 8008112:	4631      	mov	r1, r6
 8008114:	4628      	mov	r0, r5
 8008116:	47b8      	blx	r7
 8008118:	3001      	adds	r0, #1
 800811a:	f43f ae3c 	beq.w	8007d96 <_printf_float+0xb6>
 800811e:	f108 0801 	add.w	r8, r8, #1
 8008122:	68e3      	ldr	r3, [r4, #12]
 8008124:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008126:	1a5b      	subs	r3, r3, r1
 8008128:	4543      	cmp	r3, r8
 800812a:	dcf0      	bgt.n	800810e <_printf_float+0x42e>
 800812c:	e6fd      	b.n	8007f2a <_printf_float+0x24a>
 800812e:	f04f 0800 	mov.w	r8, #0
 8008132:	f104 0919 	add.w	r9, r4, #25
 8008136:	e7f4      	b.n	8008122 <_printf_float+0x442>

08008138 <_printf_common>:
 8008138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800813c:	4616      	mov	r6, r2
 800813e:	4698      	mov	r8, r3
 8008140:	688a      	ldr	r2, [r1, #8]
 8008142:	690b      	ldr	r3, [r1, #16]
 8008144:	4607      	mov	r7, r0
 8008146:	4293      	cmp	r3, r2
 8008148:	bfb8      	it	lt
 800814a:	4613      	movlt	r3, r2
 800814c:	6033      	str	r3, [r6, #0]
 800814e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008152:	460c      	mov	r4, r1
 8008154:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008158:	b10a      	cbz	r2, 800815e <_printf_common+0x26>
 800815a:	3301      	adds	r3, #1
 800815c:	6033      	str	r3, [r6, #0]
 800815e:	6823      	ldr	r3, [r4, #0]
 8008160:	0699      	lsls	r1, r3, #26
 8008162:	bf42      	ittt	mi
 8008164:	6833      	ldrmi	r3, [r6, #0]
 8008166:	3302      	addmi	r3, #2
 8008168:	6033      	strmi	r3, [r6, #0]
 800816a:	6825      	ldr	r5, [r4, #0]
 800816c:	f015 0506 	ands.w	r5, r5, #6
 8008170:	d106      	bne.n	8008180 <_printf_common+0x48>
 8008172:	f104 0a19 	add.w	sl, r4, #25
 8008176:	68e3      	ldr	r3, [r4, #12]
 8008178:	6832      	ldr	r2, [r6, #0]
 800817a:	1a9b      	subs	r3, r3, r2
 800817c:	42ab      	cmp	r3, r5
 800817e:	dc2b      	bgt.n	80081d8 <_printf_common+0xa0>
 8008180:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008184:	6822      	ldr	r2, [r4, #0]
 8008186:	3b00      	subs	r3, #0
 8008188:	bf18      	it	ne
 800818a:	2301      	movne	r3, #1
 800818c:	0692      	lsls	r2, r2, #26
 800818e:	d430      	bmi.n	80081f2 <_printf_common+0xba>
 8008190:	4641      	mov	r1, r8
 8008192:	4638      	mov	r0, r7
 8008194:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008198:	47c8      	blx	r9
 800819a:	3001      	adds	r0, #1
 800819c:	d023      	beq.n	80081e6 <_printf_common+0xae>
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	6922      	ldr	r2, [r4, #16]
 80081a2:	f003 0306 	and.w	r3, r3, #6
 80081a6:	2b04      	cmp	r3, #4
 80081a8:	bf14      	ite	ne
 80081aa:	2500      	movne	r5, #0
 80081ac:	6833      	ldreq	r3, [r6, #0]
 80081ae:	f04f 0600 	mov.w	r6, #0
 80081b2:	bf08      	it	eq
 80081b4:	68e5      	ldreq	r5, [r4, #12]
 80081b6:	f104 041a 	add.w	r4, r4, #26
 80081ba:	bf08      	it	eq
 80081bc:	1aed      	subeq	r5, r5, r3
 80081be:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80081c2:	bf08      	it	eq
 80081c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081c8:	4293      	cmp	r3, r2
 80081ca:	bfc4      	itt	gt
 80081cc:	1a9b      	subgt	r3, r3, r2
 80081ce:	18ed      	addgt	r5, r5, r3
 80081d0:	42b5      	cmp	r5, r6
 80081d2:	d11a      	bne.n	800820a <_printf_common+0xd2>
 80081d4:	2000      	movs	r0, #0
 80081d6:	e008      	b.n	80081ea <_printf_common+0xb2>
 80081d8:	2301      	movs	r3, #1
 80081da:	4652      	mov	r2, sl
 80081dc:	4641      	mov	r1, r8
 80081de:	4638      	mov	r0, r7
 80081e0:	47c8      	blx	r9
 80081e2:	3001      	adds	r0, #1
 80081e4:	d103      	bne.n	80081ee <_printf_common+0xb6>
 80081e6:	f04f 30ff 	mov.w	r0, #4294967295
 80081ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ee:	3501      	adds	r5, #1
 80081f0:	e7c1      	b.n	8008176 <_printf_common+0x3e>
 80081f2:	2030      	movs	r0, #48	@ 0x30
 80081f4:	18e1      	adds	r1, r4, r3
 80081f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80081fa:	1c5a      	adds	r2, r3, #1
 80081fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008200:	4422      	add	r2, r4
 8008202:	3302      	adds	r3, #2
 8008204:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008208:	e7c2      	b.n	8008190 <_printf_common+0x58>
 800820a:	2301      	movs	r3, #1
 800820c:	4622      	mov	r2, r4
 800820e:	4641      	mov	r1, r8
 8008210:	4638      	mov	r0, r7
 8008212:	47c8      	blx	r9
 8008214:	3001      	adds	r0, #1
 8008216:	d0e6      	beq.n	80081e6 <_printf_common+0xae>
 8008218:	3601      	adds	r6, #1
 800821a:	e7d9      	b.n	80081d0 <_printf_common+0x98>

0800821c <_printf_i>:
 800821c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008220:	7e0f      	ldrb	r7, [r1, #24]
 8008222:	4691      	mov	r9, r2
 8008224:	2f78      	cmp	r7, #120	@ 0x78
 8008226:	4680      	mov	r8, r0
 8008228:	460c      	mov	r4, r1
 800822a:	469a      	mov	sl, r3
 800822c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800822e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008232:	d807      	bhi.n	8008244 <_printf_i+0x28>
 8008234:	2f62      	cmp	r7, #98	@ 0x62
 8008236:	d80a      	bhi.n	800824e <_printf_i+0x32>
 8008238:	2f00      	cmp	r7, #0
 800823a:	f000 80d1 	beq.w	80083e0 <_printf_i+0x1c4>
 800823e:	2f58      	cmp	r7, #88	@ 0x58
 8008240:	f000 80b8 	beq.w	80083b4 <_printf_i+0x198>
 8008244:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008248:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800824c:	e03a      	b.n	80082c4 <_printf_i+0xa8>
 800824e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008252:	2b15      	cmp	r3, #21
 8008254:	d8f6      	bhi.n	8008244 <_printf_i+0x28>
 8008256:	a101      	add	r1, pc, #4	@ (adr r1, 800825c <_printf_i+0x40>)
 8008258:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800825c:	080082b5 	.word	0x080082b5
 8008260:	080082c9 	.word	0x080082c9
 8008264:	08008245 	.word	0x08008245
 8008268:	08008245 	.word	0x08008245
 800826c:	08008245 	.word	0x08008245
 8008270:	08008245 	.word	0x08008245
 8008274:	080082c9 	.word	0x080082c9
 8008278:	08008245 	.word	0x08008245
 800827c:	08008245 	.word	0x08008245
 8008280:	08008245 	.word	0x08008245
 8008284:	08008245 	.word	0x08008245
 8008288:	080083c7 	.word	0x080083c7
 800828c:	080082f3 	.word	0x080082f3
 8008290:	08008381 	.word	0x08008381
 8008294:	08008245 	.word	0x08008245
 8008298:	08008245 	.word	0x08008245
 800829c:	080083e9 	.word	0x080083e9
 80082a0:	08008245 	.word	0x08008245
 80082a4:	080082f3 	.word	0x080082f3
 80082a8:	08008245 	.word	0x08008245
 80082ac:	08008245 	.word	0x08008245
 80082b0:	08008389 	.word	0x08008389
 80082b4:	6833      	ldr	r3, [r6, #0]
 80082b6:	1d1a      	adds	r2, r3, #4
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	6032      	str	r2, [r6, #0]
 80082bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80082c4:	2301      	movs	r3, #1
 80082c6:	e09c      	b.n	8008402 <_printf_i+0x1e6>
 80082c8:	6833      	ldr	r3, [r6, #0]
 80082ca:	6820      	ldr	r0, [r4, #0]
 80082cc:	1d19      	adds	r1, r3, #4
 80082ce:	6031      	str	r1, [r6, #0]
 80082d0:	0606      	lsls	r6, r0, #24
 80082d2:	d501      	bpl.n	80082d8 <_printf_i+0xbc>
 80082d4:	681d      	ldr	r5, [r3, #0]
 80082d6:	e003      	b.n	80082e0 <_printf_i+0xc4>
 80082d8:	0645      	lsls	r5, r0, #25
 80082da:	d5fb      	bpl.n	80082d4 <_printf_i+0xb8>
 80082dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80082e0:	2d00      	cmp	r5, #0
 80082e2:	da03      	bge.n	80082ec <_printf_i+0xd0>
 80082e4:	232d      	movs	r3, #45	@ 0x2d
 80082e6:	426d      	negs	r5, r5
 80082e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082ec:	230a      	movs	r3, #10
 80082ee:	4858      	ldr	r0, [pc, #352]	@ (8008450 <_printf_i+0x234>)
 80082f0:	e011      	b.n	8008316 <_printf_i+0xfa>
 80082f2:	6821      	ldr	r1, [r4, #0]
 80082f4:	6833      	ldr	r3, [r6, #0]
 80082f6:	0608      	lsls	r0, r1, #24
 80082f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80082fc:	d402      	bmi.n	8008304 <_printf_i+0xe8>
 80082fe:	0649      	lsls	r1, r1, #25
 8008300:	bf48      	it	mi
 8008302:	b2ad      	uxthmi	r5, r5
 8008304:	2f6f      	cmp	r7, #111	@ 0x6f
 8008306:	6033      	str	r3, [r6, #0]
 8008308:	bf14      	ite	ne
 800830a:	230a      	movne	r3, #10
 800830c:	2308      	moveq	r3, #8
 800830e:	4850      	ldr	r0, [pc, #320]	@ (8008450 <_printf_i+0x234>)
 8008310:	2100      	movs	r1, #0
 8008312:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008316:	6866      	ldr	r6, [r4, #4]
 8008318:	2e00      	cmp	r6, #0
 800831a:	60a6      	str	r6, [r4, #8]
 800831c:	db05      	blt.n	800832a <_printf_i+0x10e>
 800831e:	6821      	ldr	r1, [r4, #0]
 8008320:	432e      	orrs	r6, r5
 8008322:	f021 0104 	bic.w	r1, r1, #4
 8008326:	6021      	str	r1, [r4, #0]
 8008328:	d04b      	beq.n	80083c2 <_printf_i+0x1a6>
 800832a:	4616      	mov	r6, r2
 800832c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008330:	fb03 5711 	mls	r7, r3, r1, r5
 8008334:	5dc7      	ldrb	r7, [r0, r7]
 8008336:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800833a:	462f      	mov	r7, r5
 800833c:	42bb      	cmp	r3, r7
 800833e:	460d      	mov	r5, r1
 8008340:	d9f4      	bls.n	800832c <_printf_i+0x110>
 8008342:	2b08      	cmp	r3, #8
 8008344:	d10b      	bne.n	800835e <_printf_i+0x142>
 8008346:	6823      	ldr	r3, [r4, #0]
 8008348:	07df      	lsls	r7, r3, #31
 800834a:	d508      	bpl.n	800835e <_printf_i+0x142>
 800834c:	6923      	ldr	r3, [r4, #16]
 800834e:	6861      	ldr	r1, [r4, #4]
 8008350:	4299      	cmp	r1, r3
 8008352:	bfde      	ittt	le
 8008354:	2330      	movle	r3, #48	@ 0x30
 8008356:	f806 3c01 	strble.w	r3, [r6, #-1]
 800835a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800835e:	1b92      	subs	r2, r2, r6
 8008360:	6122      	str	r2, [r4, #16]
 8008362:	464b      	mov	r3, r9
 8008364:	4621      	mov	r1, r4
 8008366:	4640      	mov	r0, r8
 8008368:	f8cd a000 	str.w	sl, [sp]
 800836c:	aa03      	add	r2, sp, #12
 800836e:	f7ff fee3 	bl	8008138 <_printf_common>
 8008372:	3001      	adds	r0, #1
 8008374:	d14a      	bne.n	800840c <_printf_i+0x1f0>
 8008376:	f04f 30ff 	mov.w	r0, #4294967295
 800837a:	b004      	add	sp, #16
 800837c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008380:	6823      	ldr	r3, [r4, #0]
 8008382:	f043 0320 	orr.w	r3, r3, #32
 8008386:	6023      	str	r3, [r4, #0]
 8008388:	2778      	movs	r7, #120	@ 0x78
 800838a:	4832      	ldr	r0, [pc, #200]	@ (8008454 <_printf_i+0x238>)
 800838c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008390:	6823      	ldr	r3, [r4, #0]
 8008392:	6831      	ldr	r1, [r6, #0]
 8008394:	061f      	lsls	r7, r3, #24
 8008396:	f851 5b04 	ldr.w	r5, [r1], #4
 800839a:	d402      	bmi.n	80083a2 <_printf_i+0x186>
 800839c:	065f      	lsls	r7, r3, #25
 800839e:	bf48      	it	mi
 80083a0:	b2ad      	uxthmi	r5, r5
 80083a2:	6031      	str	r1, [r6, #0]
 80083a4:	07d9      	lsls	r1, r3, #31
 80083a6:	bf44      	itt	mi
 80083a8:	f043 0320 	orrmi.w	r3, r3, #32
 80083ac:	6023      	strmi	r3, [r4, #0]
 80083ae:	b11d      	cbz	r5, 80083b8 <_printf_i+0x19c>
 80083b0:	2310      	movs	r3, #16
 80083b2:	e7ad      	b.n	8008310 <_printf_i+0xf4>
 80083b4:	4826      	ldr	r0, [pc, #152]	@ (8008450 <_printf_i+0x234>)
 80083b6:	e7e9      	b.n	800838c <_printf_i+0x170>
 80083b8:	6823      	ldr	r3, [r4, #0]
 80083ba:	f023 0320 	bic.w	r3, r3, #32
 80083be:	6023      	str	r3, [r4, #0]
 80083c0:	e7f6      	b.n	80083b0 <_printf_i+0x194>
 80083c2:	4616      	mov	r6, r2
 80083c4:	e7bd      	b.n	8008342 <_printf_i+0x126>
 80083c6:	6833      	ldr	r3, [r6, #0]
 80083c8:	6825      	ldr	r5, [r4, #0]
 80083ca:	1d18      	adds	r0, r3, #4
 80083cc:	6961      	ldr	r1, [r4, #20]
 80083ce:	6030      	str	r0, [r6, #0]
 80083d0:	062e      	lsls	r6, r5, #24
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	d501      	bpl.n	80083da <_printf_i+0x1be>
 80083d6:	6019      	str	r1, [r3, #0]
 80083d8:	e002      	b.n	80083e0 <_printf_i+0x1c4>
 80083da:	0668      	lsls	r0, r5, #25
 80083dc:	d5fb      	bpl.n	80083d6 <_printf_i+0x1ba>
 80083de:	8019      	strh	r1, [r3, #0]
 80083e0:	2300      	movs	r3, #0
 80083e2:	4616      	mov	r6, r2
 80083e4:	6123      	str	r3, [r4, #16]
 80083e6:	e7bc      	b.n	8008362 <_printf_i+0x146>
 80083e8:	6833      	ldr	r3, [r6, #0]
 80083ea:	2100      	movs	r1, #0
 80083ec:	1d1a      	adds	r2, r3, #4
 80083ee:	6032      	str	r2, [r6, #0]
 80083f0:	681e      	ldr	r6, [r3, #0]
 80083f2:	6862      	ldr	r2, [r4, #4]
 80083f4:	4630      	mov	r0, r6
 80083f6:	f000 fa12 	bl	800881e <memchr>
 80083fa:	b108      	cbz	r0, 8008400 <_printf_i+0x1e4>
 80083fc:	1b80      	subs	r0, r0, r6
 80083fe:	6060      	str	r0, [r4, #4]
 8008400:	6863      	ldr	r3, [r4, #4]
 8008402:	6123      	str	r3, [r4, #16]
 8008404:	2300      	movs	r3, #0
 8008406:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800840a:	e7aa      	b.n	8008362 <_printf_i+0x146>
 800840c:	4632      	mov	r2, r6
 800840e:	4649      	mov	r1, r9
 8008410:	4640      	mov	r0, r8
 8008412:	6923      	ldr	r3, [r4, #16]
 8008414:	47d0      	blx	sl
 8008416:	3001      	adds	r0, #1
 8008418:	d0ad      	beq.n	8008376 <_printf_i+0x15a>
 800841a:	6823      	ldr	r3, [r4, #0]
 800841c:	079b      	lsls	r3, r3, #30
 800841e:	d413      	bmi.n	8008448 <_printf_i+0x22c>
 8008420:	68e0      	ldr	r0, [r4, #12]
 8008422:	9b03      	ldr	r3, [sp, #12]
 8008424:	4298      	cmp	r0, r3
 8008426:	bfb8      	it	lt
 8008428:	4618      	movlt	r0, r3
 800842a:	e7a6      	b.n	800837a <_printf_i+0x15e>
 800842c:	2301      	movs	r3, #1
 800842e:	4632      	mov	r2, r6
 8008430:	4649      	mov	r1, r9
 8008432:	4640      	mov	r0, r8
 8008434:	47d0      	blx	sl
 8008436:	3001      	adds	r0, #1
 8008438:	d09d      	beq.n	8008376 <_printf_i+0x15a>
 800843a:	3501      	adds	r5, #1
 800843c:	68e3      	ldr	r3, [r4, #12]
 800843e:	9903      	ldr	r1, [sp, #12]
 8008440:	1a5b      	subs	r3, r3, r1
 8008442:	42ab      	cmp	r3, r5
 8008444:	dcf2      	bgt.n	800842c <_printf_i+0x210>
 8008446:	e7eb      	b.n	8008420 <_printf_i+0x204>
 8008448:	2500      	movs	r5, #0
 800844a:	f104 0619 	add.w	r6, r4, #25
 800844e:	e7f5      	b.n	800843c <_printf_i+0x220>
 8008450:	0800b104 	.word	0x0800b104
 8008454:	0800b115 	.word	0x0800b115

08008458 <std>:
 8008458:	2300      	movs	r3, #0
 800845a:	b510      	push	{r4, lr}
 800845c:	4604      	mov	r4, r0
 800845e:	e9c0 3300 	strd	r3, r3, [r0]
 8008462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008466:	6083      	str	r3, [r0, #8]
 8008468:	8181      	strh	r1, [r0, #12]
 800846a:	6643      	str	r3, [r0, #100]	@ 0x64
 800846c:	81c2      	strh	r2, [r0, #14]
 800846e:	6183      	str	r3, [r0, #24]
 8008470:	4619      	mov	r1, r3
 8008472:	2208      	movs	r2, #8
 8008474:	305c      	adds	r0, #92	@ 0x5c
 8008476:	f000 f926 	bl	80086c6 <memset>
 800847a:	4b0d      	ldr	r3, [pc, #52]	@ (80084b0 <std+0x58>)
 800847c:	6224      	str	r4, [r4, #32]
 800847e:	6263      	str	r3, [r4, #36]	@ 0x24
 8008480:	4b0c      	ldr	r3, [pc, #48]	@ (80084b4 <std+0x5c>)
 8008482:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008484:	4b0c      	ldr	r3, [pc, #48]	@ (80084b8 <std+0x60>)
 8008486:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008488:	4b0c      	ldr	r3, [pc, #48]	@ (80084bc <std+0x64>)
 800848a:	6323      	str	r3, [r4, #48]	@ 0x30
 800848c:	4b0c      	ldr	r3, [pc, #48]	@ (80084c0 <std+0x68>)
 800848e:	429c      	cmp	r4, r3
 8008490:	d006      	beq.n	80084a0 <std+0x48>
 8008492:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008496:	4294      	cmp	r4, r2
 8008498:	d002      	beq.n	80084a0 <std+0x48>
 800849a:	33d0      	adds	r3, #208	@ 0xd0
 800849c:	429c      	cmp	r4, r3
 800849e:	d105      	bne.n	80084ac <std+0x54>
 80084a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80084a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084a8:	f000 b9ae 	b.w	8008808 <__retarget_lock_init_recursive>
 80084ac:	bd10      	pop	{r4, pc}
 80084ae:	bf00      	nop
 80084b0:	08008621 	.word	0x08008621
 80084b4:	08008643 	.word	0x08008643
 80084b8:	0800867b 	.word	0x0800867b
 80084bc:	0800869f 	.word	0x0800869f
 80084c0:	2000090c 	.word	0x2000090c

080084c4 <stdio_exit_handler>:
 80084c4:	4a02      	ldr	r2, [pc, #8]	@ (80084d0 <stdio_exit_handler+0xc>)
 80084c6:	4903      	ldr	r1, [pc, #12]	@ (80084d4 <stdio_exit_handler+0x10>)
 80084c8:	4803      	ldr	r0, [pc, #12]	@ (80084d8 <stdio_exit_handler+0x14>)
 80084ca:	f000 b869 	b.w	80085a0 <_fwalk_sglue>
 80084ce:	bf00      	nop
 80084d0:	2000000c 	.word	0x2000000c
 80084d4:	0800a1b1 	.word	0x0800a1b1
 80084d8:	2000001c 	.word	0x2000001c

080084dc <cleanup_stdio>:
 80084dc:	6841      	ldr	r1, [r0, #4]
 80084de:	4b0c      	ldr	r3, [pc, #48]	@ (8008510 <cleanup_stdio+0x34>)
 80084e0:	b510      	push	{r4, lr}
 80084e2:	4299      	cmp	r1, r3
 80084e4:	4604      	mov	r4, r0
 80084e6:	d001      	beq.n	80084ec <cleanup_stdio+0x10>
 80084e8:	f001 fe62 	bl	800a1b0 <_fflush_r>
 80084ec:	68a1      	ldr	r1, [r4, #8]
 80084ee:	4b09      	ldr	r3, [pc, #36]	@ (8008514 <cleanup_stdio+0x38>)
 80084f0:	4299      	cmp	r1, r3
 80084f2:	d002      	beq.n	80084fa <cleanup_stdio+0x1e>
 80084f4:	4620      	mov	r0, r4
 80084f6:	f001 fe5b 	bl	800a1b0 <_fflush_r>
 80084fa:	68e1      	ldr	r1, [r4, #12]
 80084fc:	4b06      	ldr	r3, [pc, #24]	@ (8008518 <cleanup_stdio+0x3c>)
 80084fe:	4299      	cmp	r1, r3
 8008500:	d004      	beq.n	800850c <cleanup_stdio+0x30>
 8008502:	4620      	mov	r0, r4
 8008504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008508:	f001 be52 	b.w	800a1b0 <_fflush_r>
 800850c:	bd10      	pop	{r4, pc}
 800850e:	bf00      	nop
 8008510:	2000090c 	.word	0x2000090c
 8008514:	20000974 	.word	0x20000974
 8008518:	200009dc 	.word	0x200009dc

0800851c <global_stdio_init.part.0>:
 800851c:	b510      	push	{r4, lr}
 800851e:	4b0b      	ldr	r3, [pc, #44]	@ (800854c <global_stdio_init.part.0+0x30>)
 8008520:	4c0b      	ldr	r4, [pc, #44]	@ (8008550 <global_stdio_init.part.0+0x34>)
 8008522:	4a0c      	ldr	r2, [pc, #48]	@ (8008554 <global_stdio_init.part.0+0x38>)
 8008524:	4620      	mov	r0, r4
 8008526:	601a      	str	r2, [r3, #0]
 8008528:	2104      	movs	r1, #4
 800852a:	2200      	movs	r2, #0
 800852c:	f7ff ff94 	bl	8008458 <std>
 8008530:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008534:	2201      	movs	r2, #1
 8008536:	2109      	movs	r1, #9
 8008538:	f7ff ff8e 	bl	8008458 <std>
 800853c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008540:	2202      	movs	r2, #2
 8008542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008546:	2112      	movs	r1, #18
 8008548:	f7ff bf86 	b.w	8008458 <std>
 800854c:	20000a44 	.word	0x20000a44
 8008550:	2000090c 	.word	0x2000090c
 8008554:	080084c5 	.word	0x080084c5

08008558 <__sfp_lock_acquire>:
 8008558:	4801      	ldr	r0, [pc, #4]	@ (8008560 <__sfp_lock_acquire+0x8>)
 800855a:	f000 b956 	b.w	800880a <__retarget_lock_acquire_recursive>
 800855e:	bf00      	nop
 8008560:	20000a4d 	.word	0x20000a4d

08008564 <__sfp_lock_release>:
 8008564:	4801      	ldr	r0, [pc, #4]	@ (800856c <__sfp_lock_release+0x8>)
 8008566:	f000 b951 	b.w	800880c <__retarget_lock_release_recursive>
 800856a:	bf00      	nop
 800856c:	20000a4d 	.word	0x20000a4d

08008570 <__sinit>:
 8008570:	b510      	push	{r4, lr}
 8008572:	4604      	mov	r4, r0
 8008574:	f7ff fff0 	bl	8008558 <__sfp_lock_acquire>
 8008578:	6a23      	ldr	r3, [r4, #32]
 800857a:	b11b      	cbz	r3, 8008584 <__sinit+0x14>
 800857c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008580:	f7ff bff0 	b.w	8008564 <__sfp_lock_release>
 8008584:	4b04      	ldr	r3, [pc, #16]	@ (8008598 <__sinit+0x28>)
 8008586:	6223      	str	r3, [r4, #32]
 8008588:	4b04      	ldr	r3, [pc, #16]	@ (800859c <__sinit+0x2c>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1f5      	bne.n	800857c <__sinit+0xc>
 8008590:	f7ff ffc4 	bl	800851c <global_stdio_init.part.0>
 8008594:	e7f2      	b.n	800857c <__sinit+0xc>
 8008596:	bf00      	nop
 8008598:	080084dd 	.word	0x080084dd
 800859c:	20000a44 	.word	0x20000a44

080085a0 <_fwalk_sglue>:
 80085a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085a4:	4607      	mov	r7, r0
 80085a6:	4688      	mov	r8, r1
 80085a8:	4614      	mov	r4, r2
 80085aa:	2600      	movs	r6, #0
 80085ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085b0:	f1b9 0901 	subs.w	r9, r9, #1
 80085b4:	d505      	bpl.n	80085c2 <_fwalk_sglue+0x22>
 80085b6:	6824      	ldr	r4, [r4, #0]
 80085b8:	2c00      	cmp	r4, #0
 80085ba:	d1f7      	bne.n	80085ac <_fwalk_sglue+0xc>
 80085bc:	4630      	mov	r0, r6
 80085be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085c2:	89ab      	ldrh	r3, [r5, #12]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d907      	bls.n	80085d8 <_fwalk_sglue+0x38>
 80085c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085cc:	3301      	adds	r3, #1
 80085ce:	d003      	beq.n	80085d8 <_fwalk_sglue+0x38>
 80085d0:	4629      	mov	r1, r5
 80085d2:	4638      	mov	r0, r7
 80085d4:	47c0      	blx	r8
 80085d6:	4306      	orrs	r6, r0
 80085d8:	3568      	adds	r5, #104	@ 0x68
 80085da:	e7e9      	b.n	80085b0 <_fwalk_sglue+0x10>

080085dc <siprintf>:
 80085dc:	b40e      	push	{r1, r2, r3}
 80085de:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80085e2:	b510      	push	{r4, lr}
 80085e4:	2400      	movs	r4, #0
 80085e6:	b09d      	sub	sp, #116	@ 0x74
 80085e8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80085ea:	9002      	str	r0, [sp, #8]
 80085ec:	9006      	str	r0, [sp, #24]
 80085ee:	9107      	str	r1, [sp, #28]
 80085f0:	9104      	str	r1, [sp, #16]
 80085f2:	4809      	ldr	r0, [pc, #36]	@ (8008618 <siprintf+0x3c>)
 80085f4:	4909      	ldr	r1, [pc, #36]	@ (800861c <siprintf+0x40>)
 80085f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80085fa:	9105      	str	r1, [sp, #20]
 80085fc:	6800      	ldr	r0, [r0, #0]
 80085fe:	a902      	add	r1, sp, #8
 8008600:	9301      	str	r3, [sp, #4]
 8008602:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008604:	f001 fc58 	bl	8009eb8 <_svfiprintf_r>
 8008608:	9b02      	ldr	r3, [sp, #8]
 800860a:	701c      	strb	r4, [r3, #0]
 800860c:	b01d      	add	sp, #116	@ 0x74
 800860e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008612:	b003      	add	sp, #12
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	20000018 	.word	0x20000018
 800861c:	ffff0208 	.word	0xffff0208

08008620 <__sread>:
 8008620:	b510      	push	{r4, lr}
 8008622:	460c      	mov	r4, r1
 8008624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008628:	f000 f8a0 	bl	800876c <_read_r>
 800862c:	2800      	cmp	r0, #0
 800862e:	bfab      	itete	ge
 8008630:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008632:	89a3      	ldrhlt	r3, [r4, #12]
 8008634:	181b      	addge	r3, r3, r0
 8008636:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800863a:	bfac      	ite	ge
 800863c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800863e:	81a3      	strhlt	r3, [r4, #12]
 8008640:	bd10      	pop	{r4, pc}

08008642 <__swrite>:
 8008642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008646:	461f      	mov	r7, r3
 8008648:	898b      	ldrh	r3, [r1, #12]
 800864a:	4605      	mov	r5, r0
 800864c:	05db      	lsls	r3, r3, #23
 800864e:	460c      	mov	r4, r1
 8008650:	4616      	mov	r6, r2
 8008652:	d505      	bpl.n	8008660 <__swrite+0x1e>
 8008654:	2302      	movs	r3, #2
 8008656:	2200      	movs	r2, #0
 8008658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800865c:	f000 f874 	bl	8008748 <_lseek_r>
 8008660:	89a3      	ldrh	r3, [r4, #12]
 8008662:	4632      	mov	r2, r6
 8008664:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008668:	81a3      	strh	r3, [r4, #12]
 800866a:	4628      	mov	r0, r5
 800866c:	463b      	mov	r3, r7
 800866e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008676:	f000 b88b 	b.w	8008790 <_write_r>

0800867a <__sseek>:
 800867a:	b510      	push	{r4, lr}
 800867c:	460c      	mov	r4, r1
 800867e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008682:	f000 f861 	bl	8008748 <_lseek_r>
 8008686:	1c43      	adds	r3, r0, #1
 8008688:	89a3      	ldrh	r3, [r4, #12]
 800868a:	bf15      	itete	ne
 800868c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800868e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008692:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008696:	81a3      	strheq	r3, [r4, #12]
 8008698:	bf18      	it	ne
 800869a:	81a3      	strhne	r3, [r4, #12]
 800869c:	bd10      	pop	{r4, pc}

0800869e <__sclose>:
 800869e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086a2:	f000 b841 	b.w	8008728 <_close_r>

080086a6 <memcmp>:
 80086a6:	b510      	push	{r4, lr}
 80086a8:	3901      	subs	r1, #1
 80086aa:	4402      	add	r2, r0
 80086ac:	4290      	cmp	r0, r2
 80086ae:	d101      	bne.n	80086b4 <memcmp+0xe>
 80086b0:	2000      	movs	r0, #0
 80086b2:	e005      	b.n	80086c0 <memcmp+0x1a>
 80086b4:	7803      	ldrb	r3, [r0, #0]
 80086b6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80086ba:	42a3      	cmp	r3, r4
 80086bc:	d001      	beq.n	80086c2 <memcmp+0x1c>
 80086be:	1b18      	subs	r0, r3, r4
 80086c0:	bd10      	pop	{r4, pc}
 80086c2:	3001      	adds	r0, #1
 80086c4:	e7f2      	b.n	80086ac <memcmp+0x6>

080086c6 <memset>:
 80086c6:	4603      	mov	r3, r0
 80086c8:	4402      	add	r2, r0
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d100      	bne.n	80086d0 <memset+0xa>
 80086ce:	4770      	bx	lr
 80086d0:	f803 1b01 	strb.w	r1, [r3], #1
 80086d4:	e7f9      	b.n	80086ca <memset+0x4>

080086d6 <strncmp>:
 80086d6:	b510      	push	{r4, lr}
 80086d8:	b16a      	cbz	r2, 80086f6 <strncmp+0x20>
 80086da:	3901      	subs	r1, #1
 80086dc:	1884      	adds	r4, r0, r2
 80086de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086e2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d103      	bne.n	80086f2 <strncmp+0x1c>
 80086ea:	42a0      	cmp	r0, r4
 80086ec:	d001      	beq.n	80086f2 <strncmp+0x1c>
 80086ee:	2a00      	cmp	r2, #0
 80086f0:	d1f5      	bne.n	80086de <strncmp+0x8>
 80086f2:	1ad0      	subs	r0, r2, r3
 80086f4:	bd10      	pop	{r4, pc}
 80086f6:	4610      	mov	r0, r2
 80086f8:	e7fc      	b.n	80086f4 <strncmp+0x1e>

080086fa <strncpy>:
 80086fa:	4603      	mov	r3, r0
 80086fc:	b510      	push	{r4, lr}
 80086fe:	3901      	subs	r1, #1
 8008700:	b132      	cbz	r2, 8008710 <strncpy+0x16>
 8008702:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008706:	3a01      	subs	r2, #1
 8008708:	f803 4b01 	strb.w	r4, [r3], #1
 800870c:	2c00      	cmp	r4, #0
 800870e:	d1f7      	bne.n	8008700 <strncpy+0x6>
 8008710:	2100      	movs	r1, #0
 8008712:	441a      	add	r2, r3
 8008714:	4293      	cmp	r3, r2
 8008716:	d100      	bne.n	800871a <strncpy+0x20>
 8008718:	bd10      	pop	{r4, pc}
 800871a:	f803 1b01 	strb.w	r1, [r3], #1
 800871e:	e7f9      	b.n	8008714 <strncpy+0x1a>

08008720 <_localeconv_r>:
 8008720:	4800      	ldr	r0, [pc, #0]	@ (8008724 <_localeconv_r+0x4>)
 8008722:	4770      	bx	lr
 8008724:	20000158 	.word	0x20000158

08008728 <_close_r>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	2300      	movs	r3, #0
 800872c:	4d05      	ldr	r5, [pc, #20]	@ (8008744 <_close_r+0x1c>)
 800872e:	4604      	mov	r4, r0
 8008730:	4608      	mov	r0, r1
 8008732:	602b      	str	r3, [r5, #0]
 8008734:	f7fa f901 	bl	800293a <_close>
 8008738:	1c43      	adds	r3, r0, #1
 800873a:	d102      	bne.n	8008742 <_close_r+0x1a>
 800873c:	682b      	ldr	r3, [r5, #0]
 800873e:	b103      	cbz	r3, 8008742 <_close_r+0x1a>
 8008740:	6023      	str	r3, [r4, #0]
 8008742:	bd38      	pop	{r3, r4, r5, pc}
 8008744:	20000a48 	.word	0x20000a48

08008748 <_lseek_r>:
 8008748:	b538      	push	{r3, r4, r5, lr}
 800874a:	4604      	mov	r4, r0
 800874c:	4608      	mov	r0, r1
 800874e:	4611      	mov	r1, r2
 8008750:	2200      	movs	r2, #0
 8008752:	4d05      	ldr	r5, [pc, #20]	@ (8008768 <_lseek_r+0x20>)
 8008754:	602a      	str	r2, [r5, #0]
 8008756:	461a      	mov	r2, r3
 8008758:	f7fa f913 	bl	8002982 <_lseek>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	d102      	bne.n	8008766 <_lseek_r+0x1e>
 8008760:	682b      	ldr	r3, [r5, #0]
 8008762:	b103      	cbz	r3, 8008766 <_lseek_r+0x1e>
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	bd38      	pop	{r3, r4, r5, pc}
 8008768:	20000a48 	.word	0x20000a48

0800876c <_read_r>:
 800876c:	b538      	push	{r3, r4, r5, lr}
 800876e:	4604      	mov	r4, r0
 8008770:	4608      	mov	r0, r1
 8008772:	4611      	mov	r1, r2
 8008774:	2200      	movs	r2, #0
 8008776:	4d05      	ldr	r5, [pc, #20]	@ (800878c <_read_r+0x20>)
 8008778:	602a      	str	r2, [r5, #0]
 800877a:	461a      	mov	r2, r3
 800877c:	f7fa f8a4 	bl	80028c8 <_read>
 8008780:	1c43      	adds	r3, r0, #1
 8008782:	d102      	bne.n	800878a <_read_r+0x1e>
 8008784:	682b      	ldr	r3, [r5, #0]
 8008786:	b103      	cbz	r3, 800878a <_read_r+0x1e>
 8008788:	6023      	str	r3, [r4, #0]
 800878a:	bd38      	pop	{r3, r4, r5, pc}
 800878c:	20000a48 	.word	0x20000a48

08008790 <_write_r>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	4604      	mov	r4, r0
 8008794:	4608      	mov	r0, r1
 8008796:	4611      	mov	r1, r2
 8008798:	2200      	movs	r2, #0
 800879a:	4d05      	ldr	r5, [pc, #20]	@ (80087b0 <_write_r+0x20>)
 800879c:	602a      	str	r2, [r5, #0]
 800879e:	461a      	mov	r2, r3
 80087a0:	f7fa f8af 	bl	8002902 <_write>
 80087a4:	1c43      	adds	r3, r0, #1
 80087a6:	d102      	bne.n	80087ae <_write_r+0x1e>
 80087a8:	682b      	ldr	r3, [r5, #0]
 80087aa:	b103      	cbz	r3, 80087ae <_write_r+0x1e>
 80087ac:	6023      	str	r3, [r4, #0]
 80087ae:	bd38      	pop	{r3, r4, r5, pc}
 80087b0:	20000a48 	.word	0x20000a48

080087b4 <__errno>:
 80087b4:	4b01      	ldr	r3, [pc, #4]	@ (80087bc <__errno+0x8>)
 80087b6:	6818      	ldr	r0, [r3, #0]
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	20000018 	.word	0x20000018

080087c0 <__libc_init_array>:
 80087c0:	b570      	push	{r4, r5, r6, lr}
 80087c2:	2600      	movs	r6, #0
 80087c4:	4d0c      	ldr	r5, [pc, #48]	@ (80087f8 <__libc_init_array+0x38>)
 80087c6:	4c0d      	ldr	r4, [pc, #52]	@ (80087fc <__libc_init_array+0x3c>)
 80087c8:	1b64      	subs	r4, r4, r5
 80087ca:	10a4      	asrs	r4, r4, #2
 80087cc:	42a6      	cmp	r6, r4
 80087ce:	d109      	bne.n	80087e4 <__libc_init_array+0x24>
 80087d0:	f002 f87c 	bl	800a8cc <_init>
 80087d4:	2600      	movs	r6, #0
 80087d6:	4d0a      	ldr	r5, [pc, #40]	@ (8008800 <__libc_init_array+0x40>)
 80087d8:	4c0a      	ldr	r4, [pc, #40]	@ (8008804 <__libc_init_array+0x44>)
 80087da:	1b64      	subs	r4, r4, r5
 80087dc:	10a4      	asrs	r4, r4, #2
 80087de:	42a6      	cmp	r6, r4
 80087e0:	d105      	bne.n	80087ee <__libc_init_array+0x2e>
 80087e2:	bd70      	pop	{r4, r5, r6, pc}
 80087e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80087e8:	4798      	blx	r3
 80087ea:	3601      	adds	r6, #1
 80087ec:	e7ee      	b.n	80087cc <__libc_init_array+0xc>
 80087ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80087f2:	4798      	blx	r3
 80087f4:	3601      	adds	r6, #1
 80087f6:	e7f2      	b.n	80087de <__libc_init_array+0x1e>
 80087f8:	0800b4ac 	.word	0x0800b4ac
 80087fc:	0800b4ac 	.word	0x0800b4ac
 8008800:	0800b4ac 	.word	0x0800b4ac
 8008804:	0800b4b0 	.word	0x0800b4b0

08008808 <__retarget_lock_init_recursive>:
 8008808:	4770      	bx	lr

0800880a <__retarget_lock_acquire_recursive>:
 800880a:	4770      	bx	lr

0800880c <__retarget_lock_release_recursive>:
 800880c:	4770      	bx	lr

0800880e <strcpy>:
 800880e:	4603      	mov	r3, r0
 8008810:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008814:	f803 2b01 	strb.w	r2, [r3], #1
 8008818:	2a00      	cmp	r2, #0
 800881a:	d1f9      	bne.n	8008810 <strcpy+0x2>
 800881c:	4770      	bx	lr

0800881e <memchr>:
 800881e:	4603      	mov	r3, r0
 8008820:	b510      	push	{r4, lr}
 8008822:	b2c9      	uxtb	r1, r1
 8008824:	4402      	add	r2, r0
 8008826:	4293      	cmp	r3, r2
 8008828:	4618      	mov	r0, r3
 800882a:	d101      	bne.n	8008830 <memchr+0x12>
 800882c:	2000      	movs	r0, #0
 800882e:	e003      	b.n	8008838 <memchr+0x1a>
 8008830:	7804      	ldrb	r4, [r0, #0]
 8008832:	3301      	adds	r3, #1
 8008834:	428c      	cmp	r4, r1
 8008836:	d1f6      	bne.n	8008826 <memchr+0x8>
 8008838:	bd10      	pop	{r4, pc}

0800883a <memcpy>:
 800883a:	440a      	add	r2, r1
 800883c:	4291      	cmp	r1, r2
 800883e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008842:	d100      	bne.n	8008846 <memcpy+0xc>
 8008844:	4770      	bx	lr
 8008846:	b510      	push	{r4, lr}
 8008848:	f811 4b01 	ldrb.w	r4, [r1], #1
 800884c:	4291      	cmp	r1, r2
 800884e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008852:	d1f9      	bne.n	8008848 <memcpy+0xe>
 8008854:	bd10      	pop	{r4, pc}

08008856 <quorem>:
 8008856:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800885a:	6903      	ldr	r3, [r0, #16]
 800885c:	690c      	ldr	r4, [r1, #16]
 800885e:	4607      	mov	r7, r0
 8008860:	42a3      	cmp	r3, r4
 8008862:	db7e      	blt.n	8008962 <quorem+0x10c>
 8008864:	3c01      	subs	r4, #1
 8008866:	00a3      	lsls	r3, r4, #2
 8008868:	f100 0514 	add.w	r5, r0, #20
 800886c:	f101 0814 	add.w	r8, r1, #20
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008876:	9301      	str	r3, [sp, #4]
 8008878:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800887c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008880:	3301      	adds	r3, #1
 8008882:	429a      	cmp	r2, r3
 8008884:	fbb2 f6f3 	udiv	r6, r2, r3
 8008888:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800888c:	d32e      	bcc.n	80088ec <quorem+0x96>
 800888e:	f04f 0a00 	mov.w	sl, #0
 8008892:	46c4      	mov	ip, r8
 8008894:	46ae      	mov	lr, r5
 8008896:	46d3      	mov	fp, sl
 8008898:	f85c 3b04 	ldr.w	r3, [ip], #4
 800889c:	b298      	uxth	r0, r3
 800889e:	fb06 a000 	mla	r0, r6, r0, sl
 80088a2:	0c1b      	lsrs	r3, r3, #16
 80088a4:	0c02      	lsrs	r2, r0, #16
 80088a6:	fb06 2303 	mla	r3, r6, r3, r2
 80088aa:	f8de 2000 	ldr.w	r2, [lr]
 80088ae:	b280      	uxth	r0, r0
 80088b0:	b292      	uxth	r2, r2
 80088b2:	1a12      	subs	r2, r2, r0
 80088b4:	445a      	add	r2, fp
 80088b6:	f8de 0000 	ldr.w	r0, [lr]
 80088ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088be:	b29b      	uxth	r3, r3
 80088c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80088c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80088c8:	b292      	uxth	r2, r2
 80088ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80088ce:	45e1      	cmp	r9, ip
 80088d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80088d4:	f84e 2b04 	str.w	r2, [lr], #4
 80088d8:	d2de      	bcs.n	8008898 <quorem+0x42>
 80088da:	9b00      	ldr	r3, [sp, #0]
 80088dc:	58eb      	ldr	r3, [r5, r3]
 80088de:	b92b      	cbnz	r3, 80088ec <quorem+0x96>
 80088e0:	9b01      	ldr	r3, [sp, #4]
 80088e2:	3b04      	subs	r3, #4
 80088e4:	429d      	cmp	r5, r3
 80088e6:	461a      	mov	r2, r3
 80088e8:	d32f      	bcc.n	800894a <quorem+0xf4>
 80088ea:	613c      	str	r4, [r7, #16]
 80088ec:	4638      	mov	r0, r7
 80088ee:	f001 f97f 	bl	8009bf0 <__mcmp>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	db25      	blt.n	8008942 <quorem+0xec>
 80088f6:	4629      	mov	r1, r5
 80088f8:	2000      	movs	r0, #0
 80088fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80088fe:	f8d1 c000 	ldr.w	ip, [r1]
 8008902:	fa1f fe82 	uxth.w	lr, r2
 8008906:	fa1f f38c 	uxth.w	r3, ip
 800890a:	eba3 030e 	sub.w	r3, r3, lr
 800890e:	4403      	add	r3, r0
 8008910:	0c12      	lsrs	r2, r2, #16
 8008912:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008916:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800891a:	b29b      	uxth	r3, r3
 800891c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008920:	45c1      	cmp	r9, r8
 8008922:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008926:	f841 3b04 	str.w	r3, [r1], #4
 800892a:	d2e6      	bcs.n	80088fa <quorem+0xa4>
 800892c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008930:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008934:	b922      	cbnz	r2, 8008940 <quorem+0xea>
 8008936:	3b04      	subs	r3, #4
 8008938:	429d      	cmp	r5, r3
 800893a:	461a      	mov	r2, r3
 800893c:	d30b      	bcc.n	8008956 <quorem+0x100>
 800893e:	613c      	str	r4, [r7, #16]
 8008940:	3601      	adds	r6, #1
 8008942:	4630      	mov	r0, r6
 8008944:	b003      	add	sp, #12
 8008946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800894a:	6812      	ldr	r2, [r2, #0]
 800894c:	3b04      	subs	r3, #4
 800894e:	2a00      	cmp	r2, #0
 8008950:	d1cb      	bne.n	80088ea <quorem+0x94>
 8008952:	3c01      	subs	r4, #1
 8008954:	e7c6      	b.n	80088e4 <quorem+0x8e>
 8008956:	6812      	ldr	r2, [r2, #0]
 8008958:	3b04      	subs	r3, #4
 800895a:	2a00      	cmp	r2, #0
 800895c:	d1ef      	bne.n	800893e <quorem+0xe8>
 800895e:	3c01      	subs	r4, #1
 8008960:	e7ea      	b.n	8008938 <quorem+0xe2>
 8008962:	2000      	movs	r0, #0
 8008964:	e7ee      	b.n	8008944 <quorem+0xee>
	...

08008968 <_dtoa_r>:
 8008968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800896c:	4614      	mov	r4, r2
 800896e:	461d      	mov	r5, r3
 8008970:	69c7      	ldr	r7, [r0, #28]
 8008972:	b097      	sub	sp, #92	@ 0x5c
 8008974:	4681      	mov	r9, r0
 8008976:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800897a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800897c:	b97f      	cbnz	r7, 800899e <_dtoa_r+0x36>
 800897e:	2010      	movs	r0, #16
 8008980:	f000 fe0e 	bl	80095a0 <malloc>
 8008984:	4602      	mov	r2, r0
 8008986:	f8c9 001c 	str.w	r0, [r9, #28]
 800898a:	b920      	cbnz	r0, 8008996 <_dtoa_r+0x2e>
 800898c:	21ef      	movs	r1, #239	@ 0xef
 800898e:	4bac      	ldr	r3, [pc, #688]	@ (8008c40 <_dtoa_r+0x2d8>)
 8008990:	48ac      	ldr	r0, [pc, #688]	@ (8008c44 <_dtoa_r+0x2dc>)
 8008992:	f001 fc5f 	bl	800a254 <__assert_func>
 8008996:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800899a:	6007      	str	r7, [r0, #0]
 800899c:	60c7      	str	r7, [r0, #12]
 800899e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80089a2:	6819      	ldr	r1, [r3, #0]
 80089a4:	b159      	cbz	r1, 80089be <_dtoa_r+0x56>
 80089a6:	685a      	ldr	r2, [r3, #4]
 80089a8:	2301      	movs	r3, #1
 80089aa:	4093      	lsls	r3, r2
 80089ac:	604a      	str	r2, [r1, #4]
 80089ae:	608b      	str	r3, [r1, #8]
 80089b0:	4648      	mov	r0, r9
 80089b2:	f000 feeb 	bl	800978c <_Bfree>
 80089b6:	2200      	movs	r2, #0
 80089b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80089bc:	601a      	str	r2, [r3, #0]
 80089be:	1e2b      	subs	r3, r5, #0
 80089c0:	bfaf      	iteee	ge
 80089c2:	2300      	movge	r3, #0
 80089c4:	2201      	movlt	r2, #1
 80089c6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80089ca:	9307      	strlt	r3, [sp, #28]
 80089cc:	bfa8      	it	ge
 80089ce:	6033      	strge	r3, [r6, #0]
 80089d0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80089d4:	4b9c      	ldr	r3, [pc, #624]	@ (8008c48 <_dtoa_r+0x2e0>)
 80089d6:	bfb8      	it	lt
 80089d8:	6032      	strlt	r2, [r6, #0]
 80089da:	ea33 0308 	bics.w	r3, r3, r8
 80089de:	d112      	bne.n	8008a06 <_dtoa_r+0x9e>
 80089e0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80089e4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80089e6:	6013      	str	r3, [r2, #0]
 80089e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80089ec:	4323      	orrs	r3, r4
 80089ee:	f000 855e 	beq.w	80094ae <_dtoa_r+0xb46>
 80089f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80089f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008c4c <_dtoa_r+0x2e4>
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 8560 	beq.w	80094be <_dtoa_r+0xb56>
 80089fe:	f10a 0303 	add.w	r3, sl, #3
 8008a02:	f000 bd5a 	b.w	80094ba <_dtoa_r+0xb52>
 8008a06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a0a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008a0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a12:	2200      	movs	r2, #0
 8008a14:	2300      	movs	r3, #0
 8008a16:	f7f7 ffc7 	bl	80009a8 <__aeabi_dcmpeq>
 8008a1a:	4607      	mov	r7, r0
 8008a1c:	b158      	cbz	r0, 8008a36 <_dtoa_r+0xce>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008a22:	6013      	str	r3, [r2, #0]
 8008a24:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008a26:	b113      	cbz	r3, 8008a2e <_dtoa_r+0xc6>
 8008a28:	4b89      	ldr	r3, [pc, #548]	@ (8008c50 <_dtoa_r+0x2e8>)
 8008a2a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008a2c:	6013      	str	r3, [r2, #0]
 8008a2e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8008c54 <_dtoa_r+0x2ec>
 8008a32:	f000 bd44 	b.w	80094be <_dtoa_r+0xb56>
 8008a36:	ab14      	add	r3, sp, #80	@ 0x50
 8008a38:	9301      	str	r3, [sp, #4]
 8008a3a:	ab15      	add	r3, sp, #84	@ 0x54
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	4648      	mov	r0, r9
 8008a40:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008a44:	f001 f984 	bl	8009d50 <__d2b>
 8008a48:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008a4c:	9003      	str	r0, [sp, #12]
 8008a4e:	2e00      	cmp	r6, #0
 8008a50:	d078      	beq.n	8008b44 <_dtoa_r+0x1dc>
 8008a52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a58:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a60:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008a64:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008a68:	9712      	str	r7, [sp, #72]	@ 0x48
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	4b7a      	ldr	r3, [pc, #488]	@ (8008c58 <_dtoa_r+0x2f0>)
 8008a70:	f7f7 fb7a 	bl	8000168 <__aeabi_dsub>
 8008a74:	a36c      	add	r3, pc, #432	@ (adr r3, 8008c28 <_dtoa_r+0x2c0>)
 8008a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7a:	f7f7 fd2d 	bl	80004d8 <__aeabi_dmul>
 8008a7e:	a36c      	add	r3, pc, #432	@ (adr r3, 8008c30 <_dtoa_r+0x2c8>)
 8008a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a84:	f7f7 fb72 	bl	800016c <__adddf3>
 8008a88:	4604      	mov	r4, r0
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	460d      	mov	r5, r1
 8008a8e:	f7f7 fcb9 	bl	8000404 <__aeabi_i2d>
 8008a92:	a369      	add	r3, pc, #420	@ (adr r3, 8008c38 <_dtoa_r+0x2d0>)
 8008a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a98:	f7f7 fd1e 	bl	80004d8 <__aeabi_dmul>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	f7f7 fb62 	bl	800016c <__adddf3>
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	460d      	mov	r5, r1
 8008aac:	f7f7 ffc4 	bl	8000a38 <__aeabi_d2iz>
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	4607      	mov	r7, r0
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	4629      	mov	r1, r5
 8008aba:	f7f7 ff7f 	bl	80009bc <__aeabi_dcmplt>
 8008abe:	b140      	cbz	r0, 8008ad2 <_dtoa_r+0x16a>
 8008ac0:	4638      	mov	r0, r7
 8008ac2:	f7f7 fc9f 	bl	8000404 <__aeabi_i2d>
 8008ac6:	4622      	mov	r2, r4
 8008ac8:	462b      	mov	r3, r5
 8008aca:	f7f7 ff6d 	bl	80009a8 <__aeabi_dcmpeq>
 8008ace:	b900      	cbnz	r0, 8008ad2 <_dtoa_r+0x16a>
 8008ad0:	3f01      	subs	r7, #1
 8008ad2:	2f16      	cmp	r7, #22
 8008ad4:	d854      	bhi.n	8008b80 <_dtoa_r+0x218>
 8008ad6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ada:	4b60      	ldr	r3, [pc, #384]	@ (8008c5c <_dtoa_r+0x2f4>)
 8008adc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae4:	f7f7 ff6a 	bl	80009bc <__aeabi_dcmplt>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	d04b      	beq.n	8008b84 <_dtoa_r+0x21c>
 8008aec:	2300      	movs	r3, #0
 8008aee:	3f01      	subs	r7, #1
 8008af0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008af2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008af4:	1b9b      	subs	r3, r3, r6
 8008af6:	1e5a      	subs	r2, r3, #1
 8008af8:	bf49      	itett	mi
 8008afa:	f1c3 0301 	rsbmi	r3, r3, #1
 8008afe:	2300      	movpl	r3, #0
 8008b00:	9304      	strmi	r3, [sp, #16]
 8008b02:	2300      	movmi	r3, #0
 8008b04:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b06:	bf54      	ite	pl
 8008b08:	9304      	strpl	r3, [sp, #16]
 8008b0a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8008b0c:	2f00      	cmp	r7, #0
 8008b0e:	db3b      	blt.n	8008b88 <_dtoa_r+0x220>
 8008b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b12:	970e      	str	r7, [sp, #56]	@ 0x38
 8008b14:	443b      	add	r3, r7
 8008b16:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b18:	2300      	movs	r3, #0
 8008b1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b1c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b1e:	2b09      	cmp	r3, #9
 8008b20:	d865      	bhi.n	8008bee <_dtoa_r+0x286>
 8008b22:	2b05      	cmp	r3, #5
 8008b24:	bfc4      	itt	gt
 8008b26:	3b04      	subgt	r3, #4
 8008b28:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008b2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b2c:	bfc8      	it	gt
 8008b2e:	2400      	movgt	r4, #0
 8008b30:	f1a3 0302 	sub.w	r3, r3, #2
 8008b34:	bfd8      	it	le
 8008b36:	2401      	movle	r4, #1
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	d864      	bhi.n	8008c06 <_dtoa_r+0x29e>
 8008b3c:	e8df f003 	tbb	[pc, r3]
 8008b40:	2c385553 	.word	0x2c385553
 8008b44:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008b48:	441e      	add	r6, r3
 8008b4a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008b4e:	2b20      	cmp	r3, #32
 8008b50:	bfc1      	itttt	gt
 8008b52:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008b56:	fa08 f803 	lslgt.w	r8, r8, r3
 8008b5a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008b5e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008b62:	bfd6      	itet	le
 8008b64:	f1c3 0320 	rsble	r3, r3, #32
 8008b68:	ea48 0003 	orrgt.w	r0, r8, r3
 8008b6c:	fa04 f003 	lslle.w	r0, r4, r3
 8008b70:	f7f7 fc38 	bl	80003e4 <__aeabi_ui2d>
 8008b74:	2201      	movs	r2, #1
 8008b76:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008b7a:	3e01      	subs	r6, #1
 8008b7c:	9212      	str	r2, [sp, #72]	@ 0x48
 8008b7e:	e774      	b.n	8008a6a <_dtoa_r+0x102>
 8008b80:	2301      	movs	r3, #1
 8008b82:	e7b5      	b.n	8008af0 <_dtoa_r+0x188>
 8008b84:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008b86:	e7b4      	b.n	8008af2 <_dtoa_r+0x18a>
 8008b88:	9b04      	ldr	r3, [sp, #16]
 8008b8a:	1bdb      	subs	r3, r3, r7
 8008b8c:	9304      	str	r3, [sp, #16]
 8008b8e:	427b      	negs	r3, r7
 8008b90:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b92:	2300      	movs	r3, #0
 8008b94:	930e      	str	r3, [sp, #56]	@ 0x38
 8008b96:	e7c1      	b.n	8008b1c <_dtoa_r+0x1b4>
 8008b98:	2301      	movs	r3, #1
 8008b9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b9e:	eb07 0b03 	add.w	fp, r7, r3
 8008ba2:	f10b 0301 	add.w	r3, fp, #1
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	9308      	str	r3, [sp, #32]
 8008baa:	bfb8      	it	lt
 8008bac:	2301      	movlt	r3, #1
 8008bae:	e006      	b.n	8008bbe <_dtoa_r+0x256>
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	dd28      	ble.n	8008c0c <_dtoa_r+0x2a4>
 8008bba:	469b      	mov	fp, r3
 8008bbc:	9308      	str	r3, [sp, #32]
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	2204      	movs	r2, #4
 8008bc2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008bc6:	f102 0514 	add.w	r5, r2, #20
 8008bca:	429d      	cmp	r5, r3
 8008bcc:	d926      	bls.n	8008c1c <_dtoa_r+0x2b4>
 8008bce:	6041      	str	r1, [r0, #4]
 8008bd0:	4648      	mov	r0, r9
 8008bd2:	f000 fd9b 	bl	800970c <_Balloc>
 8008bd6:	4682      	mov	sl, r0
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	d143      	bne.n	8008c64 <_dtoa_r+0x2fc>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	f240 11af 	movw	r1, #431	@ 0x1af
 8008be2:	4b1f      	ldr	r3, [pc, #124]	@ (8008c60 <_dtoa_r+0x2f8>)
 8008be4:	e6d4      	b.n	8008990 <_dtoa_r+0x28>
 8008be6:	2300      	movs	r3, #0
 8008be8:	e7e3      	b.n	8008bb2 <_dtoa_r+0x24a>
 8008bea:	2300      	movs	r3, #0
 8008bec:	e7d5      	b.n	8008b9a <_dtoa_r+0x232>
 8008bee:	2401      	movs	r4, #1
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008bf4:	9320      	str	r3, [sp, #128]	@ 0x80
 8008bf6:	f04f 3bff 	mov.w	fp, #4294967295
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	2312      	movs	r3, #18
 8008bfe:	f8cd b020 	str.w	fp, [sp, #32]
 8008c02:	9221      	str	r2, [sp, #132]	@ 0x84
 8008c04:	e7db      	b.n	8008bbe <_dtoa_r+0x256>
 8008c06:	2301      	movs	r3, #1
 8008c08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c0a:	e7f4      	b.n	8008bf6 <_dtoa_r+0x28e>
 8008c0c:	f04f 0b01 	mov.w	fp, #1
 8008c10:	465b      	mov	r3, fp
 8008c12:	f8cd b020 	str.w	fp, [sp, #32]
 8008c16:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8008c1a:	e7d0      	b.n	8008bbe <_dtoa_r+0x256>
 8008c1c:	3101      	adds	r1, #1
 8008c1e:	0052      	lsls	r2, r2, #1
 8008c20:	e7d1      	b.n	8008bc6 <_dtoa_r+0x25e>
 8008c22:	bf00      	nop
 8008c24:	f3af 8000 	nop.w
 8008c28:	636f4361 	.word	0x636f4361
 8008c2c:	3fd287a7 	.word	0x3fd287a7
 8008c30:	8b60c8b3 	.word	0x8b60c8b3
 8008c34:	3fc68a28 	.word	0x3fc68a28
 8008c38:	509f79fb 	.word	0x509f79fb
 8008c3c:	3fd34413 	.word	0x3fd34413
 8008c40:	0800b133 	.word	0x0800b133
 8008c44:	0800b14a 	.word	0x0800b14a
 8008c48:	7ff00000 	.word	0x7ff00000
 8008c4c:	0800b12f 	.word	0x0800b12f
 8008c50:	0800b103 	.word	0x0800b103
 8008c54:	0800b102 	.word	0x0800b102
 8008c58:	3ff80000 	.word	0x3ff80000
 8008c5c:	0800b2d8 	.word	0x0800b2d8
 8008c60:	0800b1a2 	.word	0x0800b1a2
 8008c64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008c68:	6018      	str	r0, [r3, #0]
 8008c6a:	9b08      	ldr	r3, [sp, #32]
 8008c6c:	2b0e      	cmp	r3, #14
 8008c6e:	f200 80a1 	bhi.w	8008db4 <_dtoa_r+0x44c>
 8008c72:	2c00      	cmp	r4, #0
 8008c74:	f000 809e 	beq.w	8008db4 <_dtoa_r+0x44c>
 8008c78:	2f00      	cmp	r7, #0
 8008c7a:	dd33      	ble.n	8008ce4 <_dtoa_r+0x37c>
 8008c7c:	4b9c      	ldr	r3, [pc, #624]	@ (8008ef0 <_dtoa_r+0x588>)
 8008c7e:	f007 020f 	and.w	r2, r7, #15
 8008c82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c86:	05f8      	lsls	r0, r7, #23
 8008c88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c8c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8008c90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008c94:	d516      	bpl.n	8008cc4 <_dtoa_r+0x35c>
 8008c96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c9a:	4b96      	ldr	r3, [pc, #600]	@ (8008ef4 <_dtoa_r+0x58c>)
 8008c9c:	2603      	movs	r6, #3
 8008c9e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ca2:	f7f7 fd43 	bl	800072c <__aeabi_ddiv>
 8008ca6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008caa:	f004 040f 	and.w	r4, r4, #15
 8008cae:	4d91      	ldr	r5, [pc, #580]	@ (8008ef4 <_dtoa_r+0x58c>)
 8008cb0:	b954      	cbnz	r4, 8008cc8 <_dtoa_r+0x360>
 8008cb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008cb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cba:	f7f7 fd37 	bl	800072c <__aeabi_ddiv>
 8008cbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008cc2:	e028      	b.n	8008d16 <_dtoa_r+0x3ae>
 8008cc4:	2602      	movs	r6, #2
 8008cc6:	e7f2      	b.n	8008cae <_dtoa_r+0x346>
 8008cc8:	07e1      	lsls	r1, r4, #31
 8008cca:	d508      	bpl.n	8008cde <_dtoa_r+0x376>
 8008ccc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008cd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008cd4:	f7f7 fc00 	bl	80004d8 <__aeabi_dmul>
 8008cd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008cdc:	3601      	adds	r6, #1
 8008cde:	1064      	asrs	r4, r4, #1
 8008ce0:	3508      	adds	r5, #8
 8008ce2:	e7e5      	b.n	8008cb0 <_dtoa_r+0x348>
 8008ce4:	f000 80af 	beq.w	8008e46 <_dtoa_r+0x4de>
 8008ce8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cec:	427c      	negs	r4, r7
 8008cee:	4b80      	ldr	r3, [pc, #512]	@ (8008ef0 <_dtoa_r+0x588>)
 8008cf0:	f004 020f 	and.w	r2, r4, #15
 8008cf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfc:	f7f7 fbec 	bl	80004d8 <__aeabi_dmul>
 8008d00:	2602      	movs	r6, #2
 8008d02:	2300      	movs	r3, #0
 8008d04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008d08:	4d7a      	ldr	r5, [pc, #488]	@ (8008ef4 <_dtoa_r+0x58c>)
 8008d0a:	1124      	asrs	r4, r4, #4
 8008d0c:	2c00      	cmp	r4, #0
 8008d0e:	f040 808f 	bne.w	8008e30 <_dtoa_r+0x4c8>
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1d3      	bne.n	8008cbe <_dtoa_r+0x356>
 8008d16:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008d1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f000 8094 	beq.w	8008e4a <_dtoa_r+0x4e2>
 8008d22:	2200      	movs	r2, #0
 8008d24:	4620      	mov	r0, r4
 8008d26:	4629      	mov	r1, r5
 8008d28:	4b73      	ldr	r3, [pc, #460]	@ (8008ef8 <_dtoa_r+0x590>)
 8008d2a:	f7f7 fe47 	bl	80009bc <__aeabi_dcmplt>
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	f000 808b 	beq.w	8008e4a <_dtoa_r+0x4e2>
 8008d34:	9b08      	ldr	r3, [sp, #32]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f000 8087 	beq.w	8008e4a <_dtoa_r+0x4e2>
 8008d3c:	f1bb 0f00 	cmp.w	fp, #0
 8008d40:	dd34      	ble.n	8008dac <_dtoa_r+0x444>
 8008d42:	4620      	mov	r0, r4
 8008d44:	2200      	movs	r2, #0
 8008d46:	4629      	mov	r1, r5
 8008d48:	4b6c      	ldr	r3, [pc, #432]	@ (8008efc <_dtoa_r+0x594>)
 8008d4a:	f7f7 fbc5 	bl	80004d8 <__aeabi_dmul>
 8008d4e:	465c      	mov	r4, fp
 8008d50:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008d54:	f107 38ff 	add.w	r8, r7, #4294967295
 8008d58:	3601      	adds	r6, #1
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	f7f7 fb52 	bl	8000404 <__aeabi_i2d>
 8008d60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d64:	f7f7 fbb8 	bl	80004d8 <__aeabi_dmul>
 8008d68:	2200      	movs	r2, #0
 8008d6a:	4b65      	ldr	r3, [pc, #404]	@ (8008f00 <_dtoa_r+0x598>)
 8008d6c:	f7f7 f9fe 	bl	800016c <__adddf3>
 8008d70:	4605      	mov	r5, r0
 8008d72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008d76:	2c00      	cmp	r4, #0
 8008d78:	d16a      	bne.n	8008e50 <_dtoa_r+0x4e8>
 8008d7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	4b60      	ldr	r3, [pc, #384]	@ (8008f04 <_dtoa_r+0x59c>)
 8008d82:	f7f7 f9f1 	bl	8000168 <__aeabi_dsub>
 8008d86:	4602      	mov	r2, r0
 8008d88:	460b      	mov	r3, r1
 8008d8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008d8e:	462a      	mov	r2, r5
 8008d90:	4633      	mov	r3, r6
 8008d92:	f7f7 fe31 	bl	80009f8 <__aeabi_dcmpgt>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	f040 8298 	bne.w	80092cc <_dtoa_r+0x964>
 8008d9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008da0:	462a      	mov	r2, r5
 8008da2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008da6:	f7f7 fe09 	bl	80009bc <__aeabi_dcmplt>
 8008daa:	bb38      	cbnz	r0, 8008dfc <_dtoa_r+0x494>
 8008dac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008db0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008db4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f2c0 8157 	blt.w	800906a <_dtoa_r+0x702>
 8008dbc:	2f0e      	cmp	r7, #14
 8008dbe:	f300 8154 	bgt.w	800906a <_dtoa_r+0x702>
 8008dc2:	4b4b      	ldr	r3, [pc, #300]	@ (8008ef0 <_dtoa_r+0x588>)
 8008dc4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008dc8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008dcc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008dd0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f280 80e5 	bge.w	8008fa2 <_dtoa_r+0x63a>
 8008dd8:	9b08      	ldr	r3, [sp, #32]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f300 80e1 	bgt.w	8008fa2 <_dtoa_r+0x63a>
 8008de0:	d10c      	bne.n	8008dfc <_dtoa_r+0x494>
 8008de2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008de6:	2200      	movs	r2, #0
 8008de8:	4b46      	ldr	r3, [pc, #280]	@ (8008f04 <_dtoa_r+0x59c>)
 8008dea:	f7f7 fb75 	bl	80004d8 <__aeabi_dmul>
 8008dee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008df2:	f7f7 fdf7 	bl	80009e4 <__aeabi_dcmpge>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	f000 8266 	beq.w	80092c8 <_dtoa_r+0x960>
 8008dfc:	2400      	movs	r4, #0
 8008dfe:	4625      	mov	r5, r4
 8008e00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008e02:	4656      	mov	r6, sl
 8008e04:	ea6f 0803 	mvn.w	r8, r3
 8008e08:	2700      	movs	r7, #0
 8008e0a:	4621      	mov	r1, r4
 8008e0c:	4648      	mov	r0, r9
 8008e0e:	f000 fcbd 	bl	800978c <_Bfree>
 8008e12:	2d00      	cmp	r5, #0
 8008e14:	f000 80bd 	beq.w	8008f92 <_dtoa_r+0x62a>
 8008e18:	b12f      	cbz	r7, 8008e26 <_dtoa_r+0x4be>
 8008e1a:	42af      	cmp	r7, r5
 8008e1c:	d003      	beq.n	8008e26 <_dtoa_r+0x4be>
 8008e1e:	4639      	mov	r1, r7
 8008e20:	4648      	mov	r0, r9
 8008e22:	f000 fcb3 	bl	800978c <_Bfree>
 8008e26:	4629      	mov	r1, r5
 8008e28:	4648      	mov	r0, r9
 8008e2a:	f000 fcaf 	bl	800978c <_Bfree>
 8008e2e:	e0b0      	b.n	8008f92 <_dtoa_r+0x62a>
 8008e30:	07e2      	lsls	r2, r4, #31
 8008e32:	d505      	bpl.n	8008e40 <_dtoa_r+0x4d8>
 8008e34:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e38:	f7f7 fb4e 	bl	80004d8 <__aeabi_dmul>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	3601      	adds	r6, #1
 8008e40:	1064      	asrs	r4, r4, #1
 8008e42:	3508      	adds	r5, #8
 8008e44:	e762      	b.n	8008d0c <_dtoa_r+0x3a4>
 8008e46:	2602      	movs	r6, #2
 8008e48:	e765      	b.n	8008d16 <_dtoa_r+0x3ae>
 8008e4a:	46b8      	mov	r8, r7
 8008e4c:	9c08      	ldr	r4, [sp, #32]
 8008e4e:	e784      	b.n	8008d5a <_dtoa_r+0x3f2>
 8008e50:	4b27      	ldr	r3, [pc, #156]	@ (8008ef0 <_dtoa_r+0x588>)
 8008e52:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e5c:	4454      	add	r4, sl
 8008e5e:	2900      	cmp	r1, #0
 8008e60:	d054      	beq.n	8008f0c <_dtoa_r+0x5a4>
 8008e62:	2000      	movs	r0, #0
 8008e64:	4928      	ldr	r1, [pc, #160]	@ (8008f08 <_dtoa_r+0x5a0>)
 8008e66:	f7f7 fc61 	bl	800072c <__aeabi_ddiv>
 8008e6a:	4633      	mov	r3, r6
 8008e6c:	462a      	mov	r2, r5
 8008e6e:	f7f7 f97b 	bl	8000168 <__aeabi_dsub>
 8008e72:	4656      	mov	r6, sl
 8008e74:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e7c:	f7f7 fddc 	bl	8000a38 <__aeabi_d2iz>
 8008e80:	4605      	mov	r5, r0
 8008e82:	f7f7 fabf 	bl	8000404 <__aeabi_i2d>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e8e:	f7f7 f96b 	bl	8000168 <__aeabi_dsub>
 8008e92:	4602      	mov	r2, r0
 8008e94:	460b      	mov	r3, r1
 8008e96:	3530      	adds	r5, #48	@ 0x30
 8008e98:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008e9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008ea0:	f806 5b01 	strb.w	r5, [r6], #1
 8008ea4:	f7f7 fd8a 	bl	80009bc <__aeabi_dcmplt>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	d172      	bne.n	8008f92 <_dtoa_r+0x62a>
 8008eac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	4911      	ldr	r1, [pc, #68]	@ (8008ef8 <_dtoa_r+0x590>)
 8008eb4:	f7f7 f958 	bl	8000168 <__aeabi_dsub>
 8008eb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008ebc:	f7f7 fd7e 	bl	80009bc <__aeabi_dcmplt>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	f040 80b4 	bne.w	800902e <_dtoa_r+0x6c6>
 8008ec6:	42a6      	cmp	r6, r4
 8008ec8:	f43f af70 	beq.w	8008dac <_dtoa_r+0x444>
 8008ecc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8008efc <_dtoa_r+0x594>)
 8008ed4:	f7f7 fb00 	bl	80004d8 <__aeabi_dmul>
 8008ed8:	2200      	movs	r2, #0
 8008eda:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008ede:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ee2:	4b06      	ldr	r3, [pc, #24]	@ (8008efc <_dtoa_r+0x594>)
 8008ee4:	f7f7 faf8 	bl	80004d8 <__aeabi_dmul>
 8008ee8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008eec:	e7c4      	b.n	8008e78 <_dtoa_r+0x510>
 8008eee:	bf00      	nop
 8008ef0:	0800b2d8 	.word	0x0800b2d8
 8008ef4:	0800b2b0 	.word	0x0800b2b0
 8008ef8:	3ff00000 	.word	0x3ff00000
 8008efc:	40240000 	.word	0x40240000
 8008f00:	401c0000 	.word	0x401c0000
 8008f04:	40140000 	.word	0x40140000
 8008f08:	3fe00000 	.word	0x3fe00000
 8008f0c:	4631      	mov	r1, r6
 8008f0e:	4628      	mov	r0, r5
 8008f10:	f7f7 fae2 	bl	80004d8 <__aeabi_dmul>
 8008f14:	4656      	mov	r6, sl
 8008f16:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f1a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008f1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f20:	f7f7 fd8a 	bl	8000a38 <__aeabi_d2iz>
 8008f24:	4605      	mov	r5, r0
 8008f26:	f7f7 fa6d 	bl	8000404 <__aeabi_i2d>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f32:	f7f7 f919 	bl	8000168 <__aeabi_dsub>
 8008f36:	4602      	mov	r2, r0
 8008f38:	460b      	mov	r3, r1
 8008f3a:	3530      	adds	r5, #48	@ 0x30
 8008f3c:	f806 5b01 	strb.w	r5, [r6], #1
 8008f40:	42a6      	cmp	r6, r4
 8008f42:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008f46:	f04f 0200 	mov.w	r2, #0
 8008f4a:	d124      	bne.n	8008f96 <_dtoa_r+0x62e>
 8008f4c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008f50:	4bae      	ldr	r3, [pc, #696]	@ (800920c <_dtoa_r+0x8a4>)
 8008f52:	f7f7 f90b 	bl	800016c <__adddf3>
 8008f56:	4602      	mov	r2, r0
 8008f58:	460b      	mov	r3, r1
 8008f5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f5e:	f7f7 fd4b 	bl	80009f8 <__aeabi_dcmpgt>
 8008f62:	2800      	cmp	r0, #0
 8008f64:	d163      	bne.n	800902e <_dtoa_r+0x6c6>
 8008f66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f6a:	2000      	movs	r0, #0
 8008f6c:	49a7      	ldr	r1, [pc, #668]	@ (800920c <_dtoa_r+0x8a4>)
 8008f6e:	f7f7 f8fb 	bl	8000168 <__aeabi_dsub>
 8008f72:	4602      	mov	r2, r0
 8008f74:	460b      	mov	r3, r1
 8008f76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f7a:	f7f7 fd1f 	bl	80009bc <__aeabi_dcmplt>
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	f43f af14 	beq.w	8008dac <_dtoa_r+0x444>
 8008f84:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008f86:	1e73      	subs	r3, r6, #1
 8008f88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f8a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f8e:	2b30      	cmp	r3, #48	@ 0x30
 8008f90:	d0f8      	beq.n	8008f84 <_dtoa_r+0x61c>
 8008f92:	4647      	mov	r7, r8
 8008f94:	e03b      	b.n	800900e <_dtoa_r+0x6a6>
 8008f96:	4b9e      	ldr	r3, [pc, #632]	@ (8009210 <_dtoa_r+0x8a8>)
 8008f98:	f7f7 fa9e 	bl	80004d8 <__aeabi_dmul>
 8008f9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008fa0:	e7bc      	b.n	8008f1c <_dtoa_r+0x5b4>
 8008fa2:	4656      	mov	r6, sl
 8008fa4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008fa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fac:	4620      	mov	r0, r4
 8008fae:	4629      	mov	r1, r5
 8008fb0:	f7f7 fbbc 	bl	800072c <__aeabi_ddiv>
 8008fb4:	f7f7 fd40 	bl	8000a38 <__aeabi_d2iz>
 8008fb8:	4680      	mov	r8, r0
 8008fba:	f7f7 fa23 	bl	8000404 <__aeabi_i2d>
 8008fbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fc2:	f7f7 fa89 	bl	80004d8 <__aeabi_dmul>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	4620      	mov	r0, r4
 8008fcc:	4629      	mov	r1, r5
 8008fce:	f7f7 f8cb 	bl	8000168 <__aeabi_dsub>
 8008fd2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008fd6:	9d08      	ldr	r5, [sp, #32]
 8008fd8:	f806 4b01 	strb.w	r4, [r6], #1
 8008fdc:	eba6 040a 	sub.w	r4, r6, sl
 8008fe0:	42a5      	cmp	r5, r4
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	d133      	bne.n	8009050 <_dtoa_r+0x6e8>
 8008fe8:	f7f7 f8c0 	bl	800016c <__adddf3>
 8008fec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ff0:	4604      	mov	r4, r0
 8008ff2:	460d      	mov	r5, r1
 8008ff4:	f7f7 fd00 	bl	80009f8 <__aeabi_dcmpgt>
 8008ff8:	b9c0      	cbnz	r0, 800902c <_dtoa_r+0x6c4>
 8008ffa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ffe:	4620      	mov	r0, r4
 8009000:	4629      	mov	r1, r5
 8009002:	f7f7 fcd1 	bl	80009a8 <__aeabi_dcmpeq>
 8009006:	b110      	cbz	r0, 800900e <_dtoa_r+0x6a6>
 8009008:	f018 0f01 	tst.w	r8, #1
 800900c:	d10e      	bne.n	800902c <_dtoa_r+0x6c4>
 800900e:	4648      	mov	r0, r9
 8009010:	9903      	ldr	r1, [sp, #12]
 8009012:	f000 fbbb 	bl	800978c <_Bfree>
 8009016:	2300      	movs	r3, #0
 8009018:	7033      	strb	r3, [r6, #0]
 800901a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800901c:	3701      	adds	r7, #1
 800901e:	601f      	str	r7, [r3, #0]
 8009020:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009022:	2b00      	cmp	r3, #0
 8009024:	f000 824b 	beq.w	80094be <_dtoa_r+0xb56>
 8009028:	601e      	str	r6, [r3, #0]
 800902a:	e248      	b.n	80094be <_dtoa_r+0xb56>
 800902c:	46b8      	mov	r8, r7
 800902e:	4633      	mov	r3, r6
 8009030:	461e      	mov	r6, r3
 8009032:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009036:	2a39      	cmp	r2, #57	@ 0x39
 8009038:	d106      	bne.n	8009048 <_dtoa_r+0x6e0>
 800903a:	459a      	cmp	sl, r3
 800903c:	d1f8      	bne.n	8009030 <_dtoa_r+0x6c8>
 800903e:	2230      	movs	r2, #48	@ 0x30
 8009040:	f108 0801 	add.w	r8, r8, #1
 8009044:	f88a 2000 	strb.w	r2, [sl]
 8009048:	781a      	ldrb	r2, [r3, #0]
 800904a:	3201      	adds	r2, #1
 800904c:	701a      	strb	r2, [r3, #0]
 800904e:	e7a0      	b.n	8008f92 <_dtoa_r+0x62a>
 8009050:	2200      	movs	r2, #0
 8009052:	4b6f      	ldr	r3, [pc, #444]	@ (8009210 <_dtoa_r+0x8a8>)
 8009054:	f7f7 fa40 	bl	80004d8 <__aeabi_dmul>
 8009058:	2200      	movs	r2, #0
 800905a:	2300      	movs	r3, #0
 800905c:	4604      	mov	r4, r0
 800905e:	460d      	mov	r5, r1
 8009060:	f7f7 fca2 	bl	80009a8 <__aeabi_dcmpeq>
 8009064:	2800      	cmp	r0, #0
 8009066:	d09f      	beq.n	8008fa8 <_dtoa_r+0x640>
 8009068:	e7d1      	b.n	800900e <_dtoa_r+0x6a6>
 800906a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800906c:	2a00      	cmp	r2, #0
 800906e:	f000 80ea 	beq.w	8009246 <_dtoa_r+0x8de>
 8009072:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009074:	2a01      	cmp	r2, #1
 8009076:	f300 80cd 	bgt.w	8009214 <_dtoa_r+0x8ac>
 800907a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800907c:	2a00      	cmp	r2, #0
 800907e:	f000 80c1 	beq.w	8009204 <_dtoa_r+0x89c>
 8009082:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009086:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009088:	9e04      	ldr	r6, [sp, #16]
 800908a:	9a04      	ldr	r2, [sp, #16]
 800908c:	2101      	movs	r1, #1
 800908e:	441a      	add	r2, r3
 8009090:	9204      	str	r2, [sp, #16]
 8009092:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009094:	4648      	mov	r0, r9
 8009096:	441a      	add	r2, r3
 8009098:	9209      	str	r2, [sp, #36]	@ 0x24
 800909a:	f000 fc2b 	bl	80098f4 <__i2b>
 800909e:	4605      	mov	r5, r0
 80090a0:	b166      	cbz	r6, 80090bc <_dtoa_r+0x754>
 80090a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	dd09      	ble.n	80090bc <_dtoa_r+0x754>
 80090a8:	42b3      	cmp	r3, r6
 80090aa:	bfa8      	it	ge
 80090ac:	4633      	movge	r3, r6
 80090ae:	9a04      	ldr	r2, [sp, #16]
 80090b0:	1af6      	subs	r6, r6, r3
 80090b2:	1ad2      	subs	r2, r2, r3
 80090b4:	9204      	str	r2, [sp, #16]
 80090b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090b8:	1ad3      	subs	r3, r2, r3
 80090ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80090bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090be:	b30b      	cbz	r3, 8009104 <_dtoa_r+0x79c>
 80090c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f000 80c6 	beq.w	8009254 <_dtoa_r+0x8ec>
 80090c8:	2c00      	cmp	r4, #0
 80090ca:	f000 80c0 	beq.w	800924e <_dtoa_r+0x8e6>
 80090ce:	4629      	mov	r1, r5
 80090d0:	4622      	mov	r2, r4
 80090d2:	4648      	mov	r0, r9
 80090d4:	f000 fcc6 	bl	8009a64 <__pow5mult>
 80090d8:	9a03      	ldr	r2, [sp, #12]
 80090da:	4601      	mov	r1, r0
 80090dc:	4605      	mov	r5, r0
 80090de:	4648      	mov	r0, r9
 80090e0:	f000 fc1e 	bl	8009920 <__multiply>
 80090e4:	9903      	ldr	r1, [sp, #12]
 80090e6:	4680      	mov	r8, r0
 80090e8:	4648      	mov	r0, r9
 80090ea:	f000 fb4f 	bl	800978c <_Bfree>
 80090ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090f0:	1b1b      	subs	r3, r3, r4
 80090f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80090f4:	f000 80b1 	beq.w	800925a <_dtoa_r+0x8f2>
 80090f8:	4641      	mov	r1, r8
 80090fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090fc:	4648      	mov	r0, r9
 80090fe:	f000 fcb1 	bl	8009a64 <__pow5mult>
 8009102:	9003      	str	r0, [sp, #12]
 8009104:	2101      	movs	r1, #1
 8009106:	4648      	mov	r0, r9
 8009108:	f000 fbf4 	bl	80098f4 <__i2b>
 800910c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800910e:	4604      	mov	r4, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	f000 81d8 	beq.w	80094c6 <_dtoa_r+0xb5e>
 8009116:	461a      	mov	r2, r3
 8009118:	4601      	mov	r1, r0
 800911a:	4648      	mov	r0, r9
 800911c:	f000 fca2 	bl	8009a64 <__pow5mult>
 8009120:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009122:	4604      	mov	r4, r0
 8009124:	2b01      	cmp	r3, #1
 8009126:	f300 809f 	bgt.w	8009268 <_dtoa_r+0x900>
 800912a:	9b06      	ldr	r3, [sp, #24]
 800912c:	2b00      	cmp	r3, #0
 800912e:	f040 8097 	bne.w	8009260 <_dtoa_r+0x8f8>
 8009132:	9b07      	ldr	r3, [sp, #28]
 8009134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009138:	2b00      	cmp	r3, #0
 800913a:	f040 8093 	bne.w	8009264 <_dtoa_r+0x8fc>
 800913e:	9b07      	ldr	r3, [sp, #28]
 8009140:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009144:	0d1b      	lsrs	r3, r3, #20
 8009146:	051b      	lsls	r3, r3, #20
 8009148:	b133      	cbz	r3, 8009158 <_dtoa_r+0x7f0>
 800914a:	9b04      	ldr	r3, [sp, #16]
 800914c:	3301      	adds	r3, #1
 800914e:	9304      	str	r3, [sp, #16]
 8009150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009152:	3301      	adds	r3, #1
 8009154:	9309      	str	r3, [sp, #36]	@ 0x24
 8009156:	2301      	movs	r3, #1
 8009158:	930a      	str	r3, [sp, #40]	@ 0x28
 800915a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800915c:	2b00      	cmp	r3, #0
 800915e:	f000 81b8 	beq.w	80094d2 <_dtoa_r+0xb6a>
 8009162:	6923      	ldr	r3, [r4, #16]
 8009164:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009168:	6918      	ldr	r0, [r3, #16]
 800916a:	f000 fb77 	bl	800985c <__hi0bits>
 800916e:	f1c0 0020 	rsb	r0, r0, #32
 8009172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009174:	4418      	add	r0, r3
 8009176:	f010 001f 	ands.w	r0, r0, #31
 800917a:	f000 8082 	beq.w	8009282 <_dtoa_r+0x91a>
 800917e:	f1c0 0320 	rsb	r3, r0, #32
 8009182:	2b04      	cmp	r3, #4
 8009184:	dd73      	ble.n	800926e <_dtoa_r+0x906>
 8009186:	9b04      	ldr	r3, [sp, #16]
 8009188:	f1c0 001c 	rsb	r0, r0, #28
 800918c:	4403      	add	r3, r0
 800918e:	9304      	str	r3, [sp, #16]
 8009190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009192:	4406      	add	r6, r0
 8009194:	4403      	add	r3, r0
 8009196:	9309      	str	r3, [sp, #36]	@ 0x24
 8009198:	9b04      	ldr	r3, [sp, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	dd05      	ble.n	80091aa <_dtoa_r+0x842>
 800919e:	461a      	mov	r2, r3
 80091a0:	4648      	mov	r0, r9
 80091a2:	9903      	ldr	r1, [sp, #12]
 80091a4:	f000 fcb8 	bl	8009b18 <__lshift>
 80091a8:	9003      	str	r0, [sp, #12]
 80091aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	dd05      	ble.n	80091bc <_dtoa_r+0x854>
 80091b0:	4621      	mov	r1, r4
 80091b2:	461a      	mov	r2, r3
 80091b4:	4648      	mov	r0, r9
 80091b6:	f000 fcaf 	bl	8009b18 <__lshift>
 80091ba:	4604      	mov	r4, r0
 80091bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d061      	beq.n	8009286 <_dtoa_r+0x91e>
 80091c2:	4621      	mov	r1, r4
 80091c4:	9803      	ldr	r0, [sp, #12]
 80091c6:	f000 fd13 	bl	8009bf0 <__mcmp>
 80091ca:	2800      	cmp	r0, #0
 80091cc:	da5b      	bge.n	8009286 <_dtoa_r+0x91e>
 80091ce:	2300      	movs	r3, #0
 80091d0:	220a      	movs	r2, #10
 80091d2:	4648      	mov	r0, r9
 80091d4:	9903      	ldr	r1, [sp, #12]
 80091d6:	f000 fafb 	bl	80097d0 <__multadd>
 80091da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091dc:	f107 38ff 	add.w	r8, r7, #4294967295
 80091e0:	9003      	str	r0, [sp, #12]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 8177 	beq.w	80094d6 <_dtoa_r+0xb6e>
 80091e8:	4629      	mov	r1, r5
 80091ea:	2300      	movs	r3, #0
 80091ec:	220a      	movs	r2, #10
 80091ee:	4648      	mov	r0, r9
 80091f0:	f000 faee 	bl	80097d0 <__multadd>
 80091f4:	f1bb 0f00 	cmp.w	fp, #0
 80091f8:	4605      	mov	r5, r0
 80091fa:	dc6f      	bgt.n	80092dc <_dtoa_r+0x974>
 80091fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80091fe:	2b02      	cmp	r3, #2
 8009200:	dc49      	bgt.n	8009296 <_dtoa_r+0x92e>
 8009202:	e06b      	b.n	80092dc <_dtoa_r+0x974>
 8009204:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009206:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800920a:	e73c      	b.n	8009086 <_dtoa_r+0x71e>
 800920c:	3fe00000 	.word	0x3fe00000
 8009210:	40240000 	.word	0x40240000
 8009214:	9b08      	ldr	r3, [sp, #32]
 8009216:	1e5c      	subs	r4, r3, #1
 8009218:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800921a:	42a3      	cmp	r3, r4
 800921c:	db09      	blt.n	8009232 <_dtoa_r+0x8ca>
 800921e:	1b1c      	subs	r4, r3, r4
 8009220:	9b08      	ldr	r3, [sp, #32]
 8009222:	2b00      	cmp	r3, #0
 8009224:	f6bf af30 	bge.w	8009088 <_dtoa_r+0x720>
 8009228:	9b04      	ldr	r3, [sp, #16]
 800922a:	9a08      	ldr	r2, [sp, #32]
 800922c:	1a9e      	subs	r6, r3, r2
 800922e:	2300      	movs	r3, #0
 8009230:	e72b      	b.n	800908a <_dtoa_r+0x722>
 8009232:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009234:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009236:	1ae3      	subs	r3, r4, r3
 8009238:	441a      	add	r2, r3
 800923a:	940a      	str	r4, [sp, #40]	@ 0x28
 800923c:	9e04      	ldr	r6, [sp, #16]
 800923e:	2400      	movs	r4, #0
 8009240:	9b08      	ldr	r3, [sp, #32]
 8009242:	920e      	str	r2, [sp, #56]	@ 0x38
 8009244:	e721      	b.n	800908a <_dtoa_r+0x722>
 8009246:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009248:	9e04      	ldr	r6, [sp, #16]
 800924a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800924c:	e728      	b.n	80090a0 <_dtoa_r+0x738>
 800924e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009252:	e751      	b.n	80090f8 <_dtoa_r+0x790>
 8009254:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009256:	9903      	ldr	r1, [sp, #12]
 8009258:	e750      	b.n	80090fc <_dtoa_r+0x794>
 800925a:	f8cd 800c 	str.w	r8, [sp, #12]
 800925e:	e751      	b.n	8009104 <_dtoa_r+0x79c>
 8009260:	2300      	movs	r3, #0
 8009262:	e779      	b.n	8009158 <_dtoa_r+0x7f0>
 8009264:	9b06      	ldr	r3, [sp, #24]
 8009266:	e777      	b.n	8009158 <_dtoa_r+0x7f0>
 8009268:	2300      	movs	r3, #0
 800926a:	930a      	str	r3, [sp, #40]	@ 0x28
 800926c:	e779      	b.n	8009162 <_dtoa_r+0x7fa>
 800926e:	d093      	beq.n	8009198 <_dtoa_r+0x830>
 8009270:	9a04      	ldr	r2, [sp, #16]
 8009272:	331c      	adds	r3, #28
 8009274:	441a      	add	r2, r3
 8009276:	9204      	str	r2, [sp, #16]
 8009278:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800927a:	441e      	add	r6, r3
 800927c:	441a      	add	r2, r3
 800927e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009280:	e78a      	b.n	8009198 <_dtoa_r+0x830>
 8009282:	4603      	mov	r3, r0
 8009284:	e7f4      	b.n	8009270 <_dtoa_r+0x908>
 8009286:	9b08      	ldr	r3, [sp, #32]
 8009288:	46b8      	mov	r8, r7
 800928a:	2b00      	cmp	r3, #0
 800928c:	dc20      	bgt.n	80092d0 <_dtoa_r+0x968>
 800928e:	469b      	mov	fp, r3
 8009290:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009292:	2b02      	cmp	r3, #2
 8009294:	dd1e      	ble.n	80092d4 <_dtoa_r+0x96c>
 8009296:	f1bb 0f00 	cmp.w	fp, #0
 800929a:	f47f adb1 	bne.w	8008e00 <_dtoa_r+0x498>
 800929e:	4621      	mov	r1, r4
 80092a0:	465b      	mov	r3, fp
 80092a2:	2205      	movs	r2, #5
 80092a4:	4648      	mov	r0, r9
 80092a6:	f000 fa93 	bl	80097d0 <__multadd>
 80092aa:	4601      	mov	r1, r0
 80092ac:	4604      	mov	r4, r0
 80092ae:	9803      	ldr	r0, [sp, #12]
 80092b0:	f000 fc9e 	bl	8009bf0 <__mcmp>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	f77f ada3 	ble.w	8008e00 <_dtoa_r+0x498>
 80092ba:	4656      	mov	r6, sl
 80092bc:	2331      	movs	r3, #49	@ 0x31
 80092be:	f108 0801 	add.w	r8, r8, #1
 80092c2:	f806 3b01 	strb.w	r3, [r6], #1
 80092c6:	e59f      	b.n	8008e08 <_dtoa_r+0x4a0>
 80092c8:	46b8      	mov	r8, r7
 80092ca:	9c08      	ldr	r4, [sp, #32]
 80092cc:	4625      	mov	r5, r4
 80092ce:	e7f4      	b.n	80092ba <_dtoa_r+0x952>
 80092d0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80092d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f000 8101 	beq.w	80094de <_dtoa_r+0xb76>
 80092dc:	2e00      	cmp	r6, #0
 80092de:	dd05      	ble.n	80092ec <_dtoa_r+0x984>
 80092e0:	4629      	mov	r1, r5
 80092e2:	4632      	mov	r2, r6
 80092e4:	4648      	mov	r0, r9
 80092e6:	f000 fc17 	bl	8009b18 <__lshift>
 80092ea:	4605      	mov	r5, r0
 80092ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d05c      	beq.n	80093ac <_dtoa_r+0xa44>
 80092f2:	4648      	mov	r0, r9
 80092f4:	6869      	ldr	r1, [r5, #4]
 80092f6:	f000 fa09 	bl	800970c <_Balloc>
 80092fa:	4606      	mov	r6, r0
 80092fc:	b928      	cbnz	r0, 800930a <_dtoa_r+0x9a2>
 80092fe:	4602      	mov	r2, r0
 8009300:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009304:	4b80      	ldr	r3, [pc, #512]	@ (8009508 <_dtoa_r+0xba0>)
 8009306:	f7ff bb43 	b.w	8008990 <_dtoa_r+0x28>
 800930a:	692a      	ldr	r2, [r5, #16]
 800930c:	f105 010c 	add.w	r1, r5, #12
 8009310:	3202      	adds	r2, #2
 8009312:	0092      	lsls	r2, r2, #2
 8009314:	300c      	adds	r0, #12
 8009316:	f7ff fa90 	bl	800883a <memcpy>
 800931a:	2201      	movs	r2, #1
 800931c:	4631      	mov	r1, r6
 800931e:	4648      	mov	r0, r9
 8009320:	f000 fbfa 	bl	8009b18 <__lshift>
 8009324:	462f      	mov	r7, r5
 8009326:	4605      	mov	r5, r0
 8009328:	f10a 0301 	add.w	r3, sl, #1
 800932c:	9304      	str	r3, [sp, #16]
 800932e:	eb0a 030b 	add.w	r3, sl, fp
 8009332:	930a      	str	r3, [sp, #40]	@ 0x28
 8009334:	9b06      	ldr	r3, [sp, #24]
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	9309      	str	r3, [sp, #36]	@ 0x24
 800933c:	9b04      	ldr	r3, [sp, #16]
 800933e:	4621      	mov	r1, r4
 8009340:	9803      	ldr	r0, [sp, #12]
 8009342:	f103 3bff 	add.w	fp, r3, #4294967295
 8009346:	f7ff fa86 	bl	8008856 <quorem>
 800934a:	4603      	mov	r3, r0
 800934c:	4639      	mov	r1, r7
 800934e:	3330      	adds	r3, #48	@ 0x30
 8009350:	9006      	str	r0, [sp, #24]
 8009352:	9803      	ldr	r0, [sp, #12]
 8009354:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009356:	f000 fc4b 	bl	8009bf0 <__mcmp>
 800935a:	462a      	mov	r2, r5
 800935c:	9008      	str	r0, [sp, #32]
 800935e:	4621      	mov	r1, r4
 8009360:	4648      	mov	r0, r9
 8009362:	f000 fc61 	bl	8009c28 <__mdiff>
 8009366:	68c2      	ldr	r2, [r0, #12]
 8009368:	4606      	mov	r6, r0
 800936a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800936c:	bb02      	cbnz	r2, 80093b0 <_dtoa_r+0xa48>
 800936e:	4601      	mov	r1, r0
 8009370:	9803      	ldr	r0, [sp, #12]
 8009372:	f000 fc3d 	bl	8009bf0 <__mcmp>
 8009376:	4602      	mov	r2, r0
 8009378:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800937a:	4631      	mov	r1, r6
 800937c:	4648      	mov	r0, r9
 800937e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8009382:	f000 fa03 	bl	800978c <_Bfree>
 8009386:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009388:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800938a:	9e04      	ldr	r6, [sp, #16]
 800938c:	ea42 0103 	orr.w	r1, r2, r3
 8009390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009392:	4319      	orrs	r1, r3
 8009394:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009396:	d10d      	bne.n	80093b4 <_dtoa_r+0xa4c>
 8009398:	2b39      	cmp	r3, #57	@ 0x39
 800939a:	d027      	beq.n	80093ec <_dtoa_r+0xa84>
 800939c:	9a08      	ldr	r2, [sp, #32]
 800939e:	2a00      	cmp	r2, #0
 80093a0:	dd01      	ble.n	80093a6 <_dtoa_r+0xa3e>
 80093a2:	9b06      	ldr	r3, [sp, #24]
 80093a4:	3331      	adds	r3, #49	@ 0x31
 80093a6:	f88b 3000 	strb.w	r3, [fp]
 80093aa:	e52e      	b.n	8008e0a <_dtoa_r+0x4a2>
 80093ac:	4628      	mov	r0, r5
 80093ae:	e7b9      	b.n	8009324 <_dtoa_r+0x9bc>
 80093b0:	2201      	movs	r2, #1
 80093b2:	e7e2      	b.n	800937a <_dtoa_r+0xa12>
 80093b4:	9908      	ldr	r1, [sp, #32]
 80093b6:	2900      	cmp	r1, #0
 80093b8:	db04      	blt.n	80093c4 <_dtoa_r+0xa5c>
 80093ba:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80093bc:	4301      	orrs	r1, r0
 80093be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093c0:	4301      	orrs	r1, r0
 80093c2:	d120      	bne.n	8009406 <_dtoa_r+0xa9e>
 80093c4:	2a00      	cmp	r2, #0
 80093c6:	ddee      	ble.n	80093a6 <_dtoa_r+0xa3e>
 80093c8:	2201      	movs	r2, #1
 80093ca:	9903      	ldr	r1, [sp, #12]
 80093cc:	4648      	mov	r0, r9
 80093ce:	9304      	str	r3, [sp, #16]
 80093d0:	f000 fba2 	bl	8009b18 <__lshift>
 80093d4:	4621      	mov	r1, r4
 80093d6:	9003      	str	r0, [sp, #12]
 80093d8:	f000 fc0a 	bl	8009bf0 <__mcmp>
 80093dc:	2800      	cmp	r0, #0
 80093de:	9b04      	ldr	r3, [sp, #16]
 80093e0:	dc02      	bgt.n	80093e8 <_dtoa_r+0xa80>
 80093e2:	d1e0      	bne.n	80093a6 <_dtoa_r+0xa3e>
 80093e4:	07da      	lsls	r2, r3, #31
 80093e6:	d5de      	bpl.n	80093a6 <_dtoa_r+0xa3e>
 80093e8:	2b39      	cmp	r3, #57	@ 0x39
 80093ea:	d1da      	bne.n	80093a2 <_dtoa_r+0xa3a>
 80093ec:	2339      	movs	r3, #57	@ 0x39
 80093ee:	f88b 3000 	strb.w	r3, [fp]
 80093f2:	4633      	mov	r3, r6
 80093f4:	461e      	mov	r6, r3
 80093f6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80093fa:	3b01      	subs	r3, #1
 80093fc:	2a39      	cmp	r2, #57	@ 0x39
 80093fe:	d04e      	beq.n	800949e <_dtoa_r+0xb36>
 8009400:	3201      	adds	r2, #1
 8009402:	701a      	strb	r2, [r3, #0]
 8009404:	e501      	b.n	8008e0a <_dtoa_r+0x4a2>
 8009406:	2a00      	cmp	r2, #0
 8009408:	dd03      	ble.n	8009412 <_dtoa_r+0xaaa>
 800940a:	2b39      	cmp	r3, #57	@ 0x39
 800940c:	d0ee      	beq.n	80093ec <_dtoa_r+0xa84>
 800940e:	3301      	adds	r3, #1
 8009410:	e7c9      	b.n	80093a6 <_dtoa_r+0xa3e>
 8009412:	9a04      	ldr	r2, [sp, #16]
 8009414:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009416:	f802 3c01 	strb.w	r3, [r2, #-1]
 800941a:	428a      	cmp	r2, r1
 800941c:	d028      	beq.n	8009470 <_dtoa_r+0xb08>
 800941e:	2300      	movs	r3, #0
 8009420:	220a      	movs	r2, #10
 8009422:	9903      	ldr	r1, [sp, #12]
 8009424:	4648      	mov	r0, r9
 8009426:	f000 f9d3 	bl	80097d0 <__multadd>
 800942a:	42af      	cmp	r7, r5
 800942c:	9003      	str	r0, [sp, #12]
 800942e:	f04f 0300 	mov.w	r3, #0
 8009432:	f04f 020a 	mov.w	r2, #10
 8009436:	4639      	mov	r1, r7
 8009438:	4648      	mov	r0, r9
 800943a:	d107      	bne.n	800944c <_dtoa_r+0xae4>
 800943c:	f000 f9c8 	bl	80097d0 <__multadd>
 8009440:	4607      	mov	r7, r0
 8009442:	4605      	mov	r5, r0
 8009444:	9b04      	ldr	r3, [sp, #16]
 8009446:	3301      	adds	r3, #1
 8009448:	9304      	str	r3, [sp, #16]
 800944a:	e777      	b.n	800933c <_dtoa_r+0x9d4>
 800944c:	f000 f9c0 	bl	80097d0 <__multadd>
 8009450:	4629      	mov	r1, r5
 8009452:	4607      	mov	r7, r0
 8009454:	2300      	movs	r3, #0
 8009456:	220a      	movs	r2, #10
 8009458:	4648      	mov	r0, r9
 800945a:	f000 f9b9 	bl	80097d0 <__multadd>
 800945e:	4605      	mov	r5, r0
 8009460:	e7f0      	b.n	8009444 <_dtoa_r+0xadc>
 8009462:	f1bb 0f00 	cmp.w	fp, #0
 8009466:	bfcc      	ite	gt
 8009468:	465e      	movgt	r6, fp
 800946a:	2601      	movle	r6, #1
 800946c:	2700      	movs	r7, #0
 800946e:	4456      	add	r6, sl
 8009470:	2201      	movs	r2, #1
 8009472:	9903      	ldr	r1, [sp, #12]
 8009474:	4648      	mov	r0, r9
 8009476:	9304      	str	r3, [sp, #16]
 8009478:	f000 fb4e 	bl	8009b18 <__lshift>
 800947c:	4621      	mov	r1, r4
 800947e:	9003      	str	r0, [sp, #12]
 8009480:	f000 fbb6 	bl	8009bf0 <__mcmp>
 8009484:	2800      	cmp	r0, #0
 8009486:	dcb4      	bgt.n	80093f2 <_dtoa_r+0xa8a>
 8009488:	d102      	bne.n	8009490 <_dtoa_r+0xb28>
 800948a:	9b04      	ldr	r3, [sp, #16]
 800948c:	07db      	lsls	r3, r3, #31
 800948e:	d4b0      	bmi.n	80093f2 <_dtoa_r+0xa8a>
 8009490:	4633      	mov	r3, r6
 8009492:	461e      	mov	r6, r3
 8009494:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009498:	2a30      	cmp	r2, #48	@ 0x30
 800949a:	d0fa      	beq.n	8009492 <_dtoa_r+0xb2a>
 800949c:	e4b5      	b.n	8008e0a <_dtoa_r+0x4a2>
 800949e:	459a      	cmp	sl, r3
 80094a0:	d1a8      	bne.n	80093f4 <_dtoa_r+0xa8c>
 80094a2:	2331      	movs	r3, #49	@ 0x31
 80094a4:	f108 0801 	add.w	r8, r8, #1
 80094a8:	f88a 3000 	strb.w	r3, [sl]
 80094ac:	e4ad      	b.n	8008e0a <_dtoa_r+0x4a2>
 80094ae:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80094b0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800950c <_dtoa_r+0xba4>
 80094b4:	b11b      	cbz	r3, 80094be <_dtoa_r+0xb56>
 80094b6:	f10a 0308 	add.w	r3, sl, #8
 80094ba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80094bc:	6013      	str	r3, [r2, #0]
 80094be:	4650      	mov	r0, sl
 80094c0:	b017      	add	sp, #92	@ 0x5c
 80094c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	f77f ae2e 	ble.w	800912a <_dtoa_r+0x7c2>
 80094ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80094d2:	2001      	movs	r0, #1
 80094d4:	e64d      	b.n	8009172 <_dtoa_r+0x80a>
 80094d6:	f1bb 0f00 	cmp.w	fp, #0
 80094da:	f77f aed9 	ble.w	8009290 <_dtoa_r+0x928>
 80094de:	4656      	mov	r6, sl
 80094e0:	4621      	mov	r1, r4
 80094e2:	9803      	ldr	r0, [sp, #12]
 80094e4:	f7ff f9b7 	bl	8008856 <quorem>
 80094e8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80094ec:	f806 3b01 	strb.w	r3, [r6], #1
 80094f0:	eba6 020a 	sub.w	r2, r6, sl
 80094f4:	4593      	cmp	fp, r2
 80094f6:	ddb4      	ble.n	8009462 <_dtoa_r+0xafa>
 80094f8:	2300      	movs	r3, #0
 80094fa:	220a      	movs	r2, #10
 80094fc:	4648      	mov	r0, r9
 80094fe:	9903      	ldr	r1, [sp, #12]
 8009500:	f000 f966 	bl	80097d0 <__multadd>
 8009504:	9003      	str	r0, [sp, #12]
 8009506:	e7eb      	b.n	80094e0 <_dtoa_r+0xb78>
 8009508:	0800b1a2 	.word	0x0800b1a2
 800950c:	0800b126 	.word	0x0800b126

08009510 <_free_r>:
 8009510:	b538      	push	{r3, r4, r5, lr}
 8009512:	4605      	mov	r5, r0
 8009514:	2900      	cmp	r1, #0
 8009516:	d040      	beq.n	800959a <_free_r+0x8a>
 8009518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800951c:	1f0c      	subs	r4, r1, #4
 800951e:	2b00      	cmp	r3, #0
 8009520:	bfb8      	it	lt
 8009522:	18e4      	addlt	r4, r4, r3
 8009524:	f000 f8e6 	bl	80096f4 <__malloc_lock>
 8009528:	4a1c      	ldr	r2, [pc, #112]	@ (800959c <_free_r+0x8c>)
 800952a:	6813      	ldr	r3, [r2, #0]
 800952c:	b933      	cbnz	r3, 800953c <_free_r+0x2c>
 800952e:	6063      	str	r3, [r4, #4]
 8009530:	6014      	str	r4, [r2, #0]
 8009532:	4628      	mov	r0, r5
 8009534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009538:	f000 b8e2 	b.w	8009700 <__malloc_unlock>
 800953c:	42a3      	cmp	r3, r4
 800953e:	d908      	bls.n	8009552 <_free_r+0x42>
 8009540:	6820      	ldr	r0, [r4, #0]
 8009542:	1821      	adds	r1, r4, r0
 8009544:	428b      	cmp	r3, r1
 8009546:	bf01      	itttt	eq
 8009548:	6819      	ldreq	r1, [r3, #0]
 800954a:	685b      	ldreq	r3, [r3, #4]
 800954c:	1809      	addeq	r1, r1, r0
 800954e:	6021      	streq	r1, [r4, #0]
 8009550:	e7ed      	b.n	800952e <_free_r+0x1e>
 8009552:	461a      	mov	r2, r3
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	b10b      	cbz	r3, 800955c <_free_r+0x4c>
 8009558:	42a3      	cmp	r3, r4
 800955a:	d9fa      	bls.n	8009552 <_free_r+0x42>
 800955c:	6811      	ldr	r1, [r2, #0]
 800955e:	1850      	adds	r0, r2, r1
 8009560:	42a0      	cmp	r0, r4
 8009562:	d10b      	bne.n	800957c <_free_r+0x6c>
 8009564:	6820      	ldr	r0, [r4, #0]
 8009566:	4401      	add	r1, r0
 8009568:	1850      	adds	r0, r2, r1
 800956a:	4283      	cmp	r3, r0
 800956c:	6011      	str	r1, [r2, #0]
 800956e:	d1e0      	bne.n	8009532 <_free_r+0x22>
 8009570:	6818      	ldr	r0, [r3, #0]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	4408      	add	r0, r1
 8009576:	6010      	str	r0, [r2, #0]
 8009578:	6053      	str	r3, [r2, #4]
 800957a:	e7da      	b.n	8009532 <_free_r+0x22>
 800957c:	d902      	bls.n	8009584 <_free_r+0x74>
 800957e:	230c      	movs	r3, #12
 8009580:	602b      	str	r3, [r5, #0]
 8009582:	e7d6      	b.n	8009532 <_free_r+0x22>
 8009584:	6820      	ldr	r0, [r4, #0]
 8009586:	1821      	adds	r1, r4, r0
 8009588:	428b      	cmp	r3, r1
 800958a:	bf01      	itttt	eq
 800958c:	6819      	ldreq	r1, [r3, #0]
 800958e:	685b      	ldreq	r3, [r3, #4]
 8009590:	1809      	addeq	r1, r1, r0
 8009592:	6021      	streq	r1, [r4, #0]
 8009594:	6063      	str	r3, [r4, #4]
 8009596:	6054      	str	r4, [r2, #4]
 8009598:	e7cb      	b.n	8009532 <_free_r+0x22>
 800959a:	bd38      	pop	{r3, r4, r5, pc}
 800959c:	20000a54 	.word	0x20000a54

080095a0 <malloc>:
 80095a0:	4b02      	ldr	r3, [pc, #8]	@ (80095ac <malloc+0xc>)
 80095a2:	4601      	mov	r1, r0
 80095a4:	6818      	ldr	r0, [r3, #0]
 80095a6:	f000 b825 	b.w	80095f4 <_malloc_r>
 80095aa:	bf00      	nop
 80095ac:	20000018 	.word	0x20000018

080095b0 <sbrk_aligned>:
 80095b0:	b570      	push	{r4, r5, r6, lr}
 80095b2:	4e0f      	ldr	r6, [pc, #60]	@ (80095f0 <sbrk_aligned+0x40>)
 80095b4:	460c      	mov	r4, r1
 80095b6:	6831      	ldr	r1, [r6, #0]
 80095b8:	4605      	mov	r5, r0
 80095ba:	b911      	cbnz	r1, 80095c2 <sbrk_aligned+0x12>
 80095bc:	f000 fe3a 	bl	800a234 <_sbrk_r>
 80095c0:	6030      	str	r0, [r6, #0]
 80095c2:	4621      	mov	r1, r4
 80095c4:	4628      	mov	r0, r5
 80095c6:	f000 fe35 	bl	800a234 <_sbrk_r>
 80095ca:	1c43      	adds	r3, r0, #1
 80095cc:	d103      	bne.n	80095d6 <sbrk_aligned+0x26>
 80095ce:	f04f 34ff 	mov.w	r4, #4294967295
 80095d2:	4620      	mov	r0, r4
 80095d4:	bd70      	pop	{r4, r5, r6, pc}
 80095d6:	1cc4      	adds	r4, r0, #3
 80095d8:	f024 0403 	bic.w	r4, r4, #3
 80095dc:	42a0      	cmp	r0, r4
 80095de:	d0f8      	beq.n	80095d2 <sbrk_aligned+0x22>
 80095e0:	1a21      	subs	r1, r4, r0
 80095e2:	4628      	mov	r0, r5
 80095e4:	f000 fe26 	bl	800a234 <_sbrk_r>
 80095e8:	3001      	adds	r0, #1
 80095ea:	d1f2      	bne.n	80095d2 <sbrk_aligned+0x22>
 80095ec:	e7ef      	b.n	80095ce <sbrk_aligned+0x1e>
 80095ee:	bf00      	nop
 80095f0:	20000a50 	.word	0x20000a50

080095f4 <_malloc_r>:
 80095f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095f8:	1ccd      	adds	r5, r1, #3
 80095fa:	f025 0503 	bic.w	r5, r5, #3
 80095fe:	3508      	adds	r5, #8
 8009600:	2d0c      	cmp	r5, #12
 8009602:	bf38      	it	cc
 8009604:	250c      	movcc	r5, #12
 8009606:	2d00      	cmp	r5, #0
 8009608:	4606      	mov	r6, r0
 800960a:	db01      	blt.n	8009610 <_malloc_r+0x1c>
 800960c:	42a9      	cmp	r1, r5
 800960e:	d904      	bls.n	800961a <_malloc_r+0x26>
 8009610:	230c      	movs	r3, #12
 8009612:	6033      	str	r3, [r6, #0]
 8009614:	2000      	movs	r0, #0
 8009616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800961a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80096f0 <_malloc_r+0xfc>
 800961e:	f000 f869 	bl	80096f4 <__malloc_lock>
 8009622:	f8d8 3000 	ldr.w	r3, [r8]
 8009626:	461c      	mov	r4, r3
 8009628:	bb44      	cbnz	r4, 800967c <_malloc_r+0x88>
 800962a:	4629      	mov	r1, r5
 800962c:	4630      	mov	r0, r6
 800962e:	f7ff ffbf 	bl	80095b0 <sbrk_aligned>
 8009632:	1c43      	adds	r3, r0, #1
 8009634:	4604      	mov	r4, r0
 8009636:	d158      	bne.n	80096ea <_malloc_r+0xf6>
 8009638:	f8d8 4000 	ldr.w	r4, [r8]
 800963c:	4627      	mov	r7, r4
 800963e:	2f00      	cmp	r7, #0
 8009640:	d143      	bne.n	80096ca <_malloc_r+0xd6>
 8009642:	2c00      	cmp	r4, #0
 8009644:	d04b      	beq.n	80096de <_malloc_r+0xea>
 8009646:	6823      	ldr	r3, [r4, #0]
 8009648:	4639      	mov	r1, r7
 800964a:	4630      	mov	r0, r6
 800964c:	eb04 0903 	add.w	r9, r4, r3
 8009650:	f000 fdf0 	bl	800a234 <_sbrk_r>
 8009654:	4581      	cmp	r9, r0
 8009656:	d142      	bne.n	80096de <_malloc_r+0xea>
 8009658:	6821      	ldr	r1, [r4, #0]
 800965a:	4630      	mov	r0, r6
 800965c:	1a6d      	subs	r5, r5, r1
 800965e:	4629      	mov	r1, r5
 8009660:	f7ff ffa6 	bl	80095b0 <sbrk_aligned>
 8009664:	3001      	adds	r0, #1
 8009666:	d03a      	beq.n	80096de <_malloc_r+0xea>
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	442b      	add	r3, r5
 800966c:	6023      	str	r3, [r4, #0]
 800966e:	f8d8 3000 	ldr.w	r3, [r8]
 8009672:	685a      	ldr	r2, [r3, #4]
 8009674:	bb62      	cbnz	r2, 80096d0 <_malloc_r+0xdc>
 8009676:	f8c8 7000 	str.w	r7, [r8]
 800967a:	e00f      	b.n	800969c <_malloc_r+0xa8>
 800967c:	6822      	ldr	r2, [r4, #0]
 800967e:	1b52      	subs	r2, r2, r5
 8009680:	d420      	bmi.n	80096c4 <_malloc_r+0xd0>
 8009682:	2a0b      	cmp	r2, #11
 8009684:	d917      	bls.n	80096b6 <_malloc_r+0xc2>
 8009686:	1961      	adds	r1, r4, r5
 8009688:	42a3      	cmp	r3, r4
 800968a:	6025      	str	r5, [r4, #0]
 800968c:	bf18      	it	ne
 800968e:	6059      	strne	r1, [r3, #4]
 8009690:	6863      	ldr	r3, [r4, #4]
 8009692:	bf08      	it	eq
 8009694:	f8c8 1000 	streq.w	r1, [r8]
 8009698:	5162      	str	r2, [r4, r5]
 800969a:	604b      	str	r3, [r1, #4]
 800969c:	4630      	mov	r0, r6
 800969e:	f000 f82f 	bl	8009700 <__malloc_unlock>
 80096a2:	f104 000b 	add.w	r0, r4, #11
 80096a6:	1d23      	adds	r3, r4, #4
 80096a8:	f020 0007 	bic.w	r0, r0, #7
 80096ac:	1ac2      	subs	r2, r0, r3
 80096ae:	bf1c      	itt	ne
 80096b0:	1a1b      	subne	r3, r3, r0
 80096b2:	50a3      	strne	r3, [r4, r2]
 80096b4:	e7af      	b.n	8009616 <_malloc_r+0x22>
 80096b6:	6862      	ldr	r2, [r4, #4]
 80096b8:	42a3      	cmp	r3, r4
 80096ba:	bf0c      	ite	eq
 80096bc:	f8c8 2000 	streq.w	r2, [r8]
 80096c0:	605a      	strne	r2, [r3, #4]
 80096c2:	e7eb      	b.n	800969c <_malloc_r+0xa8>
 80096c4:	4623      	mov	r3, r4
 80096c6:	6864      	ldr	r4, [r4, #4]
 80096c8:	e7ae      	b.n	8009628 <_malloc_r+0x34>
 80096ca:	463c      	mov	r4, r7
 80096cc:	687f      	ldr	r7, [r7, #4]
 80096ce:	e7b6      	b.n	800963e <_malloc_r+0x4a>
 80096d0:	461a      	mov	r2, r3
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	42a3      	cmp	r3, r4
 80096d6:	d1fb      	bne.n	80096d0 <_malloc_r+0xdc>
 80096d8:	2300      	movs	r3, #0
 80096da:	6053      	str	r3, [r2, #4]
 80096dc:	e7de      	b.n	800969c <_malloc_r+0xa8>
 80096de:	230c      	movs	r3, #12
 80096e0:	4630      	mov	r0, r6
 80096e2:	6033      	str	r3, [r6, #0]
 80096e4:	f000 f80c 	bl	8009700 <__malloc_unlock>
 80096e8:	e794      	b.n	8009614 <_malloc_r+0x20>
 80096ea:	6005      	str	r5, [r0, #0]
 80096ec:	e7d6      	b.n	800969c <_malloc_r+0xa8>
 80096ee:	bf00      	nop
 80096f0:	20000a54 	.word	0x20000a54

080096f4 <__malloc_lock>:
 80096f4:	4801      	ldr	r0, [pc, #4]	@ (80096fc <__malloc_lock+0x8>)
 80096f6:	f7ff b888 	b.w	800880a <__retarget_lock_acquire_recursive>
 80096fa:	bf00      	nop
 80096fc:	20000a4c 	.word	0x20000a4c

08009700 <__malloc_unlock>:
 8009700:	4801      	ldr	r0, [pc, #4]	@ (8009708 <__malloc_unlock+0x8>)
 8009702:	f7ff b883 	b.w	800880c <__retarget_lock_release_recursive>
 8009706:	bf00      	nop
 8009708:	20000a4c 	.word	0x20000a4c

0800970c <_Balloc>:
 800970c:	b570      	push	{r4, r5, r6, lr}
 800970e:	69c6      	ldr	r6, [r0, #28]
 8009710:	4604      	mov	r4, r0
 8009712:	460d      	mov	r5, r1
 8009714:	b976      	cbnz	r6, 8009734 <_Balloc+0x28>
 8009716:	2010      	movs	r0, #16
 8009718:	f7ff ff42 	bl	80095a0 <malloc>
 800971c:	4602      	mov	r2, r0
 800971e:	61e0      	str	r0, [r4, #28]
 8009720:	b920      	cbnz	r0, 800972c <_Balloc+0x20>
 8009722:	216b      	movs	r1, #107	@ 0x6b
 8009724:	4b17      	ldr	r3, [pc, #92]	@ (8009784 <_Balloc+0x78>)
 8009726:	4818      	ldr	r0, [pc, #96]	@ (8009788 <_Balloc+0x7c>)
 8009728:	f000 fd94 	bl	800a254 <__assert_func>
 800972c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009730:	6006      	str	r6, [r0, #0]
 8009732:	60c6      	str	r6, [r0, #12]
 8009734:	69e6      	ldr	r6, [r4, #28]
 8009736:	68f3      	ldr	r3, [r6, #12]
 8009738:	b183      	cbz	r3, 800975c <_Balloc+0x50>
 800973a:	69e3      	ldr	r3, [r4, #28]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009742:	b9b8      	cbnz	r0, 8009774 <_Balloc+0x68>
 8009744:	2101      	movs	r1, #1
 8009746:	fa01 f605 	lsl.w	r6, r1, r5
 800974a:	1d72      	adds	r2, r6, #5
 800974c:	4620      	mov	r0, r4
 800974e:	0092      	lsls	r2, r2, #2
 8009750:	f000 fd9e 	bl	800a290 <_calloc_r>
 8009754:	b160      	cbz	r0, 8009770 <_Balloc+0x64>
 8009756:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800975a:	e00e      	b.n	800977a <_Balloc+0x6e>
 800975c:	2221      	movs	r2, #33	@ 0x21
 800975e:	2104      	movs	r1, #4
 8009760:	4620      	mov	r0, r4
 8009762:	f000 fd95 	bl	800a290 <_calloc_r>
 8009766:	69e3      	ldr	r3, [r4, #28]
 8009768:	60f0      	str	r0, [r6, #12]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1e4      	bne.n	800973a <_Balloc+0x2e>
 8009770:	2000      	movs	r0, #0
 8009772:	bd70      	pop	{r4, r5, r6, pc}
 8009774:	6802      	ldr	r2, [r0, #0]
 8009776:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800977a:	2300      	movs	r3, #0
 800977c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009780:	e7f7      	b.n	8009772 <_Balloc+0x66>
 8009782:	bf00      	nop
 8009784:	0800b133 	.word	0x0800b133
 8009788:	0800b1b3 	.word	0x0800b1b3

0800978c <_Bfree>:
 800978c:	b570      	push	{r4, r5, r6, lr}
 800978e:	69c6      	ldr	r6, [r0, #28]
 8009790:	4605      	mov	r5, r0
 8009792:	460c      	mov	r4, r1
 8009794:	b976      	cbnz	r6, 80097b4 <_Bfree+0x28>
 8009796:	2010      	movs	r0, #16
 8009798:	f7ff ff02 	bl	80095a0 <malloc>
 800979c:	4602      	mov	r2, r0
 800979e:	61e8      	str	r0, [r5, #28]
 80097a0:	b920      	cbnz	r0, 80097ac <_Bfree+0x20>
 80097a2:	218f      	movs	r1, #143	@ 0x8f
 80097a4:	4b08      	ldr	r3, [pc, #32]	@ (80097c8 <_Bfree+0x3c>)
 80097a6:	4809      	ldr	r0, [pc, #36]	@ (80097cc <_Bfree+0x40>)
 80097a8:	f000 fd54 	bl	800a254 <__assert_func>
 80097ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097b0:	6006      	str	r6, [r0, #0]
 80097b2:	60c6      	str	r6, [r0, #12]
 80097b4:	b13c      	cbz	r4, 80097c6 <_Bfree+0x3a>
 80097b6:	69eb      	ldr	r3, [r5, #28]
 80097b8:	6862      	ldr	r2, [r4, #4]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097c0:	6021      	str	r1, [r4, #0]
 80097c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097c6:	bd70      	pop	{r4, r5, r6, pc}
 80097c8:	0800b133 	.word	0x0800b133
 80097cc:	0800b1b3 	.word	0x0800b1b3

080097d0 <__multadd>:
 80097d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097d4:	4607      	mov	r7, r0
 80097d6:	460c      	mov	r4, r1
 80097d8:	461e      	mov	r6, r3
 80097da:	2000      	movs	r0, #0
 80097dc:	690d      	ldr	r5, [r1, #16]
 80097de:	f101 0c14 	add.w	ip, r1, #20
 80097e2:	f8dc 3000 	ldr.w	r3, [ip]
 80097e6:	3001      	adds	r0, #1
 80097e8:	b299      	uxth	r1, r3
 80097ea:	fb02 6101 	mla	r1, r2, r1, r6
 80097ee:	0c1e      	lsrs	r6, r3, #16
 80097f0:	0c0b      	lsrs	r3, r1, #16
 80097f2:	fb02 3306 	mla	r3, r2, r6, r3
 80097f6:	b289      	uxth	r1, r1
 80097f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097fc:	4285      	cmp	r5, r0
 80097fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009802:	f84c 1b04 	str.w	r1, [ip], #4
 8009806:	dcec      	bgt.n	80097e2 <__multadd+0x12>
 8009808:	b30e      	cbz	r6, 800984e <__multadd+0x7e>
 800980a:	68a3      	ldr	r3, [r4, #8]
 800980c:	42ab      	cmp	r3, r5
 800980e:	dc19      	bgt.n	8009844 <__multadd+0x74>
 8009810:	6861      	ldr	r1, [r4, #4]
 8009812:	4638      	mov	r0, r7
 8009814:	3101      	adds	r1, #1
 8009816:	f7ff ff79 	bl	800970c <_Balloc>
 800981a:	4680      	mov	r8, r0
 800981c:	b928      	cbnz	r0, 800982a <__multadd+0x5a>
 800981e:	4602      	mov	r2, r0
 8009820:	21ba      	movs	r1, #186	@ 0xba
 8009822:	4b0c      	ldr	r3, [pc, #48]	@ (8009854 <__multadd+0x84>)
 8009824:	480c      	ldr	r0, [pc, #48]	@ (8009858 <__multadd+0x88>)
 8009826:	f000 fd15 	bl	800a254 <__assert_func>
 800982a:	6922      	ldr	r2, [r4, #16]
 800982c:	f104 010c 	add.w	r1, r4, #12
 8009830:	3202      	adds	r2, #2
 8009832:	0092      	lsls	r2, r2, #2
 8009834:	300c      	adds	r0, #12
 8009836:	f7ff f800 	bl	800883a <memcpy>
 800983a:	4621      	mov	r1, r4
 800983c:	4638      	mov	r0, r7
 800983e:	f7ff ffa5 	bl	800978c <_Bfree>
 8009842:	4644      	mov	r4, r8
 8009844:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009848:	3501      	adds	r5, #1
 800984a:	615e      	str	r6, [r3, #20]
 800984c:	6125      	str	r5, [r4, #16]
 800984e:	4620      	mov	r0, r4
 8009850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009854:	0800b1a2 	.word	0x0800b1a2
 8009858:	0800b1b3 	.word	0x0800b1b3

0800985c <__hi0bits>:
 800985c:	4603      	mov	r3, r0
 800985e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009862:	bf3a      	itte	cc
 8009864:	0403      	lslcc	r3, r0, #16
 8009866:	2010      	movcc	r0, #16
 8009868:	2000      	movcs	r0, #0
 800986a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800986e:	bf3c      	itt	cc
 8009870:	021b      	lslcc	r3, r3, #8
 8009872:	3008      	addcc	r0, #8
 8009874:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009878:	bf3c      	itt	cc
 800987a:	011b      	lslcc	r3, r3, #4
 800987c:	3004      	addcc	r0, #4
 800987e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009882:	bf3c      	itt	cc
 8009884:	009b      	lslcc	r3, r3, #2
 8009886:	3002      	addcc	r0, #2
 8009888:	2b00      	cmp	r3, #0
 800988a:	db05      	blt.n	8009898 <__hi0bits+0x3c>
 800988c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009890:	f100 0001 	add.w	r0, r0, #1
 8009894:	bf08      	it	eq
 8009896:	2020      	moveq	r0, #32
 8009898:	4770      	bx	lr

0800989a <__lo0bits>:
 800989a:	6803      	ldr	r3, [r0, #0]
 800989c:	4602      	mov	r2, r0
 800989e:	f013 0007 	ands.w	r0, r3, #7
 80098a2:	d00b      	beq.n	80098bc <__lo0bits+0x22>
 80098a4:	07d9      	lsls	r1, r3, #31
 80098a6:	d421      	bmi.n	80098ec <__lo0bits+0x52>
 80098a8:	0798      	lsls	r0, r3, #30
 80098aa:	bf49      	itett	mi
 80098ac:	085b      	lsrmi	r3, r3, #1
 80098ae:	089b      	lsrpl	r3, r3, #2
 80098b0:	2001      	movmi	r0, #1
 80098b2:	6013      	strmi	r3, [r2, #0]
 80098b4:	bf5c      	itt	pl
 80098b6:	2002      	movpl	r0, #2
 80098b8:	6013      	strpl	r3, [r2, #0]
 80098ba:	4770      	bx	lr
 80098bc:	b299      	uxth	r1, r3
 80098be:	b909      	cbnz	r1, 80098c4 <__lo0bits+0x2a>
 80098c0:	2010      	movs	r0, #16
 80098c2:	0c1b      	lsrs	r3, r3, #16
 80098c4:	b2d9      	uxtb	r1, r3
 80098c6:	b909      	cbnz	r1, 80098cc <__lo0bits+0x32>
 80098c8:	3008      	adds	r0, #8
 80098ca:	0a1b      	lsrs	r3, r3, #8
 80098cc:	0719      	lsls	r1, r3, #28
 80098ce:	bf04      	itt	eq
 80098d0:	091b      	lsreq	r3, r3, #4
 80098d2:	3004      	addeq	r0, #4
 80098d4:	0799      	lsls	r1, r3, #30
 80098d6:	bf04      	itt	eq
 80098d8:	089b      	lsreq	r3, r3, #2
 80098da:	3002      	addeq	r0, #2
 80098dc:	07d9      	lsls	r1, r3, #31
 80098de:	d403      	bmi.n	80098e8 <__lo0bits+0x4e>
 80098e0:	085b      	lsrs	r3, r3, #1
 80098e2:	f100 0001 	add.w	r0, r0, #1
 80098e6:	d003      	beq.n	80098f0 <__lo0bits+0x56>
 80098e8:	6013      	str	r3, [r2, #0]
 80098ea:	4770      	bx	lr
 80098ec:	2000      	movs	r0, #0
 80098ee:	4770      	bx	lr
 80098f0:	2020      	movs	r0, #32
 80098f2:	4770      	bx	lr

080098f4 <__i2b>:
 80098f4:	b510      	push	{r4, lr}
 80098f6:	460c      	mov	r4, r1
 80098f8:	2101      	movs	r1, #1
 80098fa:	f7ff ff07 	bl	800970c <_Balloc>
 80098fe:	4602      	mov	r2, r0
 8009900:	b928      	cbnz	r0, 800990e <__i2b+0x1a>
 8009902:	f240 1145 	movw	r1, #325	@ 0x145
 8009906:	4b04      	ldr	r3, [pc, #16]	@ (8009918 <__i2b+0x24>)
 8009908:	4804      	ldr	r0, [pc, #16]	@ (800991c <__i2b+0x28>)
 800990a:	f000 fca3 	bl	800a254 <__assert_func>
 800990e:	2301      	movs	r3, #1
 8009910:	6144      	str	r4, [r0, #20]
 8009912:	6103      	str	r3, [r0, #16]
 8009914:	bd10      	pop	{r4, pc}
 8009916:	bf00      	nop
 8009918:	0800b1a2 	.word	0x0800b1a2
 800991c:	0800b1b3 	.word	0x0800b1b3

08009920 <__multiply>:
 8009920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009924:	4617      	mov	r7, r2
 8009926:	690a      	ldr	r2, [r1, #16]
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	4689      	mov	r9, r1
 800992c:	429a      	cmp	r2, r3
 800992e:	bfa2      	ittt	ge
 8009930:	463b      	movge	r3, r7
 8009932:	460f      	movge	r7, r1
 8009934:	4699      	movge	r9, r3
 8009936:	693d      	ldr	r5, [r7, #16]
 8009938:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	6879      	ldr	r1, [r7, #4]
 8009940:	eb05 060a 	add.w	r6, r5, sl
 8009944:	42b3      	cmp	r3, r6
 8009946:	b085      	sub	sp, #20
 8009948:	bfb8      	it	lt
 800994a:	3101      	addlt	r1, #1
 800994c:	f7ff fede 	bl	800970c <_Balloc>
 8009950:	b930      	cbnz	r0, 8009960 <__multiply+0x40>
 8009952:	4602      	mov	r2, r0
 8009954:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009958:	4b40      	ldr	r3, [pc, #256]	@ (8009a5c <__multiply+0x13c>)
 800995a:	4841      	ldr	r0, [pc, #260]	@ (8009a60 <__multiply+0x140>)
 800995c:	f000 fc7a 	bl	800a254 <__assert_func>
 8009960:	f100 0414 	add.w	r4, r0, #20
 8009964:	4623      	mov	r3, r4
 8009966:	2200      	movs	r2, #0
 8009968:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800996c:	4573      	cmp	r3, lr
 800996e:	d320      	bcc.n	80099b2 <__multiply+0x92>
 8009970:	f107 0814 	add.w	r8, r7, #20
 8009974:	f109 0114 	add.w	r1, r9, #20
 8009978:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800997c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009980:	9302      	str	r3, [sp, #8]
 8009982:	1beb      	subs	r3, r5, r7
 8009984:	3b15      	subs	r3, #21
 8009986:	f023 0303 	bic.w	r3, r3, #3
 800998a:	3304      	adds	r3, #4
 800998c:	3715      	adds	r7, #21
 800998e:	42bd      	cmp	r5, r7
 8009990:	bf38      	it	cc
 8009992:	2304      	movcc	r3, #4
 8009994:	9301      	str	r3, [sp, #4]
 8009996:	9b02      	ldr	r3, [sp, #8]
 8009998:	9103      	str	r1, [sp, #12]
 800999a:	428b      	cmp	r3, r1
 800999c:	d80c      	bhi.n	80099b8 <__multiply+0x98>
 800999e:	2e00      	cmp	r6, #0
 80099a0:	dd03      	ble.n	80099aa <__multiply+0x8a>
 80099a2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d055      	beq.n	8009a56 <__multiply+0x136>
 80099aa:	6106      	str	r6, [r0, #16]
 80099ac:	b005      	add	sp, #20
 80099ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b2:	f843 2b04 	str.w	r2, [r3], #4
 80099b6:	e7d9      	b.n	800996c <__multiply+0x4c>
 80099b8:	f8b1 a000 	ldrh.w	sl, [r1]
 80099bc:	f1ba 0f00 	cmp.w	sl, #0
 80099c0:	d01f      	beq.n	8009a02 <__multiply+0xe2>
 80099c2:	46c4      	mov	ip, r8
 80099c4:	46a1      	mov	r9, r4
 80099c6:	2700      	movs	r7, #0
 80099c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80099cc:	f8d9 3000 	ldr.w	r3, [r9]
 80099d0:	fa1f fb82 	uxth.w	fp, r2
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	fb0a 330b 	mla	r3, sl, fp, r3
 80099da:	443b      	add	r3, r7
 80099dc:	f8d9 7000 	ldr.w	r7, [r9]
 80099e0:	0c12      	lsrs	r2, r2, #16
 80099e2:	0c3f      	lsrs	r7, r7, #16
 80099e4:	fb0a 7202 	mla	r2, sl, r2, r7
 80099e8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099f2:	4565      	cmp	r5, ip
 80099f4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80099f8:	f849 3b04 	str.w	r3, [r9], #4
 80099fc:	d8e4      	bhi.n	80099c8 <__multiply+0xa8>
 80099fe:	9b01      	ldr	r3, [sp, #4]
 8009a00:	50e7      	str	r7, [r4, r3]
 8009a02:	9b03      	ldr	r3, [sp, #12]
 8009a04:	3104      	adds	r1, #4
 8009a06:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009a0a:	f1b9 0f00 	cmp.w	r9, #0
 8009a0e:	d020      	beq.n	8009a52 <__multiply+0x132>
 8009a10:	4647      	mov	r7, r8
 8009a12:	46a4      	mov	ip, r4
 8009a14:	f04f 0a00 	mov.w	sl, #0
 8009a18:	6823      	ldr	r3, [r4, #0]
 8009a1a:	f8b7 b000 	ldrh.w	fp, [r7]
 8009a1e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	fb09 220b 	mla	r2, r9, fp, r2
 8009a28:	4452      	add	r2, sl
 8009a2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a2e:	f84c 3b04 	str.w	r3, [ip], #4
 8009a32:	f857 3b04 	ldr.w	r3, [r7], #4
 8009a36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a3a:	f8bc 3000 	ldrh.w	r3, [ip]
 8009a3e:	42bd      	cmp	r5, r7
 8009a40:	fb09 330a 	mla	r3, r9, sl, r3
 8009a44:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009a48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a4c:	d8e5      	bhi.n	8009a1a <__multiply+0xfa>
 8009a4e:	9a01      	ldr	r2, [sp, #4]
 8009a50:	50a3      	str	r3, [r4, r2]
 8009a52:	3404      	adds	r4, #4
 8009a54:	e79f      	b.n	8009996 <__multiply+0x76>
 8009a56:	3e01      	subs	r6, #1
 8009a58:	e7a1      	b.n	800999e <__multiply+0x7e>
 8009a5a:	bf00      	nop
 8009a5c:	0800b1a2 	.word	0x0800b1a2
 8009a60:	0800b1b3 	.word	0x0800b1b3

08009a64 <__pow5mult>:
 8009a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a68:	4615      	mov	r5, r2
 8009a6a:	f012 0203 	ands.w	r2, r2, #3
 8009a6e:	4607      	mov	r7, r0
 8009a70:	460e      	mov	r6, r1
 8009a72:	d007      	beq.n	8009a84 <__pow5mult+0x20>
 8009a74:	4c25      	ldr	r4, [pc, #148]	@ (8009b0c <__pow5mult+0xa8>)
 8009a76:	3a01      	subs	r2, #1
 8009a78:	2300      	movs	r3, #0
 8009a7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a7e:	f7ff fea7 	bl	80097d0 <__multadd>
 8009a82:	4606      	mov	r6, r0
 8009a84:	10ad      	asrs	r5, r5, #2
 8009a86:	d03d      	beq.n	8009b04 <__pow5mult+0xa0>
 8009a88:	69fc      	ldr	r4, [r7, #28]
 8009a8a:	b97c      	cbnz	r4, 8009aac <__pow5mult+0x48>
 8009a8c:	2010      	movs	r0, #16
 8009a8e:	f7ff fd87 	bl	80095a0 <malloc>
 8009a92:	4602      	mov	r2, r0
 8009a94:	61f8      	str	r0, [r7, #28]
 8009a96:	b928      	cbnz	r0, 8009aa4 <__pow5mult+0x40>
 8009a98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8009b10 <__pow5mult+0xac>)
 8009a9e:	481d      	ldr	r0, [pc, #116]	@ (8009b14 <__pow5mult+0xb0>)
 8009aa0:	f000 fbd8 	bl	800a254 <__assert_func>
 8009aa4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009aa8:	6004      	str	r4, [r0, #0]
 8009aaa:	60c4      	str	r4, [r0, #12]
 8009aac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009ab0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ab4:	b94c      	cbnz	r4, 8009aca <__pow5mult+0x66>
 8009ab6:	f240 2171 	movw	r1, #625	@ 0x271
 8009aba:	4638      	mov	r0, r7
 8009abc:	f7ff ff1a 	bl	80098f4 <__i2b>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ac8:	6003      	str	r3, [r0, #0]
 8009aca:	f04f 0900 	mov.w	r9, #0
 8009ace:	07eb      	lsls	r3, r5, #31
 8009ad0:	d50a      	bpl.n	8009ae8 <__pow5mult+0x84>
 8009ad2:	4631      	mov	r1, r6
 8009ad4:	4622      	mov	r2, r4
 8009ad6:	4638      	mov	r0, r7
 8009ad8:	f7ff ff22 	bl	8009920 <__multiply>
 8009adc:	4680      	mov	r8, r0
 8009ade:	4631      	mov	r1, r6
 8009ae0:	4638      	mov	r0, r7
 8009ae2:	f7ff fe53 	bl	800978c <_Bfree>
 8009ae6:	4646      	mov	r6, r8
 8009ae8:	106d      	asrs	r5, r5, #1
 8009aea:	d00b      	beq.n	8009b04 <__pow5mult+0xa0>
 8009aec:	6820      	ldr	r0, [r4, #0]
 8009aee:	b938      	cbnz	r0, 8009b00 <__pow5mult+0x9c>
 8009af0:	4622      	mov	r2, r4
 8009af2:	4621      	mov	r1, r4
 8009af4:	4638      	mov	r0, r7
 8009af6:	f7ff ff13 	bl	8009920 <__multiply>
 8009afa:	6020      	str	r0, [r4, #0]
 8009afc:	f8c0 9000 	str.w	r9, [r0]
 8009b00:	4604      	mov	r4, r0
 8009b02:	e7e4      	b.n	8009ace <__pow5mult+0x6a>
 8009b04:	4630      	mov	r0, r6
 8009b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b0a:	bf00      	nop
 8009b0c:	0800b2a4 	.word	0x0800b2a4
 8009b10:	0800b133 	.word	0x0800b133
 8009b14:	0800b1b3 	.word	0x0800b1b3

08009b18 <__lshift>:
 8009b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b1c:	460c      	mov	r4, r1
 8009b1e:	4607      	mov	r7, r0
 8009b20:	4691      	mov	r9, r2
 8009b22:	6923      	ldr	r3, [r4, #16]
 8009b24:	6849      	ldr	r1, [r1, #4]
 8009b26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b2a:	68a3      	ldr	r3, [r4, #8]
 8009b2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b30:	f108 0601 	add.w	r6, r8, #1
 8009b34:	42b3      	cmp	r3, r6
 8009b36:	db0b      	blt.n	8009b50 <__lshift+0x38>
 8009b38:	4638      	mov	r0, r7
 8009b3a:	f7ff fde7 	bl	800970c <_Balloc>
 8009b3e:	4605      	mov	r5, r0
 8009b40:	b948      	cbnz	r0, 8009b56 <__lshift+0x3e>
 8009b42:	4602      	mov	r2, r0
 8009b44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009b48:	4b27      	ldr	r3, [pc, #156]	@ (8009be8 <__lshift+0xd0>)
 8009b4a:	4828      	ldr	r0, [pc, #160]	@ (8009bec <__lshift+0xd4>)
 8009b4c:	f000 fb82 	bl	800a254 <__assert_func>
 8009b50:	3101      	adds	r1, #1
 8009b52:	005b      	lsls	r3, r3, #1
 8009b54:	e7ee      	b.n	8009b34 <__lshift+0x1c>
 8009b56:	2300      	movs	r3, #0
 8009b58:	f100 0114 	add.w	r1, r0, #20
 8009b5c:	f100 0210 	add.w	r2, r0, #16
 8009b60:	4618      	mov	r0, r3
 8009b62:	4553      	cmp	r3, sl
 8009b64:	db33      	blt.n	8009bce <__lshift+0xb6>
 8009b66:	6920      	ldr	r0, [r4, #16]
 8009b68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b6c:	f104 0314 	add.w	r3, r4, #20
 8009b70:	f019 091f 	ands.w	r9, r9, #31
 8009b74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b7c:	d02b      	beq.n	8009bd6 <__lshift+0xbe>
 8009b7e:	468a      	mov	sl, r1
 8009b80:	2200      	movs	r2, #0
 8009b82:	f1c9 0e20 	rsb	lr, r9, #32
 8009b86:	6818      	ldr	r0, [r3, #0]
 8009b88:	fa00 f009 	lsl.w	r0, r0, r9
 8009b8c:	4310      	orrs	r0, r2
 8009b8e:	f84a 0b04 	str.w	r0, [sl], #4
 8009b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b96:	459c      	cmp	ip, r3
 8009b98:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b9c:	d8f3      	bhi.n	8009b86 <__lshift+0x6e>
 8009b9e:	ebac 0304 	sub.w	r3, ip, r4
 8009ba2:	3b15      	subs	r3, #21
 8009ba4:	f023 0303 	bic.w	r3, r3, #3
 8009ba8:	3304      	adds	r3, #4
 8009baa:	f104 0015 	add.w	r0, r4, #21
 8009bae:	4560      	cmp	r0, ip
 8009bb0:	bf88      	it	hi
 8009bb2:	2304      	movhi	r3, #4
 8009bb4:	50ca      	str	r2, [r1, r3]
 8009bb6:	b10a      	cbz	r2, 8009bbc <__lshift+0xa4>
 8009bb8:	f108 0602 	add.w	r6, r8, #2
 8009bbc:	3e01      	subs	r6, #1
 8009bbe:	4638      	mov	r0, r7
 8009bc0:	4621      	mov	r1, r4
 8009bc2:	612e      	str	r6, [r5, #16]
 8009bc4:	f7ff fde2 	bl	800978c <_Bfree>
 8009bc8:	4628      	mov	r0, r5
 8009bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bce:	f842 0f04 	str.w	r0, [r2, #4]!
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	e7c5      	b.n	8009b62 <__lshift+0x4a>
 8009bd6:	3904      	subs	r1, #4
 8009bd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bdc:	459c      	cmp	ip, r3
 8009bde:	f841 2f04 	str.w	r2, [r1, #4]!
 8009be2:	d8f9      	bhi.n	8009bd8 <__lshift+0xc0>
 8009be4:	e7ea      	b.n	8009bbc <__lshift+0xa4>
 8009be6:	bf00      	nop
 8009be8:	0800b1a2 	.word	0x0800b1a2
 8009bec:	0800b1b3 	.word	0x0800b1b3

08009bf0 <__mcmp>:
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	690a      	ldr	r2, [r1, #16]
 8009bf4:	6900      	ldr	r0, [r0, #16]
 8009bf6:	b530      	push	{r4, r5, lr}
 8009bf8:	1a80      	subs	r0, r0, r2
 8009bfa:	d10e      	bne.n	8009c1a <__mcmp+0x2a>
 8009bfc:	3314      	adds	r3, #20
 8009bfe:	3114      	adds	r1, #20
 8009c00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009c04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009c08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009c0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009c10:	4295      	cmp	r5, r2
 8009c12:	d003      	beq.n	8009c1c <__mcmp+0x2c>
 8009c14:	d205      	bcs.n	8009c22 <__mcmp+0x32>
 8009c16:	f04f 30ff 	mov.w	r0, #4294967295
 8009c1a:	bd30      	pop	{r4, r5, pc}
 8009c1c:	42a3      	cmp	r3, r4
 8009c1e:	d3f3      	bcc.n	8009c08 <__mcmp+0x18>
 8009c20:	e7fb      	b.n	8009c1a <__mcmp+0x2a>
 8009c22:	2001      	movs	r0, #1
 8009c24:	e7f9      	b.n	8009c1a <__mcmp+0x2a>
	...

08009c28 <__mdiff>:
 8009c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2c:	4689      	mov	r9, r1
 8009c2e:	4606      	mov	r6, r0
 8009c30:	4611      	mov	r1, r2
 8009c32:	4648      	mov	r0, r9
 8009c34:	4614      	mov	r4, r2
 8009c36:	f7ff ffdb 	bl	8009bf0 <__mcmp>
 8009c3a:	1e05      	subs	r5, r0, #0
 8009c3c:	d112      	bne.n	8009c64 <__mdiff+0x3c>
 8009c3e:	4629      	mov	r1, r5
 8009c40:	4630      	mov	r0, r6
 8009c42:	f7ff fd63 	bl	800970c <_Balloc>
 8009c46:	4602      	mov	r2, r0
 8009c48:	b928      	cbnz	r0, 8009c56 <__mdiff+0x2e>
 8009c4a:	f240 2137 	movw	r1, #567	@ 0x237
 8009c4e:	4b3e      	ldr	r3, [pc, #248]	@ (8009d48 <__mdiff+0x120>)
 8009c50:	483e      	ldr	r0, [pc, #248]	@ (8009d4c <__mdiff+0x124>)
 8009c52:	f000 faff 	bl	800a254 <__assert_func>
 8009c56:	2301      	movs	r3, #1
 8009c58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c5c:	4610      	mov	r0, r2
 8009c5e:	b003      	add	sp, #12
 8009c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c64:	bfbc      	itt	lt
 8009c66:	464b      	movlt	r3, r9
 8009c68:	46a1      	movlt	r9, r4
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009c70:	bfba      	itte	lt
 8009c72:	461c      	movlt	r4, r3
 8009c74:	2501      	movlt	r5, #1
 8009c76:	2500      	movge	r5, #0
 8009c78:	f7ff fd48 	bl	800970c <_Balloc>
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	b918      	cbnz	r0, 8009c88 <__mdiff+0x60>
 8009c80:	f240 2145 	movw	r1, #581	@ 0x245
 8009c84:	4b30      	ldr	r3, [pc, #192]	@ (8009d48 <__mdiff+0x120>)
 8009c86:	e7e3      	b.n	8009c50 <__mdiff+0x28>
 8009c88:	f100 0b14 	add.w	fp, r0, #20
 8009c8c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009c90:	f109 0310 	add.w	r3, r9, #16
 8009c94:	60c5      	str	r5, [r0, #12]
 8009c96:	f04f 0c00 	mov.w	ip, #0
 8009c9a:	f109 0514 	add.w	r5, r9, #20
 8009c9e:	46d9      	mov	r9, fp
 8009ca0:	6926      	ldr	r6, [r4, #16]
 8009ca2:	f104 0e14 	add.w	lr, r4, #20
 8009ca6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009caa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009cae:	9301      	str	r3, [sp, #4]
 8009cb0:	9b01      	ldr	r3, [sp, #4]
 8009cb2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009cb6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009cba:	b281      	uxth	r1, r0
 8009cbc:	9301      	str	r3, [sp, #4]
 8009cbe:	fa1f f38a 	uxth.w	r3, sl
 8009cc2:	1a5b      	subs	r3, r3, r1
 8009cc4:	0c00      	lsrs	r0, r0, #16
 8009cc6:	4463      	add	r3, ip
 8009cc8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009ccc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009cd6:	4576      	cmp	r6, lr
 8009cd8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009cdc:	f849 3b04 	str.w	r3, [r9], #4
 8009ce0:	d8e6      	bhi.n	8009cb0 <__mdiff+0x88>
 8009ce2:	1b33      	subs	r3, r6, r4
 8009ce4:	3b15      	subs	r3, #21
 8009ce6:	f023 0303 	bic.w	r3, r3, #3
 8009cea:	3415      	adds	r4, #21
 8009cec:	3304      	adds	r3, #4
 8009cee:	42a6      	cmp	r6, r4
 8009cf0:	bf38      	it	cc
 8009cf2:	2304      	movcc	r3, #4
 8009cf4:	441d      	add	r5, r3
 8009cf6:	445b      	add	r3, fp
 8009cf8:	461e      	mov	r6, r3
 8009cfa:	462c      	mov	r4, r5
 8009cfc:	4544      	cmp	r4, r8
 8009cfe:	d30e      	bcc.n	8009d1e <__mdiff+0xf6>
 8009d00:	f108 0103 	add.w	r1, r8, #3
 8009d04:	1b49      	subs	r1, r1, r5
 8009d06:	f021 0103 	bic.w	r1, r1, #3
 8009d0a:	3d03      	subs	r5, #3
 8009d0c:	45a8      	cmp	r8, r5
 8009d0e:	bf38      	it	cc
 8009d10:	2100      	movcc	r1, #0
 8009d12:	440b      	add	r3, r1
 8009d14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d18:	b199      	cbz	r1, 8009d42 <__mdiff+0x11a>
 8009d1a:	6117      	str	r7, [r2, #16]
 8009d1c:	e79e      	b.n	8009c5c <__mdiff+0x34>
 8009d1e:	46e6      	mov	lr, ip
 8009d20:	f854 1b04 	ldr.w	r1, [r4], #4
 8009d24:	fa1f fc81 	uxth.w	ip, r1
 8009d28:	44f4      	add	ip, lr
 8009d2a:	0c08      	lsrs	r0, r1, #16
 8009d2c:	4471      	add	r1, lr
 8009d2e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009d32:	b289      	uxth	r1, r1
 8009d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009d38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009d3c:	f846 1b04 	str.w	r1, [r6], #4
 8009d40:	e7dc      	b.n	8009cfc <__mdiff+0xd4>
 8009d42:	3f01      	subs	r7, #1
 8009d44:	e7e6      	b.n	8009d14 <__mdiff+0xec>
 8009d46:	bf00      	nop
 8009d48:	0800b1a2 	.word	0x0800b1a2
 8009d4c:	0800b1b3 	.word	0x0800b1b3

08009d50 <__d2b>:
 8009d50:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009d54:	2101      	movs	r1, #1
 8009d56:	4690      	mov	r8, r2
 8009d58:	4699      	mov	r9, r3
 8009d5a:	9e08      	ldr	r6, [sp, #32]
 8009d5c:	f7ff fcd6 	bl	800970c <_Balloc>
 8009d60:	4604      	mov	r4, r0
 8009d62:	b930      	cbnz	r0, 8009d72 <__d2b+0x22>
 8009d64:	4602      	mov	r2, r0
 8009d66:	f240 310f 	movw	r1, #783	@ 0x30f
 8009d6a:	4b23      	ldr	r3, [pc, #140]	@ (8009df8 <__d2b+0xa8>)
 8009d6c:	4823      	ldr	r0, [pc, #140]	@ (8009dfc <__d2b+0xac>)
 8009d6e:	f000 fa71 	bl	800a254 <__assert_func>
 8009d72:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d76:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d7a:	b10d      	cbz	r5, 8009d80 <__d2b+0x30>
 8009d7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d80:	9301      	str	r3, [sp, #4]
 8009d82:	f1b8 0300 	subs.w	r3, r8, #0
 8009d86:	d024      	beq.n	8009dd2 <__d2b+0x82>
 8009d88:	4668      	mov	r0, sp
 8009d8a:	9300      	str	r3, [sp, #0]
 8009d8c:	f7ff fd85 	bl	800989a <__lo0bits>
 8009d90:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d94:	b1d8      	cbz	r0, 8009dce <__d2b+0x7e>
 8009d96:	f1c0 0320 	rsb	r3, r0, #32
 8009d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d9e:	430b      	orrs	r3, r1
 8009da0:	40c2      	lsrs	r2, r0
 8009da2:	6163      	str	r3, [r4, #20]
 8009da4:	9201      	str	r2, [sp, #4]
 8009da6:	9b01      	ldr	r3, [sp, #4]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	bf0c      	ite	eq
 8009dac:	2201      	moveq	r2, #1
 8009dae:	2202      	movne	r2, #2
 8009db0:	61a3      	str	r3, [r4, #24]
 8009db2:	6122      	str	r2, [r4, #16]
 8009db4:	b1ad      	cbz	r5, 8009de2 <__d2b+0x92>
 8009db6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009dba:	4405      	add	r5, r0
 8009dbc:	6035      	str	r5, [r6, #0]
 8009dbe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009dc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dc4:	6018      	str	r0, [r3, #0]
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	b002      	add	sp, #8
 8009dca:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009dce:	6161      	str	r1, [r4, #20]
 8009dd0:	e7e9      	b.n	8009da6 <__d2b+0x56>
 8009dd2:	a801      	add	r0, sp, #4
 8009dd4:	f7ff fd61 	bl	800989a <__lo0bits>
 8009dd8:	9b01      	ldr	r3, [sp, #4]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	6163      	str	r3, [r4, #20]
 8009dde:	3020      	adds	r0, #32
 8009de0:	e7e7      	b.n	8009db2 <__d2b+0x62>
 8009de2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009de6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009dea:	6030      	str	r0, [r6, #0]
 8009dec:	6918      	ldr	r0, [r3, #16]
 8009dee:	f7ff fd35 	bl	800985c <__hi0bits>
 8009df2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009df6:	e7e4      	b.n	8009dc2 <__d2b+0x72>
 8009df8:	0800b1a2 	.word	0x0800b1a2
 8009dfc:	0800b1b3 	.word	0x0800b1b3

08009e00 <__ssputs_r>:
 8009e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e04:	461f      	mov	r7, r3
 8009e06:	688e      	ldr	r6, [r1, #8]
 8009e08:	4682      	mov	sl, r0
 8009e0a:	42be      	cmp	r6, r7
 8009e0c:	460c      	mov	r4, r1
 8009e0e:	4690      	mov	r8, r2
 8009e10:	680b      	ldr	r3, [r1, #0]
 8009e12:	d82d      	bhi.n	8009e70 <__ssputs_r+0x70>
 8009e14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009e1c:	d026      	beq.n	8009e6c <__ssputs_r+0x6c>
 8009e1e:	6965      	ldr	r5, [r4, #20]
 8009e20:	6909      	ldr	r1, [r1, #16]
 8009e22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e26:	eba3 0901 	sub.w	r9, r3, r1
 8009e2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e2e:	1c7b      	adds	r3, r7, #1
 8009e30:	444b      	add	r3, r9
 8009e32:	106d      	asrs	r5, r5, #1
 8009e34:	429d      	cmp	r5, r3
 8009e36:	bf38      	it	cc
 8009e38:	461d      	movcc	r5, r3
 8009e3a:	0553      	lsls	r3, r2, #21
 8009e3c:	d527      	bpl.n	8009e8e <__ssputs_r+0x8e>
 8009e3e:	4629      	mov	r1, r5
 8009e40:	f7ff fbd8 	bl	80095f4 <_malloc_r>
 8009e44:	4606      	mov	r6, r0
 8009e46:	b360      	cbz	r0, 8009ea2 <__ssputs_r+0xa2>
 8009e48:	464a      	mov	r2, r9
 8009e4a:	6921      	ldr	r1, [r4, #16]
 8009e4c:	f7fe fcf5 	bl	800883a <memcpy>
 8009e50:	89a3      	ldrh	r3, [r4, #12]
 8009e52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e5a:	81a3      	strh	r3, [r4, #12]
 8009e5c:	6126      	str	r6, [r4, #16]
 8009e5e:	444e      	add	r6, r9
 8009e60:	6026      	str	r6, [r4, #0]
 8009e62:	463e      	mov	r6, r7
 8009e64:	6165      	str	r5, [r4, #20]
 8009e66:	eba5 0509 	sub.w	r5, r5, r9
 8009e6a:	60a5      	str	r5, [r4, #8]
 8009e6c:	42be      	cmp	r6, r7
 8009e6e:	d900      	bls.n	8009e72 <__ssputs_r+0x72>
 8009e70:	463e      	mov	r6, r7
 8009e72:	4632      	mov	r2, r6
 8009e74:	4641      	mov	r1, r8
 8009e76:	6820      	ldr	r0, [r4, #0]
 8009e78:	f000 f9c2 	bl	800a200 <memmove>
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	68a3      	ldr	r3, [r4, #8]
 8009e80:	1b9b      	subs	r3, r3, r6
 8009e82:	60a3      	str	r3, [r4, #8]
 8009e84:	6823      	ldr	r3, [r4, #0]
 8009e86:	4433      	add	r3, r6
 8009e88:	6023      	str	r3, [r4, #0]
 8009e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e8e:	462a      	mov	r2, r5
 8009e90:	f000 fa24 	bl	800a2dc <_realloc_r>
 8009e94:	4606      	mov	r6, r0
 8009e96:	2800      	cmp	r0, #0
 8009e98:	d1e0      	bne.n	8009e5c <__ssputs_r+0x5c>
 8009e9a:	4650      	mov	r0, sl
 8009e9c:	6921      	ldr	r1, [r4, #16]
 8009e9e:	f7ff fb37 	bl	8009510 <_free_r>
 8009ea2:	230c      	movs	r3, #12
 8009ea4:	f8ca 3000 	str.w	r3, [sl]
 8009ea8:	89a3      	ldrh	r3, [r4, #12]
 8009eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8009eae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009eb2:	81a3      	strh	r3, [r4, #12]
 8009eb4:	e7e9      	b.n	8009e8a <__ssputs_r+0x8a>
	...

08009eb8 <_svfiprintf_r>:
 8009eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ebc:	4698      	mov	r8, r3
 8009ebe:	898b      	ldrh	r3, [r1, #12]
 8009ec0:	4607      	mov	r7, r0
 8009ec2:	061b      	lsls	r3, r3, #24
 8009ec4:	460d      	mov	r5, r1
 8009ec6:	4614      	mov	r4, r2
 8009ec8:	b09d      	sub	sp, #116	@ 0x74
 8009eca:	d510      	bpl.n	8009eee <_svfiprintf_r+0x36>
 8009ecc:	690b      	ldr	r3, [r1, #16]
 8009ece:	b973      	cbnz	r3, 8009eee <_svfiprintf_r+0x36>
 8009ed0:	2140      	movs	r1, #64	@ 0x40
 8009ed2:	f7ff fb8f 	bl	80095f4 <_malloc_r>
 8009ed6:	6028      	str	r0, [r5, #0]
 8009ed8:	6128      	str	r0, [r5, #16]
 8009eda:	b930      	cbnz	r0, 8009eea <_svfiprintf_r+0x32>
 8009edc:	230c      	movs	r3, #12
 8009ede:	603b      	str	r3, [r7, #0]
 8009ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee4:	b01d      	add	sp, #116	@ 0x74
 8009ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eea:	2340      	movs	r3, #64	@ 0x40
 8009eec:	616b      	str	r3, [r5, #20]
 8009eee:	2300      	movs	r3, #0
 8009ef0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ef2:	2320      	movs	r3, #32
 8009ef4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ef8:	2330      	movs	r3, #48	@ 0x30
 8009efa:	f04f 0901 	mov.w	r9, #1
 8009efe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f02:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a09c <_svfiprintf_r+0x1e4>
 8009f06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f0a:	4623      	mov	r3, r4
 8009f0c:	469a      	mov	sl, r3
 8009f0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f12:	b10a      	cbz	r2, 8009f18 <_svfiprintf_r+0x60>
 8009f14:	2a25      	cmp	r2, #37	@ 0x25
 8009f16:	d1f9      	bne.n	8009f0c <_svfiprintf_r+0x54>
 8009f18:	ebba 0b04 	subs.w	fp, sl, r4
 8009f1c:	d00b      	beq.n	8009f36 <_svfiprintf_r+0x7e>
 8009f1e:	465b      	mov	r3, fp
 8009f20:	4622      	mov	r2, r4
 8009f22:	4629      	mov	r1, r5
 8009f24:	4638      	mov	r0, r7
 8009f26:	f7ff ff6b 	bl	8009e00 <__ssputs_r>
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	f000 80a7 	beq.w	800a07e <_svfiprintf_r+0x1c6>
 8009f30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f32:	445a      	add	r2, fp
 8009f34:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f36:	f89a 3000 	ldrb.w	r3, [sl]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f000 809f 	beq.w	800a07e <_svfiprintf_r+0x1c6>
 8009f40:	2300      	movs	r3, #0
 8009f42:	f04f 32ff 	mov.w	r2, #4294967295
 8009f46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f4a:	f10a 0a01 	add.w	sl, sl, #1
 8009f4e:	9304      	str	r3, [sp, #16]
 8009f50:	9307      	str	r3, [sp, #28]
 8009f52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f56:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f58:	4654      	mov	r4, sl
 8009f5a:	2205      	movs	r2, #5
 8009f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f60:	484e      	ldr	r0, [pc, #312]	@ (800a09c <_svfiprintf_r+0x1e4>)
 8009f62:	f7fe fc5c 	bl	800881e <memchr>
 8009f66:	9a04      	ldr	r2, [sp, #16]
 8009f68:	b9d8      	cbnz	r0, 8009fa2 <_svfiprintf_r+0xea>
 8009f6a:	06d0      	lsls	r0, r2, #27
 8009f6c:	bf44      	itt	mi
 8009f6e:	2320      	movmi	r3, #32
 8009f70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f74:	0711      	lsls	r1, r2, #28
 8009f76:	bf44      	itt	mi
 8009f78:	232b      	movmi	r3, #43	@ 0x2b
 8009f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8009f82:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f84:	d015      	beq.n	8009fb2 <_svfiprintf_r+0xfa>
 8009f86:	4654      	mov	r4, sl
 8009f88:	2000      	movs	r0, #0
 8009f8a:	f04f 0c0a 	mov.w	ip, #10
 8009f8e:	9a07      	ldr	r2, [sp, #28]
 8009f90:	4621      	mov	r1, r4
 8009f92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f96:	3b30      	subs	r3, #48	@ 0x30
 8009f98:	2b09      	cmp	r3, #9
 8009f9a:	d94b      	bls.n	800a034 <_svfiprintf_r+0x17c>
 8009f9c:	b1b0      	cbz	r0, 8009fcc <_svfiprintf_r+0x114>
 8009f9e:	9207      	str	r2, [sp, #28]
 8009fa0:	e014      	b.n	8009fcc <_svfiprintf_r+0x114>
 8009fa2:	eba0 0308 	sub.w	r3, r0, r8
 8009fa6:	fa09 f303 	lsl.w	r3, r9, r3
 8009faa:	4313      	orrs	r3, r2
 8009fac:	46a2      	mov	sl, r4
 8009fae:	9304      	str	r3, [sp, #16]
 8009fb0:	e7d2      	b.n	8009f58 <_svfiprintf_r+0xa0>
 8009fb2:	9b03      	ldr	r3, [sp, #12]
 8009fb4:	1d19      	adds	r1, r3, #4
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	9103      	str	r1, [sp, #12]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	bfbb      	ittet	lt
 8009fbe:	425b      	neglt	r3, r3
 8009fc0:	f042 0202 	orrlt.w	r2, r2, #2
 8009fc4:	9307      	strge	r3, [sp, #28]
 8009fc6:	9307      	strlt	r3, [sp, #28]
 8009fc8:	bfb8      	it	lt
 8009fca:	9204      	strlt	r2, [sp, #16]
 8009fcc:	7823      	ldrb	r3, [r4, #0]
 8009fce:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fd0:	d10a      	bne.n	8009fe8 <_svfiprintf_r+0x130>
 8009fd2:	7863      	ldrb	r3, [r4, #1]
 8009fd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fd6:	d132      	bne.n	800a03e <_svfiprintf_r+0x186>
 8009fd8:	9b03      	ldr	r3, [sp, #12]
 8009fda:	3402      	adds	r4, #2
 8009fdc:	1d1a      	adds	r2, r3, #4
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	9203      	str	r2, [sp, #12]
 8009fe2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009fe6:	9305      	str	r3, [sp, #20]
 8009fe8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a0a0 <_svfiprintf_r+0x1e8>
 8009fec:	2203      	movs	r2, #3
 8009fee:	4650      	mov	r0, sl
 8009ff0:	7821      	ldrb	r1, [r4, #0]
 8009ff2:	f7fe fc14 	bl	800881e <memchr>
 8009ff6:	b138      	cbz	r0, 800a008 <_svfiprintf_r+0x150>
 8009ff8:	2240      	movs	r2, #64	@ 0x40
 8009ffa:	9b04      	ldr	r3, [sp, #16]
 8009ffc:	eba0 000a 	sub.w	r0, r0, sl
 800a000:	4082      	lsls	r2, r0
 800a002:	4313      	orrs	r3, r2
 800a004:	3401      	adds	r4, #1
 800a006:	9304      	str	r3, [sp, #16]
 800a008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a00c:	2206      	movs	r2, #6
 800a00e:	4825      	ldr	r0, [pc, #148]	@ (800a0a4 <_svfiprintf_r+0x1ec>)
 800a010:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a014:	f7fe fc03 	bl	800881e <memchr>
 800a018:	2800      	cmp	r0, #0
 800a01a:	d036      	beq.n	800a08a <_svfiprintf_r+0x1d2>
 800a01c:	4b22      	ldr	r3, [pc, #136]	@ (800a0a8 <_svfiprintf_r+0x1f0>)
 800a01e:	bb1b      	cbnz	r3, 800a068 <_svfiprintf_r+0x1b0>
 800a020:	9b03      	ldr	r3, [sp, #12]
 800a022:	3307      	adds	r3, #7
 800a024:	f023 0307 	bic.w	r3, r3, #7
 800a028:	3308      	adds	r3, #8
 800a02a:	9303      	str	r3, [sp, #12]
 800a02c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a02e:	4433      	add	r3, r6
 800a030:	9309      	str	r3, [sp, #36]	@ 0x24
 800a032:	e76a      	b.n	8009f0a <_svfiprintf_r+0x52>
 800a034:	460c      	mov	r4, r1
 800a036:	2001      	movs	r0, #1
 800a038:	fb0c 3202 	mla	r2, ip, r2, r3
 800a03c:	e7a8      	b.n	8009f90 <_svfiprintf_r+0xd8>
 800a03e:	2300      	movs	r3, #0
 800a040:	f04f 0c0a 	mov.w	ip, #10
 800a044:	4619      	mov	r1, r3
 800a046:	3401      	adds	r4, #1
 800a048:	9305      	str	r3, [sp, #20]
 800a04a:	4620      	mov	r0, r4
 800a04c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a050:	3a30      	subs	r2, #48	@ 0x30
 800a052:	2a09      	cmp	r2, #9
 800a054:	d903      	bls.n	800a05e <_svfiprintf_r+0x1a6>
 800a056:	2b00      	cmp	r3, #0
 800a058:	d0c6      	beq.n	8009fe8 <_svfiprintf_r+0x130>
 800a05a:	9105      	str	r1, [sp, #20]
 800a05c:	e7c4      	b.n	8009fe8 <_svfiprintf_r+0x130>
 800a05e:	4604      	mov	r4, r0
 800a060:	2301      	movs	r3, #1
 800a062:	fb0c 2101 	mla	r1, ip, r1, r2
 800a066:	e7f0      	b.n	800a04a <_svfiprintf_r+0x192>
 800a068:	ab03      	add	r3, sp, #12
 800a06a:	9300      	str	r3, [sp, #0]
 800a06c:	462a      	mov	r2, r5
 800a06e:	4638      	mov	r0, r7
 800a070:	4b0e      	ldr	r3, [pc, #56]	@ (800a0ac <_svfiprintf_r+0x1f4>)
 800a072:	a904      	add	r1, sp, #16
 800a074:	f7fd fe34 	bl	8007ce0 <_printf_float>
 800a078:	1c42      	adds	r2, r0, #1
 800a07a:	4606      	mov	r6, r0
 800a07c:	d1d6      	bne.n	800a02c <_svfiprintf_r+0x174>
 800a07e:	89ab      	ldrh	r3, [r5, #12]
 800a080:	065b      	lsls	r3, r3, #25
 800a082:	f53f af2d 	bmi.w	8009ee0 <_svfiprintf_r+0x28>
 800a086:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a088:	e72c      	b.n	8009ee4 <_svfiprintf_r+0x2c>
 800a08a:	ab03      	add	r3, sp, #12
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	462a      	mov	r2, r5
 800a090:	4638      	mov	r0, r7
 800a092:	4b06      	ldr	r3, [pc, #24]	@ (800a0ac <_svfiprintf_r+0x1f4>)
 800a094:	a904      	add	r1, sp, #16
 800a096:	f7fe f8c1 	bl	800821c <_printf_i>
 800a09a:	e7ed      	b.n	800a078 <_svfiprintf_r+0x1c0>
 800a09c:	0800b20c 	.word	0x0800b20c
 800a0a0:	0800b212 	.word	0x0800b212
 800a0a4:	0800b216 	.word	0x0800b216
 800a0a8:	08007ce1 	.word	0x08007ce1
 800a0ac:	08009e01 	.word	0x08009e01

0800a0b0 <__sflush_r>:
 800a0b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b6:	0716      	lsls	r6, r2, #28
 800a0b8:	4605      	mov	r5, r0
 800a0ba:	460c      	mov	r4, r1
 800a0bc:	d454      	bmi.n	800a168 <__sflush_r+0xb8>
 800a0be:	684b      	ldr	r3, [r1, #4]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	dc02      	bgt.n	800a0ca <__sflush_r+0x1a>
 800a0c4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	dd48      	ble.n	800a15c <__sflush_r+0xac>
 800a0ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0cc:	2e00      	cmp	r6, #0
 800a0ce:	d045      	beq.n	800a15c <__sflush_r+0xac>
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a0d6:	682f      	ldr	r7, [r5, #0]
 800a0d8:	6a21      	ldr	r1, [r4, #32]
 800a0da:	602b      	str	r3, [r5, #0]
 800a0dc:	d030      	beq.n	800a140 <__sflush_r+0x90>
 800a0de:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a0e0:	89a3      	ldrh	r3, [r4, #12]
 800a0e2:	0759      	lsls	r1, r3, #29
 800a0e4:	d505      	bpl.n	800a0f2 <__sflush_r+0x42>
 800a0e6:	6863      	ldr	r3, [r4, #4]
 800a0e8:	1ad2      	subs	r2, r2, r3
 800a0ea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a0ec:	b10b      	cbz	r3, 800a0f2 <__sflush_r+0x42>
 800a0ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a0f0:	1ad2      	subs	r2, r2, r3
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0f8:	6a21      	ldr	r1, [r4, #32]
 800a0fa:	47b0      	blx	r6
 800a0fc:	1c43      	adds	r3, r0, #1
 800a0fe:	89a3      	ldrh	r3, [r4, #12]
 800a100:	d106      	bne.n	800a110 <__sflush_r+0x60>
 800a102:	6829      	ldr	r1, [r5, #0]
 800a104:	291d      	cmp	r1, #29
 800a106:	d82b      	bhi.n	800a160 <__sflush_r+0xb0>
 800a108:	4a28      	ldr	r2, [pc, #160]	@ (800a1ac <__sflush_r+0xfc>)
 800a10a:	40ca      	lsrs	r2, r1
 800a10c:	07d6      	lsls	r6, r2, #31
 800a10e:	d527      	bpl.n	800a160 <__sflush_r+0xb0>
 800a110:	2200      	movs	r2, #0
 800a112:	6062      	str	r2, [r4, #4]
 800a114:	6922      	ldr	r2, [r4, #16]
 800a116:	04d9      	lsls	r1, r3, #19
 800a118:	6022      	str	r2, [r4, #0]
 800a11a:	d504      	bpl.n	800a126 <__sflush_r+0x76>
 800a11c:	1c42      	adds	r2, r0, #1
 800a11e:	d101      	bne.n	800a124 <__sflush_r+0x74>
 800a120:	682b      	ldr	r3, [r5, #0]
 800a122:	b903      	cbnz	r3, 800a126 <__sflush_r+0x76>
 800a124:	6560      	str	r0, [r4, #84]	@ 0x54
 800a126:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a128:	602f      	str	r7, [r5, #0]
 800a12a:	b1b9      	cbz	r1, 800a15c <__sflush_r+0xac>
 800a12c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a130:	4299      	cmp	r1, r3
 800a132:	d002      	beq.n	800a13a <__sflush_r+0x8a>
 800a134:	4628      	mov	r0, r5
 800a136:	f7ff f9eb 	bl	8009510 <_free_r>
 800a13a:	2300      	movs	r3, #0
 800a13c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a13e:	e00d      	b.n	800a15c <__sflush_r+0xac>
 800a140:	2301      	movs	r3, #1
 800a142:	4628      	mov	r0, r5
 800a144:	47b0      	blx	r6
 800a146:	4602      	mov	r2, r0
 800a148:	1c50      	adds	r0, r2, #1
 800a14a:	d1c9      	bne.n	800a0e0 <__sflush_r+0x30>
 800a14c:	682b      	ldr	r3, [r5, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d0c6      	beq.n	800a0e0 <__sflush_r+0x30>
 800a152:	2b1d      	cmp	r3, #29
 800a154:	d001      	beq.n	800a15a <__sflush_r+0xaa>
 800a156:	2b16      	cmp	r3, #22
 800a158:	d11d      	bne.n	800a196 <__sflush_r+0xe6>
 800a15a:	602f      	str	r7, [r5, #0]
 800a15c:	2000      	movs	r0, #0
 800a15e:	e021      	b.n	800a1a4 <__sflush_r+0xf4>
 800a160:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a164:	b21b      	sxth	r3, r3
 800a166:	e01a      	b.n	800a19e <__sflush_r+0xee>
 800a168:	690f      	ldr	r7, [r1, #16]
 800a16a:	2f00      	cmp	r7, #0
 800a16c:	d0f6      	beq.n	800a15c <__sflush_r+0xac>
 800a16e:	0793      	lsls	r3, r2, #30
 800a170:	bf18      	it	ne
 800a172:	2300      	movne	r3, #0
 800a174:	680e      	ldr	r6, [r1, #0]
 800a176:	bf08      	it	eq
 800a178:	694b      	ldreq	r3, [r1, #20]
 800a17a:	1bf6      	subs	r6, r6, r7
 800a17c:	600f      	str	r7, [r1, #0]
 800a17e:	608b      	str	r3, [r1, #8]
 800a180:	2e00      	cmp	r6, #0
 800a182:	ddeb      	ble.n	800a15c <__sflush_r+0xac>
 800a184:	4633      	mov	r3, r6
 800a186:	463a      	mov	r2, r7
 800a188:	4628      	mov	r0, r5
 800a18a:	6a21      	ldr	r1, [r4, #32]
 800a18c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a190:	47e0      	blx	ip
 800a192:	2800      	cmp	r0, #0
 800a194:	dc07      	bgt.n	800a1a6 <__sflush_r+0xf6>
 800a196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a19a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a19e:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a2:	81a3      	strh	r3, [r4, #12]
 800a1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1a6:	4407      	add	r7, r0
 800a1a8:	1a36      	subs	r6, r6, r0
 800a1aa:	e7e9      	b.n	800a180 <__sflush_r+0xd0>
 800a1ac:	20400001 	.word	0x20400001

0800a1b0 <_fflush_r>:
 800a1b0:	b538      	push	{r3, r4, r5, lr}
 800a1b2:	690b      	ldr	r3, [r1, #16]
 800a1b4:	4605      	mov	r5, r0
 800a1b6:	460c      	mov	r4, r1
 800a1b8:	b913      	cbnz	r3, 800a1c0 <_fflush_r+0x10>
 800a1ba:	2500      	movs	r5, #0
 800a1bc:	4628      	mov	r0, r5
 800a1be:	bd38      	pop	{r3, r4, r5, pc}
 800a1c0:	b118      	cbz	r0, 800a1ca <_fflush_r+0x1a>
 800a1c2:	6a03      	ldr	r3, [r0, #32]
 800a1c4:	b90b      	cbnz	r3, 800a1ca <_fflush_r+0x1a>
 800a1c6:	f7fe f9d3 	bl	8008570 <__sinit>
 800a1ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d0f3      	beq.n	800a1ba <_fflush_r+0xa>
 800a1d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a1d4:	07d0      	lsls	r0, r2, #31
 800a1d6:	d404      	bmi.n	800a1e2 <_fflush_r+0x32>
 800a1d8:	0599      	lsls	r1, r3, #22
 800a1da:	d402      	bmi.n	800a1e2 <_fflush_r+0x32>
 800a1dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1de:	f7fe fb14 	bl	800880a <__retarget_lock_acquire_recursive>
 800a1e2:	4628      	mov	r0, r5
 800a1e4:	4621      	mov	r1, r4
 800a1e6:	f7ff ff63 	bl	800a0b0 <__sflush_r>
 800a1ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1ec:	4605      	mov	r5, r0
 800a1ee:	07da      	lsls	r2, r3, #31
 800a1f0:	d4e4      	bmi.n	800a1bc <_fflush_r+0xc>
 800a1f2:	89a3      	ldrh	r3, [r4, #12]
 800a1f4:	059b      	lsls	r3, r3, #22
 800a1f6:	d4e1      	bmi.n	800a1bc <_fflush_r+0xc>
 800a1f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1fa:	f7fe fb07 	bl	800880c <__retarget_lock_release_recursive>
 800a1fe:	e7dd      	b.n	800a1bc <_fflush_r+0xc>

0800a200 <memmove>:
 800a200:	4288      	cmp	r0, r1
 800a202:	b510      	push	{r4, lr}
 800a204:	eb01 0402 	add.w	r4, r1, r2
 800a208:	d902      	bls.n	800a210 <memmove+0x10>
 800a20a:	4284      	cmp	r4, r0
 800a20c:	4623      	mov	r3, r4
 800a20e:	d807      	bhi.n	800a220 <memmove+0x20>
 800a210:	1e43      	subs	r3, r0, #1
 800a212:	42a1      	cmp	r1, r4
 800a214:	d008      	beq.n	800a228 <memmove+0x28>
 800a216:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a21a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a21e:	e7f8      	b.n	800a212 <memmove+0x12>
 800a220:	4601      	mov	r1, r0
 800a222:	4402      	add	r2, r0
 800a224:	428a      	cmp	r2, r1
 800a226:	d100      	bne.n	800a22a <memmove+0x2a>
 800a228:	bd10      	pop	{r4, pc}
 800a22a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a22e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a232:	e7f7      	b.n	800a224 <memmove+0x24>

0800a234 <_sbrk_r>:
 800a234:	b538      	push	{r3, r4, r5, lr}
 800a236:	2300      	movs	r3, #0
 800a238:	4d05      	ldr	r5, [pc, #20]	@ (800a250 <_sbrk_r+0x1c>)
 800a23a:	4604      	mov	r4, r0
 800a23c:	4608      	mov	r0, r1
 800a23e:	602b      	str	r3, [r5, #0]
 800a240:	f7f8 fbac 	bl	800299c <_sbrk>
 800a244:	1c43      	adds	r3, r0, #1
 800a246:	d102      	bne.n	800a24e <_sbrk_r+0x1a>
 800a248:	682b      	ldr	r3, [r5, #0]
 800a24a:	b103      	cbz	r3, 800a24e <_sbrk_r+0x1a>
 800a24c:	6023      	str	r3, [r4, #0]
 800a24e:	bd38      	pop	{r3, r4, r5, pc}
 800a250:	20000a48 	.word	0x20000a48

0800a254 <__assert_func>:
 800a254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a256:	4614      	mov	r4, r2
 800a258:	461a      	mov	r2, r3
 800a25a:	4b09      	ldr	r3, [pc, #36]	@ (800a280 <__assert_func+0x2c>)
 800a25c:	4605      	mov	r5, r0
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	68d8      	ldr	r0, [r3, #12]
 800a262:	b14c      	cbz	r4, 800a278 <__assert_func+0x24>
 800a264:	4b07      	ldr	r3, [pc, #28]	@ (800a284 <__assert_func+0x30>)
 800a266:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a26a:	9100      	str	r1, [sp, #0]
 800a26c:	462b      	mov	r3, r5
 800a26e:	4906      	ldr	r1, [pc, #24]	@ (800a288 <__assert_func+0x34>)
 800a270:	f000 f870 	bl	800a354 <fiprintf>
 800a274:	f000 f880 	bl	800a378 <abort>
 800a278:	4b04      	ldr	r3, [pc, #16]	@ (800a28c <__assert_func+0x38>)
 800a27a:	461c      	mov	r4, r3
 800a27c:	e7f3      	b.n	800a266 <__assert_func+0x12>
 800a27e:	bf00      	nop
 800a280:	20000018 	.word	0x20000018
 800a284:	0800b227 	.word	0x0800b227
 800a288:	0800b234 	.word	0x0800b234
 800a28c:	0800b0b8 	.word	0x0800b0b8

0800a290 <_calloc_r>:
 800a290:	b570      	push	{r4, r5, r6, lr}
 800a292:	fba1 5402 	umull	r5, r4, r1, r2
 800a296:	b934      	cbnz	r4, 800a2a6 <_calloc_r+0x16>
 800a298:	4629      	mov	r1, r5
 800a29a:	f7ff f9ab 	bl	80095f4 <_malloc_r>
 800a29e:	4606      	mov	r6, r0
 800a2a0:	b928      	cbnz	r0, 800a2ae <_calloc_r+0x1e>
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	bd70      	pop	{r4, r5, r6, pc}
 800a2a6:	220c      	movs	r2, #12
 800a2a8:	2600      	movs	r6, #0
 800a2aa:	6002      	str	r2, [r0, #0]
 800a2ac:	e7f9      	b.n	800a2a2 <_calloc_r+0x12>
 800a2ae:	462a      	mov	r2, r5
 800a2b0:	4621      	mov	r1, r4
 800a2b2:	f7fe fa08 	bl	80086c6 <memset>
 800a2b6:	e7f4      	b.n	800a2a2 <_calloc_r+0x12>

0800a2b8 <__ascii_mbtowc>:
 800a2b8:	b082      	sub	sp, #8
 800a2ba:	b901      	cbnz	r1, 800a2be <__ascii_mbtowc+0x6>
 800a2bc:	a901      	add	r1, sp, #4
 800a2be:	b142      	cbz	r2, 800a2d2 <__ascii_mbtowc+0x1a>
 800a2c0:	b14b      	cbz	r3, 800a2d6 <__ascii_mbtowc+0x1e>
 800a2c2:	7813      	ldrb	r3, [r2, #0]
 800a2c4:	600b      	str	r3, [r1, #0]
 800a2c6:	7812      	ldrb	r2, [r2, #0]
 800a2c8:	1e10      	subs	r0, r2, #0
 800a2ca:	bf18      	it	ne
 800a2cc:	2001      	movne	r0, #1
 800a2ce:	b002      	add	sp, #8
 800a2d0:	4770      	bx	lr
 800a2d2:	4610      	mov	r0, r2
 800a2d4:	e7fb      	b.n	800a2ce <__ascii_mbtowc+0x16>
 800a2d6:	f06f 0001 	mvn.w	r0, #1
 800a2da:	e7f8      	b.n	800a2ce <__ascii_mbtowc+0x16>

0800a2dc <_realloc_r>:
 800a2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e0:	4607      	mov	r7, r0
 800a2e2:	4614      	mov	r4, r2
 800a2e4:	460d      	mov	r5, r1
 800a2e6:	b921      	cbnz	r1, 800a2f2 <_realloc_r+0x16>
 800a2e8:	4611      	mov	r1, r2
 800a2ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ee:	f7ff b981 	b.w	80095f4 <_malloc_r>
 800a2f2:	b92a      	cbnz	r2, 800a300 <_realloc_r+0x24>
 800a2f4:	f7ff f90c 	bl	8009510 <_free_r>
 800a2f8:	4625      	mov	r5, r4
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a300:	f000 f841 	bl	800a386 <_malloc_usable_size_r>
 800a304:	4284      	cmp	r4, r0
 800a306:	4606      	mov	r6, r0
 800a308:	d802      	bhi.n	800a310 <_realloc_r+0x34>
 800a30a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a30e:	d8f4      	bhi.n	800a2fa <_realloc_r+0x1e>
 800a310:	4621      	mov	r1, r4
 800a312:	4638      	mov	r0, r7
 800a314:	f7ff f96e 	bl	80095f4 <_malloc_r>
 800a318:	4680      	mov	r8, r0
 800a31a:	b908      	cbnz	r0, 800a320 <_realloc_r+0x44>
 800a31c:	4645      	mov	r5, r8
 800a31e:	e7ec      	b.n	800a2fa <_realloc_r+0x1e>
 800a320:	42b4      	cmp	r4, r6
 800a322:	4622      	mov	r2, r4
 800a324:	4629      	mov	r1, r5
 800a326:	bf28      	it	cs
 800a328:	4632      	movcs	r2, r6
 800a32a:	f7fe fa86 	bl	800883a <memcpy>
 800a32e:	4629      	mov	r1, r5
 800a330:	4638      	mov	r0, r7
 800a332:	f7ff f8ed 	bl	8009510 <_free_r>
 800a336:	e7f1      	b.n	800a31c <_realloc_r+0x40>

0800a338 <__ascii_wctomb>:
 800a338:	4603      	mov	r3, r0
 800a33a:	4608      	mov	r0, r1
 800a33c:	b141      	cbz	r1, 800a350 <__ascii_wctomb+0x18>
 800a33e:	2aff      	cmp	r2, #255	@ 0xff
 800a340:	d904      	bls.n	800a34c <__ascii_wctomb+0x14>
 800a342:	228a      	movs	r2, #138	@ 0x8a
 800a344:	f04f 30ff 	mov.w	r0, #4294967295
 800a348:	601a      	str	r2, [r3, #0]
 800a34a:	4770      	bx	lr
 800a34c:	2001      	movs	r0, #1
 800a34e:	700a      	strb	r2, [r1, #0]
 800a350:	4770      	bx	lr
	...

0800a354 <fiprintf>:
 800a354:	b40e      	push	{r1, r2, r3}
 800a356:	b503      	push	{r0, r1, lr}
 800a358:	4601      	mov	r1, r0
 800a35a:	ab03      	add	r3, sp, #12
 800a35c:	4805      	ldr	r0, [pc, #20]	@ (800a374 <fiprintf+0x20>)
 800a35e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a362:	6800      	ldr	r0, [r0, #0]
 800a364:	9301      	str	r3, [sp, #4]
 800a366:	f000 f83d 	bl	800a3e4 <_vfiprintf_r>
 800a36a:	b002      	add	sp, #8
 800a36c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a370:	b003      	add	sp, #12
 800a372:	4770      	bx	lr
 800a374:	20000018 	.word	0x20000018

0800a378 <abort>:
 800a378:	2006      	movs	r0, #6
 800a37a:	b508      	push	{r3, lr}
 800a37c:	f000 fa06 	bl	800a78c <raise>
 800a380:	2001      	movs	r0, #1
 800a382:	f7f8 fa96 	bl	80028b2 <_exit>

0800a386 <_malloc_usable_size_r>:
 800a386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a38a:	1f18      	subs	r0, r3, #4
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	bfbc      	itt	lt
 800a390:	580b      	ldrlt	r3, [r1, r0]
 800a392:	18c0      	addlt	r0, r0, r3
 800a394:	4770      	bx	lr

0800a396 <__sfputc_r>:
 800a396:	6893      	ldr	r3, [r2, #8]
 800a398:	b410      	push	{r4}
 800a39a:	3b01      	subs	r3, #1
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	6093      	str	r3, [r2, #8]
 800a3a0:	da07      	bge.n	800a3b2 <__sfputc_r+0x1c>
 800a3a2:	6994      	ldr	r4, [r2, #24]
 800a3a4:	42a3      	cmp	r3, r4
 800a3a6:	db01      	blt.n	800a3ac <__sfputc_r+0x16>
 800a3a8:	290a      	cmp	r1, #10
 800a3aa:	d102      	bne.n	800a3b2 <__sfputc_r+0x1c>
 800a3ac:	bc10      	pop	{r4}
 800a3ae:	f000 b931 	b.w	800a614 <__swbuf_r>
 800a3b2:	6813      	ldr	r3, [r2, #0]
 800a3b4:	1c58      	adds	r0, r3, #1
 800a3b6:	6010      	str	r0, [r2, #0]
 800a3b8:	7019      	strb	r1, [r3, #0]
 800a3ba:	4608      	mov	r0, r1
 800a3bc:	bc10      	pop	{r4}
 800a3be:	4770      	bx	lr

0800a3c0 <__sfputs_r>:
 800a3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3c2:	4606      	mov	r6, r0
 800a3c4:	460f      	mov	r7, r1
 800a3c6:	4614      	mov	r4, r2
 800a3c8:	18d5      	adds	r5, r2, r3
 800a3ca:	42ac      	cmp	r4, r5
 800a3cc:	d101      	bne.n	800a3d2 <__sfputs_r+0x12>
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	e007      	b.n	800a3e2 <__sfputs_r+0x22>
 800a3d2:	463a      	mov	r2, r7
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3da:	f7ff ffdc 	bl	800a396 <__sfputc_r>
 800a3de:	1c43      	adds	r3, r0, #1
 800a3e0:	d1f3      	bne.n	800a3ca <__sfputs_r+0xa>
 800a3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a3e4 <_vfiprintf_r>:
 800a3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e8:	460d      	mov	r5, r1
 800a3ea:	4614      	mov	r4, r2
 800a3ec:	4698      	mov	r8, r3
 800a3ee:	4606      	mov	r6, r0
 800a3f0:	b09d      	sub	sp, #116	@ 0x74
 800a3f2:	b118      	cbz	r0, 800a3fc <_vfiprintf_r+0x18>
 800a3f4:	6a03      	ldr	r3, [r0, #32]
 800a3f6:	b90b      	cbnz	r3, 800a3fc <_vfiprintf_r+0x18>
 800a3f8:	f7fe f8ba 	bl	8008570 <__sinit>
 800a3fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3fe:	07d9      	lsls	r1, r3, #31
 800a400:	d405      	bmi.n	800a40e <_vfiprintf_r+0x2a>
 800a402:	89ab      	ldrh	r3, [r5, #12]
 800a404:	059a      	lsls	r2, r3, #22
 800a406:	d402      	bmi.n	800a40e <_vfiprintf_r+0x2a>
 800a408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a40a:	f7fe f9fe 	bl	800880a <__retarget_lock_acquire_recursive>
 800a40e:	89ab      	ldrh	r3, [r5, #12]
 800a410:	071b      	lsls	r3, r3, #28
 800a412:	d501      	bpl.n	800a418 <_vfiprintf_r+0x34>
 800a414:	692b      	ldr	r3, [r5, #16]
 800a416:	b99b      	cbnz	r3, 800a440 <_vfiprintf_r+0x5c>
 800a418:	4629      	mov	r1, r5
 800a41a:	4630      	mov	r0, r6
 800a41c:	f000 f938 	bl	800a690 <__swsetup_r>
 800a420:	b170      	cbz	r0, 800a440 <_vfiprintf_r+0x5c>
 800a422:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a424:	07dc      	lsls	r4, r3, #31
 800a426:	d504      	bpl.n	800a432 <_vfiprintf_r+0x4e>
 800a428:	f04f 30ff 	mov.w	r0, #4294967295
 800a42c:	b01d      	add	sp, #116	@ 0x74
 800a42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a432:	89ab      	ldrh	r3, [r5, #12]
 800a434:	0598      	lsls	r0, r3, #22
 800a436:	d4f7      	bmi.n	800a428 <_vfiprintf_r+0x44>
 800a438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a43a:	f7fe f9e7 	bl	800880c <__retarget_lock_release_recursive>
 800a43e:	e7f3      	b.n	800a428 <_vfiprintf_r+0x44>
 800a440:	2300      	movs	r3, #0
 800a442:	9309      	str	r3, [sp, #36]	@ 0x24
 800a444:	2320      	movs	r3, #32
 800a446:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a44a:	2330      	movs	r3, #48	@ 0x30
 800a44c:	f04f 0901 	mov.w	r9, #1
 800a450:	f8cd 800c 	str.w	r8, [sp, #12]
 800a454:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a600 <_vfiprintf_r+0x21c>
 800a458:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a45c:	4623      	mov	r3, r4
 800a45e:	469a      	mov	sl, r3
 800a460:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a464:	b10a      	cbz	r2, 800a46a <_vfiprintf_r+0x86>
 800a466:	2a25      	cmp	r2, #37	@ 0x25
 800a468:	d1f9      	bne.n	800a45e <_vfiprintf_r+0x7a>
 800a46a:	ebba 0b04 	subs.w	fp, sl, r4
 800a46e:	d00b      	beq.n	800a488 <_vfiprintf_r+0xa4>
 800a470:	465b      	mov	r3, fp
 800a472:	4622      	mov	r2, r4
 800a474:	4629      	mov	r1, r5
 800a476:	4630      	mov	r0, r6
 800a478:	f7ff ffa2 	bl	800a3c0 <__sfputs_r>
 800a47c:	3001      	adds	r0, #1
 800a47e:	f000 80a7 	beq.w	800a5d0 <_vfiprintf_r+0x1ec>
 800a482:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a484:	445a      	add	r2, fp
 800a486:	9209      	str	r2, [sp, #36]	@ 0x24
 800a488:	f89a 3000 	ldrb.w	r3, [sl]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f000 809f 	beq.w	800a5d0 <_vfiprintf_r+0x1ec>
 800a492:	2300      	movs	r3, #0
 800a494:	f04f 32ff 	mov.w	r2, #4294967295
 800a498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a49c:	f10a 0a01 	add.w	sl, sl, #1
 800a4a0:	9304      	str	r3, [sp, #16]
 800a4a2:	9307      	str	r3, [sp, #28]
 800a4a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a4a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a4aa:	4654      	mov	r4, sl
 800a4ac:	2205      	movs	r2, #5
 800a4ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4b2:	4853      	ldr	r0, [pc, #332]	@ (800a600 <_vfiprintf_r+0x21c>)
 800a4b4:	f7fe f9b3 	bl	800881e <memchr>
 800a4b8:	9a04      	ldr	r2, [sp, #16]
 800a4ba:	b9d8      	cbnz	r0, 800a4f4 <_vfiprintf_r+0x110>
 800a4bc:	06d1      	lsls	r1, r2, #27
 800a4be:	bf44      	itt	mi
 800a4c0:	2320      	movmi	r3, #32
 800a4c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4c6:	0713      	lsls	r3, r2, #28
 800a4c8:	bf44      	itt	mi
 800a4ca:	232b      	movmi	r3, #43	@ 0x2b
 800a4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a4d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4d6:	d015      	beq.n	800a504 <_vfiprintf_r+0x120>
 800a4d8:	4654      	mov	r4, sl
 800a4da:	2000      	movs	r0, #0
 800a4dc:	f04f 0c0a 	mov.w	ip, #10
 800a4e0:	9a07      	ldr	r2, [sp, #28]
 800a4e2:	4621      	mov	r1, r4
 800a4e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4e8:	3b30      	subs	r3, #48	@ 0x30
 800a4ea:	2b09      	cmp	r3, #9
 800a4ec:	d94b      	bls.n	800a586 <_vfiprintf_r+0x1a2>
 800a4ee:	b1b0      	cbz	r0, 800a51e <_vfiprintf_r+0x13a>
 800a4f0:	9207      	str	r2, [sp, #28]
 800a4f2:	e014      	b.n	800a51e <_vfiprintf_r+0x13a>
 800a4f4:	eba0 0308 	sub.w	r3, r0, r8
 800a4f8:	fa09 f303 	lsl.w	r3, r9, r3
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	46a2      	mov	sl, r4
 800a500:	9304      	str	r3, [sp, #16]
 800a502:	e7d2      	b.n	800a4aa <_vfiprintf_r+0xc6>
 800a504:	9b03      	ldr	r3, [sp, #12]
 800a506:	1d19      	adds	r1, r3, #4
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	9103      	str	r1, [sp, #12]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	bfbb      	ittet	lt
 800a510:	425b      	neglt	r3, r3
 800a512:	f042 0202 	orrlt.w	r2, r2, #2
 800a516:	9307      	strge	r3, [sp, #28]
 800a518:	9307      	strlt	r3, [sp, #28]
 800a51a:	bfb8      	it	lt
 800a51c:	9204      	strlt	r2, [sp, #16]
 800a51e:	7823      	ldrb	r3, [r4, #0]
 800a520:	2b2e      	cmp	r3, #46	@ 0x2e
 800a522:	d10a      	bne.n	800a53a <_vfiprintf_r+0x156>
 800a524:	7863      	ldrb	r3, [r4, #1]
 800a526:	2b2a      	cmp	r3, #42	@ 0x2a
 800a528:	d132      	bne.n	800a590 <_vfiprintf_r+0x1ac>
 800a52a:	9b03      	ldr	r3, [sp, #12]
 800a52c:	3402      	adds	r4, #2
 800a52e:	1d1a      	adds	r2, r3, #4
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	9203      	str	r2, [sp, #12]
 800a534:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a538:	9305      	str	r3, [sp, #20]
 800a53a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a604 <_vfiprintf_r+0x220>
 800a53e:	2203      	movs	r2, #3
 800a540:	4650      	mov	r0, sl
 800a542:	7821      	ldrb	r1, [r4, #0]
 800a544:	f7fe f96b 	bl	800881e <memchr>
 800a548:	b138      	cbz	r0, 800a55a <_vfiprintf_r+0x176>
 800a54a:	2240      	movs	r2, #64	@ 0x40
 800a54c:	9b04      	ldr	r3, [sp, #16]
 800a54e:	eba0 000a 	sub.w	r0, r0, sl
 800a552:	4082      	lsls	r2, r0
 800a554:	4313      	orrs	r3, r2
 800a556:	3401      	adds	r4, #1
 800a558:	9304      	str	r3, [sp, #16]
 800a55a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a55e:	2206      	movs	r2, #6
 800a560:	4829      	ldr	r0, [pc, #164]	@ (800a608 <_vfiprintf_r+0x224>)
 800a562:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a566:	f7fe f95a 	bl	800881e <memchr>
 800a56a:	2800      	cmp	r0, #0
 800a56c:	d03f      	beq.n	800a5ee <_vfiprintf_r+0x20a>
 800a56e:	4b27      	ldr	r3, [pc, #156]	@ (800a60c <_vfiprintf_r+0x228>)
 800a570:	bb1b      	cbnz	r3, 800a5ba <_vfiprintf_r+0x1d6>
 800a572:	9b03      	ldr	r3, [sp, #12]
 800a574:	3307      	adds	r3, #7
 800a576:	f023 0307 	bic.w	r3, r3, #7
 800a57a:	3308      	adds	r3, #8
 800a57c:	9303      	str	r3, [sp, #12]
 800a57e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a580:	443b      	add	r3, r7
 800a582:	9309      	str	r3, [sp, #36]	@ 0x24
 800a584:	e76a      	b.n	800a45c <_vfiprintf_r+0x78>
 800a586:	460c      	mov	r4, r1
 800a588:	2001      	movs	r0, #1
 800a58a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a58e:	e7a8      	b.n	800a4e2 <_vfiprintf_r+0xfe>
 800a590:	2300      	movs	r3, #0
 800a592:	f04f 0c0a 	mov.w	ip, #10
 800a596:	4619      	mov	r1, r3
 800a598:	3401      	adds	r4, #1
 800a59a:	9305      	str	r3, [sp, #20]
 800a59c:	4620      	mov	r0, r4
 800a59e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5a2:	3a30      	subs	r2, #48	@ 0x30
 800a5a4:	2a09      	cmp	r2, #9
 800a5a6:	d903      	bls.n	800a5b0 <_vfiprintf_r+0x1cc>
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d0c6      	beq.n	800a53a <_vfiprintf_r+0x156>
 800a5ac:	9105      	str	r1, [sp, #20]
 800a5ae:	e7c4      	b.n	800a53a <_vfiprintf_r+0x156>
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5b8:	e7f0      	b.n	800a59c <_vfiprintf_r+0x1b8>
 800a5ba:	ab03      	add	r3, sp, #12
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	462a      	mov	r2, r5
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	4b13      	ldr	r3, [pc, #76]	@ (800a610 <_vfiprintf_r+0x22c>)
 800a5c4:	a904      	add	r1, sp, #16
 800a5c6:	f7fd fb8b 	bl	8007ce0 <_printf_float>
 800a5ca:	4607      	mov	r7, r0
 800a5cc:	1c78      	adds	r0, r7, #1
 800a5ce:	d1d6      	bne.n	800a57e <_vfiprintf_r+0x19a>
 800a5d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5d2:	07d9      	lsls	r1, r3, #31
 800a5d4:	d405      	bmi.n	800a5e2 <_vfiprintf_r+0x1fe>
 800a5d6:	89ab      	ldrh	r3, [r5, #12]
 800a5d8:	059a      	lsls	r2, r3, #22
 800a5da:	d402      	bmi.n	800a5e2 <_vfiprintf_r+0x1fe>
 800a5dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5de:	f7fe f915 	bl	800880c <__retarget_lock_release_recursive>
 800a5e2:	89ab      	ldrh	r3, [r5, #12]
 800a5e4:	065b      	lsls	r3, r3, #25
 800a5e6:	f53f af1f 	bmi.w	800a428 <_vfiprintf_r+0x44>
 800a5ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5ec:	e71e      	b.n	800a42c <_vfiprintf_r+0x48>
 800a5ee:	ab03      	add	r3, sp, #12
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	462a      	mov	r2, r5
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	4b06      	ldr	r3, [pc, #24]	@ (800a610 <_vfiprintf_r+0x22c>)
 800a5f8:	a904      	add	r1, sp, #16
 800a5fa:	f7fd fe0f 	bl	800821c <_printf_i>
 800a5fe:	e7e4      	b.n	800a5ca <_vfiprintf_r+0x1e6>
 800a600:	0800b20c 	.word	0x0800b20c
 800a604:	0800b212 	.word	0x0800b212
 800a608:	0800b216 	.word	0x0800b216
 800a60c:	08007ce1 	.word	0x08007ce1
 800a610:	0800a3c1 	.word	0x0800a3c1

0800a614 <__swbuf_r>:
 800a614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a616:	460e      	mov	r6, r1
 800a618:	4614      	mov	r4, r2
 800a61a:	4605      	mov	r5, r0
 800a61c:	b118      	cbz	r0, 800a626 <__swbuf_r+0x12>
 800a61e:	6a03      	ldr	r3, [r0, #32]
 800a620:	b90b      	cbnz	r3, 800a626 <__swbuf_r+0x12>
 800a622:	f7fd ffa5 	bl	8008570 <__sinit>
 800a626:	69a3      	ldr	r3, [r4, #24]
 800a628:	60a3      	str	r3, [r4, #8]
 800a62a:	89a3      	ldrh	r3, [r4, #12]
 800a62c:	071a      	lsls	r2, r3, #28
 800a62e:	d501      	bpl.n	800a634 <__swbuf_r+0x20>
 800a630:	6923      	ldr	r3, [r4, #16]
 800a632:	b943      	cbnz	r3, 800a646 <__swbuf_r+0x32>
 800a634:	4621      	mov	r1, r4
 800a636:	4628      	mov	r0, r5
 800a638:	f000 f82a 	bl	800a690 <__swsetup_r>
 800a63c:	b118      	cbz	r0, 800a646 <__swbuf_r+0x32>
 800a63e:	f04f 37ff 	mov.w	r7, #4294967295
 800a642:	4638      	mov	r0, r7
 800a644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a646:	6823      	ldr	r3, [r4, #0]
 800a648:	6922      	ldr	r2, [r4, #16]
 800a64a:	b2f6      	uxtb	r6, r6
 800a64c:	1a98      	subs	r0, r3, r2
 800a64e:	6963      	ldr	r3, [r4, #20]
 800a650:	4637      	mov	r7, r6
 800a652:	4283      	cmp	r3, r0
 800a654:	dc05      	bgt.n	800a662 <__swbuf_r+0x4e>
 800a656:	4621      	mov	r1, r4
 800a658:	4628      	mov	r0, r5
 800a65a:	f7ff fda9 	bl	800a1b0 <_fflush_r>
 800a65e:	2800      	cmp	r0, #0
 800a660:	d1ed      	bne.n	800a63e <__swbuf_r+0x2a>
 800a662:	68a3      	ldr	r3, [r4, #8]
 800a664:	3b01      	subs	r3, #1
 800a666:	60a3      	str	r3, [r4, #8]
 800a668:	6823      	ldr	r3, [r4, #0]
 800a66a:	1c5a      	adds	r2, r3, #1
 800a66c:	6022      	str	r2, [r4, #0]
 800a66e:	701e      	strb	r6, [r3, #0]
 800a670:	6962      	ldr	r2, [r4, #20]
 800a672:	1c43      	adds	r3, r0, #1
 800a674:	429a      	cmp	r2, r3
 800a676:	d004      	beq.n	800a682 <__swbuf_r+0x6e>
 800a678:	89a3      	ldrh	r3, [r4, #12]
 800a67a:	07db      	lsls	r3, r3, #31
 800a67c:	d5e1      	bpl.n	800a642 <__swbuf_r+0x2e>
 800a67e:	2e0a      	cmp	r6, #10
 800a680:	d1df      	bne.n	800a642 <__swbuf_r+0x2e>
 800a682:	4621      	mov	r1, r4
 800a684:	4628      	mov	r0, r5
 800a686:	f7ff fd93 	bl	800a1b0 <_fflush_r>
 800a68a:	2800      	cmp	r0, #0
 800a68c:	d0d9      	beq.n	800a642 <__swbuf_r+0x2e>
 800a68e:	e7d6      	b.n	800a63e <__swbuf_r+0x2a>

0800a690 <__swsetup_r>:
 800a690:	b538      	push	{r3, r4, r5, lr}
 800a692:	4b29      	ldr	r3, [pc, #164]	@ (800a738 <__swsetup_r+0xa8>)
 800a694:	4605      	mov	r5, r0
 800a696:	6818      	ldr	r0, [r3, #0]
 800a698:	460c      	mov	r4, r1
 800a69a:	b118      	cbz	r0, 800a6a4 <__swsetup_r+0x14>
 800a69c:	6a03      	ldr	r3, [r0, #32]
 800a69e:	b90b      	cbnz	r3, 800a6a4 <__swsetup_r+0x14>
 800a6a0:	f7fd ff66 	bl	8008570 <__sinit>
 800a6a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6a8:	0719      	lsls	r1, r3, #28
 800a6aa:	d422      	bmi.n	800a6f2 <__swsetup_r+0x62>
 800a6ac:	06da      	lsls	r2, r3, #27
 800a6ae:	d407      	bmi.n	800a6c0 <__swsetup_r+0x30>
 800a6b0:	2209      	movs	r2, #9
 800a6b2:	602a      	str	r2, [r5, #0]
 800a6b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6bc:	81a3      	strh	r3, [r4, #12]
 800a6be:	e033      	b.n	800a728 <__swsetup_r+0x98>
 800a6c0:	0758      	lsls	r0, r3, #29
 800a6c2:	d512      	bpl.n	800a6ea <__swsetup_r+0x5a>
 800a6c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6c6:	b141      	cbz	r1, 800a6da <__swsetup_r+0x4a>
 800a6c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6cc:	4299      	cmp	r1, r3
 800a6ce:	d002      	beq.n	800a6d6 <__swsetup_r+0x46>
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	f7fe ff1d 	bl	8009510 <_free_r>
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a6da:	89a3      	ldrh	r3, [r4, #12]
 800a6dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a6e0:	81a3      	strh	r3, [r4, #12]
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	6063      	str	r3, [r4, #4]
 800a6e6:	6923      	ldr	r3, [r4, #16]
 800a6e8:	6023      	str	r3, [r4, #0]
 800a6ea:	89a3      	ldrh	r3, [r4, #12]
 800a6ec:	f043 0308 	orr.w	r3, r3, #8
 800a6f0:	81a3      	strh	r3, [r4, #12]
 800a6f2:	6923      	ldr	r3, [r4, #16]
 800a6f4:	b94b      	cbnz	r3, 800a70a <__swsetup_r+0x7a>
 800a6f6:	89a3      	ldrh	r3, [r4, #12]
 800a6f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a6fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a700:	d003      	beq.n	800a70a <__swsetup_r+0x7a>
 800a702:	4621      	mov	r1, r4
 800a704:	4628      	mov	r0, r5
 800a706:	f000 f882 	bl	800a80e <__smakebuf_r>
 800a70a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a70e:	f013 0201 	ands.w	r2, r3, #1
 800a712:	d00a      	beq.n	800a72a <__swsetup_r+0x9a>
 800a714:	2200      	movs	r2, #0
 800a716:	60a2      	str	r2, [r4, #8]
 800a718:	6962      	ldr	r2, [r4, #20]
 800a71a:	4252      	negs	r2, r2
 800a71c:	61a2      	str	r2, [r4, #24]
 800a71e:	6922      	ldr	r2, [r4, #16]
 800a720:	b942      	cbnz	r2, 800a734 <__swsetup_r+0xa4>
 800a722:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a726:	d1c5      	bne.n	800a6b4 <__swsetup_r+0x24>
 800a728:	bd38      	pop	{r3, r4, r5, pc}
 800a72a:	0799      	lsls	r1, r3, #30
 800a72c:	bf58      	it	pl
 800a72e:	6962      	ldrpl	r2, [r4, #20]
 800a730:	60a2      	str	r2, [r4, #8]
 800a732:	e7f4      	b.n	800a71e <__swsetup_r+0x8e>
 800a734:	2000      	movs	r0, #0
 800a736:	e7f7      	b.n	800a728 <__swsetup_r+0x98>
 800a738:	20000018 	.word	0x20000018

0800a73c <_raise_r>:
 800a73c:	291f      	cmp	r1, #31
 800a73e:	b538      	push	{r3, r4, r5, lr}
 800a740:	4605      	mov	r5, r0
 800a742:	460c      	mov	r4, r1
 800a744:	d904      	bls.n	800a750 <_raise_r+0x14>
 800a746:	2316      	movs	r3, #22
 800a748:	6003      	str	r3, [r0, #0]
 800a74a:	f04f 30ff 	mov.w	r0, #4294967295
 800a74e:	bd38      	pop	{r3, r4, r5, pc}
 800a750:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a752:	b112      	cbz	r2, 800a75a <_raise_r+0x1e>
 800a754:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a758:	b94b      	cbnz	r3, 800a76e <_raise_r+0x32>
 800a75a:	4628      	mov	r0, r5
 800a75c:	f000 f830 	bl	800a7c0 <_getpid_r>
 800a760:	4622      	mov	r2, r4
 800a762:	4601      	mov	r1, r0
 800a764:	4628      	mov	r0, r5
 800a766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a76a:	f000 b817 	b.w	800a79c <_kill_r>
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d00a      	beq.n	800a788 <_raise_r+0x4c>
 800a772:	1c59      	adds	r1, r3, #1
 800a774:	d103      	bne.n	800a77e <_raise_r+0x42>
 800a776:	2316      	movs	r3, #22
 800a778:	6003      	str	r3, [r0, #0]
 800a77a:	2001      	movs	r0, #1
 800a77c:	e7e7      	b.n	800a74e <_raise_r+0x12>
 800a77e:	2100      	movs	r1, #0
 800a780:	4620      	mov	r0, r4
 800a782:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a786:	4798      	blx	r3
 800a788:	2000      	movs	r0, #0
 800a78a:	e7e0      	b.n	800a74e <_raise_r+0x12>

0800a78c <raise>:
 800a78c:	4b02      	ldr	r3, [pc, #8]	@ (800a798 <raise+0xc>)
 800a78e:	4601      	mov	r1, r0
 800a790:	6818      	ldr	r0, [r3, #0]
 800a792:	f7ff bfd3 	b.w	800a73c <_raise_r>
 800a796:	bf00      	nop
 800a798:	20000018 	.word	0x20000018

0800a79c <_kill_r>:
 800a79c:	b538      	push	{r3, r4, r5, lr}
 800a79e:	2300      	movs	r3, #0
 800a7a0:	4d06      	ldr	r5, [pc, #24]	@ (800a7bc <_kill_r+0x20>)
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	4608      	mov	r0, r1
 800a7a6:	4611      	mov	r1, r2
 800a7a8:	602b      	str	r3, [r5, #0]
 800a7aa:	f7f8 f872 	bl	8002892 <_kill>
 800a7ae:	1c43      	adds	r3, r0, #1
 800a7b0:	d102      	bne.n	800a7b8 <_kill_r+0x1c>
 800a7b2:	682b      	ldr	r3, [r5, #0]
 800a7b4:	b103      	cbz	r3, 800a7b8 <_kill_r+0x1c>
 800a7b6:	6023      	str	r3, [r4, #0]
 800a7b8:	bd38      	pop	{r3, r4, r5, pc}
 800a7ba:	bf00      	nop
 800a7bc:	20000a48 	.word	0x20000a48

0800a7c0 <_getpid_r>:
 800a7c0:	f7f8 b860 	b.w	8002884 <_getpid>

0800a7c4 <__swhatbuf_r>:
 800a7c4:	b570      	push	{r4, r5, r6, lr}
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7cc:	4615      	mov	r5, r2
 800a7ce:	2900      	cmp	r1, #0
 800a7d0:	461e      	mov	r6, r3
 800a7d2:	b096      	sub	sp, #88	@ 0x58
 800a7d4:	da0c      	bge.n	800a7f0 <__swhatbuf_r+0x2c>
 800a7d6:	89a3      	ldrh	r3, [r4, #12]
 800a7d8:	2100      	movs	r1, #0
 800a7da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a7de:	bf14      	ite	ne
 800a7e0:	2340      	movne	r3, #64	@ 0x40
 800a7e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a7e6:	2000      	movs	r0, #0
 800a7e8:	6031      	str	r1, [r6, #0]
 800a7ea:	602b      	str	r3, [r5, #0]
 800a7ec:	b016      	add	sp, #88	@ 0x58
 800a7ee:	bd70      	pop	{r4, r5, r6, pc}
 800a7f0:	466a      	mov	r2, sp
 800a7f2:	f000 f849 	bl	800a888 <_fstat_r>
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	dbed      	blt.n	800a7d6 <__swhatbuf_r+0x12>
 800a7fa:	9901      	ldr	r1, [sp, #4]
 800a7fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a800:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a804:	4259      	negs	r1, r3
 800a806:	4159      	adcs	r1, r3
 800a808:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a80c:	e7eb      	b.n	800a7e6 <__swhatbuf_r+0x22>

0800a80e <__smakebuf_r>:
 800a80e:	898b      	ldrh	r3, [r1, #12]
 800a810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a812:	079d      	lsls	r5, r3, #30
 800a814:	4606      	mov	r6, r0
 800a816:	460c      	mov	r4, r1
 800a818:	d507      	bpl.n	800a82a <__smakebuf_r+0x1c>
 800a81a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a81e:	6023      	str	r3, [r4, #0]
 800a820:	6123      	str	r3, [r4, #16]
 800a822:	2301      	movs	r3, #1
 800a824:	6163      	str	r3, [r4, #20]
 800a826:	b003      	add	sp, #12
 800a828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a82a:	466a      	mov	r2, sp
 800a82c:	ab01      	add	r3, sp, #4
 800a82e:	f7ff ffc9 	bl	800a7c4 <__swhatbuf_r>
 800a832:	9f00      	ldr	r7, [sp, #0]
 800a834:	4605      	mov	r5, r0
 800a836:	4639      	mov	r1, r7
 800a838:	4630      	mov	r0, r6
 800a83a:	f7fe fedb 	bl	80095f4 <_malloc_r>
 800a83e:	b948      	cbnz	r0, 800a854 <__smakebuf_r+0x46>
 800a840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a844:	059a      	lsls	r2, r3, #22
 800a846:	d4ee      	bmi.n	800a826 <__smakebuf_r+0x18>
 800a848:	f023 0303 	bic.w	r3, r3, #3
 800a84c:	f043 0302 	orr.w	r3, r3, #2
 800a850:	81a3      	strh	r3, [r4, #12]
 800a852:	e7e2      	b.n	800a81a <__smakebuf_r+0xc>
 800a854:	89a3      	ldrh	r3, [r4, #12]
 800a856:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a85a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a85e:	81a3      	strh	r3, [r4, #12]
 800a860:	9b01      	ldr	r3, [sp, #4]
 800a862:	6020      	str	r0, [r4, #0]
 800a864:	b15b      	cbz	r3, 800a87e <__smakebuf_r+0x70>
 800a866:	4630      	mov	r0, r6
 800a868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a86c:	f000 f81e 	bl	800a8ac <_isatty_r>
 800a870:	b128      	cbz	r0, 800a87e <__smakebuf_r+0x70>
 800a872:	89a3      	ldrh	r3, [r4, #12]
 800a874:	f023 0303 	bic.w	r3, r3, #3
 800a878:	f043 0301 	orr.w	r3, r3, #1
 800a87c:	81a3      	strh	r3, [r4, #12]
 800a87e:	89a3      	ldrh	r3, [r4, #12]
 800a880:	431d      	orrs	r5, r3
 800a882:	81a5      	strh	r5, [r4, #12]
 800a884:	e7cf      	b.n	800a826 <__smakebuf_r+0x18>
	...

0800a888 <_fstat_r>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	2300      	movs	r3, #0
 800a88c:	4d06      	ldr	r5, [pc, #24]	@ (800a8a8 <_fstat_r+0x20>)
 800a88e:	4604      	mov	r4, r0
 800a890:	4608      	mov	r0, r1
 800a892:	4611      	mov	r1, r2
 800a894:	602b      	str	r3, [r5, #0]
 800a896:	f7f8 f85b 	bl	8002950 <_fstat>
 800a89a:	1c43      	adds	r3, r0, #1
 800a89c:	d102      	bne.n	800a8a4 <_fstat_r+0x1c>
 800a89e:	682b      	ldr	r3, [r5, #0]
 800a8a0:	b103      	cbz	r3, 800a8a4 <_fstat_r+0x1c>
 800a8a2:	6023      	str	r3, [r4, #0]
 800a8a4:	bd38      	pop	{r3, r4, r5, pc}
 800a8a6:	bf00      	nop
 800a8a8:	20000a48 	.word	0x20000a48

0800a8ac <_isatty_r>:
 800a8ac:	b538      	push	{r3, r4, r5, lr}
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	4d05      	ldr	r5, [pc, #20]	@ (800a8c8 <_isatty_r+0x1c>)
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	4608      	mov	r0, r1
 800a8b6:	602b      	str	r3, [r5, #0]
 800a8b8:	f7f8 f859 	bl	800296e <_isatty>
 800a8bc:	1c43      	adds	r3, r0, #1
 800a8be:	d102      	bne.n	800a8c6 <_isatty_r+0x1a>
 800a8c0:	682b      	ldr	r3, [r5, #0]
 800a8c2:	b103      	cbz	r3, 800a8c6 <_isatty_r+0x1a>
 800a8c4:	6023      	str	r3, [r4, #0]
 800a8c6:	bd38      	pop	{r3, r4, r5, pc}
 800a8c8:	20000a48 	.word	0x20000a48

0800a8cc <_init>:
 800a8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ce:	bf00      	nop
 800a8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8d2:	bc08      	pop	{r3}
 800a8d4:	469e      	mov	lr, r3
 800a8d6:	4770      	bx	lr

0800a8d8 <_fini>:
 800a8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8da:	bf00      	nop
 800a8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8de:	bc08      	pop	{r3}
 800a8e0:	469e      	mov	lr, r3
 800a8e2:	4770      	bx	lr
